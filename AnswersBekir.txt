1-Git, basitçe yaptığımız değişiklikleri kaydedip aralarında geçiş sağladığımız, ekip çalışmalarında iletişimi kolaylaştıran, dağıtık bir versiyon kontrol sistemidir.

2-Git fetch komutuyla sunucudaki değişiklikleri görebiliriz, ancak kendi projemize ekleyemeyiz. Git pull komutu ise sunucudan fetch komutuyla gördüğümüz değişiklikleri kendi bilgisayarımıza indirmemizi sağlar.

3-Arkadaşımız kendi bilgisayarından commitlemiş olduğu değişiklikleri push etmediğinden değişikliller sadece onun bilgisayarında yer alır, bu yüzden probleblem oluşabilir

4-Origin sunucudaki ana repoyu temsil eder.

5-Çalıştığımız projede bulunduğumuz branchdeki son commiti ve branchi işaret eder.

6-Staging Area,projede yapılan değişiklerin geçici olarak gösterildiği commit atmadan önce gözden geçirmemizi sağlayan bölümdür.Git diff de staged area ile projemiz arasındaki farkları gösterir.

7-Untracked file,git tarafından kaydedilmeyen dosyaların olduğu bir alandır.Git add <File_name> ile staging area'ya eklenir.

8-Lokal makinemizdeki git deposu silinir ve takip edilen dosyalar kaybolur.

9-Git init yaparken --template seçeneği kullanarak bir şablon belirtirseniz ve bu şablonda ReadMe.md dosyası bulunursa, git init komutunu kullanırken otomatik olarak ReadMe.md dosyası da oluşturulur.

10-Branch(dal) yapısı, projedeki bölümleri ayrı ayrı dallarda geliştirmemizi ve modüler bir çalışma yapısı sağlar.

11-Sıfırdan branch oluştururken terminalden git branch <Branch_adı> şeklinde yapabiliriz.

12-Branchler arasında geçiş yaparken git checkout <Branch_adı> komutu kullanılır.

13-Uzak sunucudan git clone ile spesifik bir branch i klonlamak için git clone --single-branch -b <branch_adı> <depo_URL> komutlarını terminale gireriz.

14-Merge conflict ,iki farklı branch üzerinde çalışan iki kişinin yaptığı değişikliklerin ana branch'de birleştirilirken, ana branch'te aynı konumda iki farklı değişiklik olduğunda ortaya çıkar.

15-Git log komutu ile daha önce yapmış olduğumuz commitleri kimin ne zaman ne yaptığını ve en son bulunduğumuz branch'i görürüz.

16-Git diff ile son commit ve staged area arasındaki farklar,working directory ve son commit arasındaki farklar, working directory ve staged area arasındaki farkları gösterebilir.

17-Staging areadaki değişiklikleri geri almak ve yaptığımız commitlere geri dönme işlemleri yapılabilir.

18-Git commit ile yaptığımız değişiklikleri lokal olarak kaydederiz fakat bunu sunucuya pushlamazsak diğer kullanan kişiler bizim yaptığımız değişiklikler üzerinden çalışamaz.

19-Atomic commit, birden çok değişikliği tek bir adımda ve mantıklı bir şekilde kaydetme işlemidir.

20-Repository,bir versiyon kotrol sistemi tarafından yönetilen dosyaların bulunduğu merkezi bir depodur.Bu depoda geçmiş değişikikler ve üzerinde yapılan çalışmaları takip edebiliriz.

21-Git tag belirli bir commit'e bir etiket eklerken, "git branch" farklı geliştirme dallarını yönetmek için kullanılır.
