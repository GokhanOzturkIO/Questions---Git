1. Git Nedir ?

Git, en kısa tanımıyla bir versiyon kontrol sistemidir.Versiyon kontrolü, bir projenin üzerinde farklı bilgisayarlardan, birden fazla kişinin çalışmasına ve proje üzerinde yapılan değişikliklerin eş zamanlı olarak kaydedilmesine olanak verir.
Bu kaydedilme işlemi ise versiyonların, yani her yeni değişimin, detaylı bir dökümüne ulaşmayı kolaylaştırır. Git nedir ne işe yarar sorusunu biraz daha açmak gerekirse bu sistem farklı yazılımcıların ortak bir temel üzerinde kendi düzenlemelerini yapabilmelerini ve diğerlerinin de düzenleme geçmişine erişebilmesini sağlar. 
Bu sistem aslında bir çeşit versiyon tarihçesi ya da versiyon geçmişi listesidir. Özetle Git, ekip çalışmasına olanak veren ve karışıklık yaşanma ihtimalinin önüne geçen bir versiyon kontrol sistemidir.

####################################################################################

2."git pull" ile "git fetch" komutlarının farkı nedir?

Git Fetch ve Git Pull arasındaki temel fark, git fetch’in kaynaktan en yeni meta veri bilgilerini geri yüklemek için yerel git’inizi gösteren komut olmasıdır. Herhangi bir dosya aktarmaz. 
Daha çok değişikliklerin mevcut olup olmadığını bulmak için verileri incelemek gibidir, oysa git pull tüm değişiklikleri deponuza çekmekle birlikte aynı şeyi yapar.

####################################################################################

3.Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?

Birkaç olası hata vardır bunlar şu şekilde sıralanabilir:

- Erişim yetkisi olamaybilir
- Farklı Branch'lerde çalışıyor olablirsiniz
- Sunucu kaynaklı bağlantı problemi olabilir
- Takım arkadaşınızın gönderdiği değişiklikler, sizin lokalde üzerinde çalıştığınız dosyalara çakışabilir.Bu sebeple git çakışmaları bildirecektir.

####################################################################################

4. "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?

Origin, genellikle Git deposunun uzak sunucu adresini temsil eden bir kısaltmadır.
Örneğin, bir GitHub deposu oluşturduğunuzda, bu depoya varsayılan olarak "origin" adı verilir ve GitHub'un depo URL'si bu "origin" adı altında depoya bağlanır.
Git'te, "origin" dışında çeşitli isimler kullanılabilir. Bu isimler genellikle projenin gereksinimlerine ve iş akışına bağlı olarak değişir. 
İşte yaygın olarak kullanılan bazı isimler: Origin, Upstream, fork,production,staging ve isterseniz random bir isimde koyabilirsiniz.

####################################################################################

5. "HEAD" kelimesi neyi temsil etmektedir?

Kısaca "HEAD" en son yapılan commit'i gösteren bir işaretçidir ve mevcut çalışma dizininde hangi commit'in üzerinde çalışıldığını belirtir.

####################################################################################

6. "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?

"Staging Area" veya "Index", Git'in çalışma alanındaki değişiklikleri hazırlamak ve sonraki bir commit'e dahil etmek için kullanılan geçici bir bölgedir. 
Bu bölge, Git'in içinde bulunduğu üçlü dosya sistemi yapısının bir parçasıdır.

####################################################################################

7. "Untracked file" ne demektir?

Adında anlaşılacağı üzere bu izlenemeyen dosyadır. Git bu dosyayı izleyemez ve takip edemez. Bu durumu görmek için "git status" kullanabiliriz.

####################################################################################

8. ".git" klasörünü silersek ne olur?

Git'in tam merkezinde olan bir klasör .git , eğer bu klasör silinirse bütün depo yani branchler,commitler ve takip edilen dosyaların git ile bağlantısı tamamen kopar.

####################################################################################

9. Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?

Bunun birkaç yöntemi vardır fakat bence en iyi kullanım template kullanımı olacaktır. Git, yeni bir repository oluşturulurken kullanılan bir şablon sistemine sahiptir. 
Bu şablonlardan birini özelleştirerek her yeni repo oluşturulduğunda ReadMe.md dosyasının otomatik olarak eklenmesini sağlayabilirsiniz. Bu şablonlar, .git/templates dizininde yer alır.
İlk olarak, ReadMe.md dosyasını içeren bir template dizini oluşturun:   
                  
mkdir -p ~/.git-templates/hooks
touch ~/.git-templates/hooks/README.md

Sonra, bu template dizinini Git'e tanıtın:

git config --global init.templatedir '~/.git-templates'

####################################################################################

10. Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?

Türkçeye "dal" olarak çevriliyor ve bu oldukça doğru bir tanım olabilir. Projenin geliştirilme sürecinde farklı çalışma alanlarındaki ekipler kendi branch'lerini açıp orda geliştirme yapabilirler. 
Bunun bize birçok avantajı vardır:

- Paralel Geliştirme
- Risk Yönetimi
- Kodu Koruma
- Geri Alma ve Kurtarma

####################################################################################

11. Sıfırdan bir "branch" nasıl oluşturabiliriz?

-İlk olarak, terminal veya komut istemcisini açın.
-Git deposunun bulunduğu dizine gidin. Örneğin:

cd /path/to/your/repository

-Yeni bir branch oluşturmak için git branch komutunu kullanın. Aşağıdaki komut, yeni bir branch oluşturur:

git branch yeni_branch_adı

Bu şekilde bir branch oluşturmuş olacaksınız.

####################################################################################

12. Var olan bir "branch"e nasıl geçebiliriz?

-İlk olarak, terminal veya komut istemcisini açın.
-Git deposunun bulunduğu dizine gidin. Örneğin:

cd /path/to/your/repository

- Geçemek istediğiniz branch ismini girin. Örneğin:

git checkout istenen_branch_adı

Bu şekilde istedğiniz branch girmiş olacaksınız.

####################################################################################

13. "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?

Bu şekilde spesifik bir branch'i çekebiliriz:

git clone -b branch_adı repo_url

####################################################################################

14. "Merge conflict" ne demektir?

Bu durum, genellikle iki farklı branch'in aynı dosyanın aynı bölümlerine yapılan değişikliklerin çakışmasıyla ortaya çıkar.
"Merge conflict" (birleştirme çakışması), Git'in birleştirme işlemi sırasında karşılaştığı ve otomatik olarak çözülemeyen durumları ifade eder.

####################################################################################

15. "git log" komutu ile hangi bilgileri görebiliriz?

Git deposundaki commit geçmişini gösterir. Bu komutla birlikte görülebilecek bazı temel bilgiler şunlardır:

-Commit SHA
-Yazar
-Tarih
-Commit mesajı

####################################################################################

16. "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?

Bu komut iki farklı durum arasındaki değişiklikleri göstermek için kullanılır. Bu durumlar genellikle şunları ifade eder:

-Commitler arası değişikler
-Staging Area
-Working Directory

####################################################################################

17. Git reset ile neyi geri alıyoruz?

Git deposundaki değişiklikleri geri almak veya geri sarmak için kullanılır. Bu komut, çalışma dizinindeki dosyaların durumunu, Staging Area'yı ve hatta son commit'i değiştirebilir.

####################################################################################

18. "git commit" ile "git push" arasındaki fark nedir?

git commit: Bu komut, çalışma dizinizdeki değişiklikleri yerel bir commit olarak kaydetmek için kullanılır. 

git push: Bu komut, yerel Git deposundaki commit'leri uzak bir depoya (genellikle bir sunucu olarak düşünülen bir merkezi depo) göndermek için kullanılır. 
Yani, yerelde yaptığınız commit'leri uzak depoya yükler ve paylaşır.

####################################################################################

19. Atomic commit ne demektir?

Atomic commit prensibi, bir değişiklik grubunun bağımsız bir işlevi gerçekleştirdiği ve diğer değişiklik gruplarından bağımsız olarak ele alındığı anlamına gelir.
Atomic commit prensibi, Git ve diğer versiyon kontrol sistemlerinde yaygın olarak kullanılan bir uygulamadır.

####################################################################################

20. Repository ne demektir?

Repository (Depo), bir versiyon kontrol sistemine (VCS) ait olan dosyaların, değişikliklerin ve projenin kaydedildiği yerdir. 
Başka bir deyişle, repository bir projenin veya bir yazılımın tüm kaynak kodlarını, belgelerini, dosyalarını ve geçmişini içeren bir depodur.

####################################################################################

21. "git tag" nedir? "git branch"’ten farkı nedir?

git tag = Belirli bir commit'e bir etiket (tag) eklemek için kullanılır. Bu, genellikle bir sürüm numarası veya bir önemli kilomet taşı olarak kullanılır.

git branch = Projede yeni bir branch oluşturmak, mevcut branch'leri listelemek, belirli bir branch'e geçmek veya bir branch'i silmek için kullanılır.

####################################################################################




