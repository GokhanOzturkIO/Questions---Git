1. Git Nedir ?

Git, en kısa tanımıyla bir versiyon kontrol sistemidir.Versiyon kontrolü, bir projenin üzerinde farklı bilgisayarlardan, birden fazla kişinin çalışmasına ve proje üzerinde yapılan değişikliklerin eş zamanlı olarak kaydedilmesine olanak verir.
Bu kaydedilme işlemi ise versiyonların, yani her yeni değişimin, detaylı bir dökümüne ulaşmayı kolaylaştırır. Git nedir ne işe yarar sorusunu biraz daha açmak gerekirse bu sistem farklı yazılımcıların ortak bir temel üzerinde kendi düzenlemelerini yapabilmelerini ve diğerlerinin de düzenleme geçmişine erişebilmesini sağlar. 
Bu sistem aslında bir çeşit versiyon tarihçesi ya da versiyon geçmişi listesidir. Özetle Git, ekip çalışmasına olanak veren ve karışıklık yaşanma ihtimalinin önüne geçen bir versiyon kontrol sistemidir.

####################################################################################

2."git pull" ile "git fetch" komutlarının farkı nedir?

Git Fetch ve Git Pull arasındaki temel fark, git fetch’in kaynaktan en yeni meta veri bilgilerini geri yüklemek için yerel git’inizi gösteren komut olmasıdır. Herhangi bir dosya aktarmaz. 
Daha çok değişikliklerin mevcut olup olmadığını bulmak için verileri incelemek gibidir, oysa git pull tüm değişiklikleri deponuza çekmekle birlikte aynı şeyi yapar.

####################################################################################

3.Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?

Birkaç olası hata vardır bunlar şu şekilde sıralanabilir:

- Erişim yetkisi olamaybilir
- Farklı Branch'lerde çalışıyor olablirsiniz
- Sunucu kaynaklı bağlantı problemi olabilir
- Takım arkadaşınızın gönderdiği değişiklikler, sizin lokalde üzerinde çalıştığınız dosyalara çakışabilir.Bu sebeple git çakışmaları bildirecektir.

####################################################################################

4. "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?

Origin, genellikle Git deposunun uzak sunucu adresini temsil eden bir kısaltmadır.
Örneğin, bir GitHub deposu oluşturduğunuzda, bu depoya varsayılan olarak "origin" adı verilir ve GitHub'un depo URL'si bu "origin" adı altında depoya bağlanır.
Git'te, "origin" dışında çeşitli isimler kullanılabilir. Bu isimler genellikle projenin gereksinimlerine ve iş akışına bağlı olarak değişir. 
İşte yaygın olarak kullanılan bazı isimler: Origin, Upstream, fork,production,staging ve isterseniz random bir isimde koyabilirsiniz.

####################################################################################

5. "HEAD" kelimesi neyi temsil etmektedir?

Kısaca "HEAD" en son yapılan commit'i gösteren bir işaretçidir ve mevcut çalışma dizininde hangi commit'in üzerinde çalışıldığını belirtir.

####################################################################################

6. "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?

"Staging Area" veya "Index", Git'in çalışma alanındaki değişiklikleri hazırlamak ve sonraki bir commit'e dahil etmek için kullanılan geçici bir bölgedir. 
Bu bölge, Git'in içinde bulunduğu üçlü dosya sistemi yapısının bir parçasıdır.

####################################################################################





