1- Git Nedir?
Git bir versiyon kontrol sistemidir.

2- "git pull" ile "git fetch" komutlarının farkı nedir?
git fetch uzak sunucudaki gönderilen değişiklileri lokaldeki bilgisayarın haberdar olmasını sağlarken git pull bu değişiklikleri lokaldeki bilgisayara çeker ve branchteki çalışmaya kopyalar.

3-Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?
Takım arkadaşım git commit ile kaydedip git push ile uzak sunucuya kodları göndermemiş olabilir ya da ben git fetch komutu ile uzak sunucudaki değişikliklerden lokalimdeki bilgisayarımı haberdar etmemiş olabilirim. Bu iki farklı durumda da git pull ile lokalime alamam. 

4- "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
Origin uzak sunucudaki repoyu belirtir.

5- "HEAD" kelimesi neyi temsil etmektedir?
HEAD kelimesi anlık olarak bulunduğumuz konumu gösterir. Örneğin commit üzerindeysek o commiti, bir branch üzerindeysek o branchi gösterir.

6- "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
"Staging Area" ya da "Index" değişiklikleri commit etmeden önce kullandığımız geçici bir depolama alanıdır.

7- "Untracked file" ne demektir?
"Untracked file" dosyanın git tarafından takip edilmediğini yani git add komutuyla staging area'ya eklenmediğini ve commit edilmediğini ifade eder.

8- ".git" klasörünü silersek ne olur?
.git klasörünü silersek Git ile ilgili çalıştığımız tüm bilgileri kaybederiz. Bu bilgilerin içinde branch'ler, commit'ler vs. bulunur.

9- Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak git init --template komutunu kullanırız.

10- Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
Branch yapısı yapılan işleri paralelleştirip ana akışın dışında yan yollar sağlatır. Bu bize aynı iş üzerinde çalışırken yapılan herhangi bir değişiklikte diğerinin etkilenmemesini ve çalışma üzerinde aynı yerde değişiklik yaparken conflict almadan çalışmayı sağlar.

11- Sıfırdan bir "branch" nasıl oluşturabiliriz?
Sıfırdan branch oluşturmanın iki yolu var: 1. git branch komutu 2. git checkout -b komutu 2. komut aynı zamanda branch değişikliği sağlar.

12- Var olan bir "branch"e nasıl geçebiliriz?
Var olan bir branch'e git checkout komutu ile geçeriz.

13- "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?
"git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak git clone --branch [branch adı] [branch url'si] komutunu kullanırız.

14- "Merge conflict" ne demektir?
"Merge conflict" birleştirme çakışması demek yani pull ederken projenin aynı satırlarında değişiklikler varsa yaşanır.

15- "git log" komutu ile hangi bilgileri görebiliriz?
"git log" komutu ile commit işlemleri ile ilgili özet bilgileri görürüz: Commit Hash, Author, Date, Commit Message.

16- "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?
"git diff" ile çalışma dizinindeki dosyalar ile staging area veya staging area ile son commit arasındaki farkları göstermek için kullanılır.

17- Git reset ile neyi geri alıyoruz?
"git reset" ile Staging Area'daki değişiklikleri geri alıyoruz. 

18- "git commit" ile "git push" arasındaki fark nedir
"git commit" ile yapılan işlemleri kendi lokalimize kaydederken "git push" ile yapılan projeyi kendi lokalimizden uzaktaki sunucuya gönderiyoruz.

19- Atomic commit ne demektir?
Atomic commit, bir versiyon kontrol sistemi kullanırken bir dizi dosya değişikliğini tek bir mantıksal işlem olarak atomik olarak gerçekleştirmeyi ifade eder. 


