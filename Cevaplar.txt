1-Git Nedir?
Git bir versiyon kontrol sistemidir. 
Genelde yazılımcıların beraber çalışmasına olanak sağlar.
Git sayesinde yazılım geliştirirken yaptığımız güncellemeleri 
arkadaşlarımızla paylaşabiliriz. Veya bir hata yaptığımızda geriye dönebilmemize
olanak sağlar. 

2-"git pull" ile "git fetch" komutlarının farkı nedir?
Git fetch komutu ile remote repository'de bir değişiklik var mı görmemizi sağlar.
Git pull ise remote'taki değişiklikleri kendi lokalimize eklememizi sağlar.

3-Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" 
derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak 
nerelerde hata yapılmış olabilir?
Conflict, yani çakışma olabilir. Çünkü aynı dosya üzerinde çalışmışızdır ve
git hangi değişiklikleri uygulayacağını bilmiyor olabilir. Bu yüzden önce
bu çakışmaları çözüp sonra pull yapmalıyız.

4-"git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
Origin bizim githubdaki adresimizdir. Yani remote'taki repository'dir.
bu komutla github'da değişiklik var mı diye kontrol edilir.

5-"HEAD" kelimesi neyi temsil etmektedir?
Head kelimesi şu anda çalışmakta olduğumuz commit'i temsil etmektedir.

6-"Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
Staging area git add yaptıktan sonra kodlarımızın bulunduğu bölgedir.
Commit atmadan önce burda değişiklikleri kontrol etmemizi sağlar.

7-"Untracked file" ne demektir?
.gitignore klasöründeki dosyalar untracked file'dır. Bu klasördeki dosyalar
uzaktaki sunucuya atılmaz. Daha çok kütüphane dosyaları burada tutulur.

8-".git" klasörünü silersek ne olur?
.git klasörü git init komutu çalıştırıldığında oluşturulur. Ve o çalışma dizininin
git'e bağlandığını gösterir. Bunu silersek git'le bağımız gider ve commit history
ile bağımızı kaybederiz. Projede eski değişikliklere dönemeyiz.

9-Kendi lokalimizde 
her "git init" komutunu kullanıdığımızda otomatik olarak 
"ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
Git template özelliği ile oluşturduğumuz git template içerisine
readme dosyasını ekliyoruz. Sonra git konfigürasyonuna bu template'i atıyoruz 

10-Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
Branch yapısı sayesinde herkes farklı bir özellik üzerinde çalışabilir.
Bu sayede bağımsız özellikler paralel şekilde geliştirilebilir ve
bize hız kazandırır.

11-Sıfırdan bir "branch" nasıl oluşturabiliriz?
En basit haliyle git branch <branch adi> komutu ile oluşturulur.

12-Var olan bir "branch"e nasıl geçebiliriz?
git switch <branch adi> ile branch değiştirebiliriz.

13-"git clone" komutunu kullanırken 
belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?
"git clone --branch <branch adi> repo-url" komutu ile yapılabilir.

14-"Merge conflict" ne demektir?
Merge yani iki branch birleştirme yapılacağı zaman aynı sayfalardaki 
değişiklikler merge conflict'e yol açar. Bunların birini seçip yolumuza 
devam etmeliyiz.

15-"git log" komutu ile hangi bilgileri görebiliriz?
commit tarihi, commit'i kimin yaptığı, commit mesajı gibi bilgileri görebiliriz.

16-"git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?
git diff ile iki farklı commit arasındaki farkları görebiliriz.
İki branch arasındaki farkları da görebiliriz. Temelde bu iki amaçla kullanılır.

17-Git reset ile neyi geri alıyoruz?
istediğimiz bir commit'e geri dönmemizi sağlar.

18-"git commit" ile "git push" arasındaki fark nedir?
Git commit ile yaptığımız değişiklikleri yerel git depomuza atarız.
Git push ile yaptığımız değişiklikleri github'a atmış oluruz.



