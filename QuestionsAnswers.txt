1) Git Nedir ?  → Bir versiyon kontrol sistemidir. Git sayesinde yapacağımız projelerin her bir adımını kaydedip 
daha sonrasında olası herhangi bir dosya veya kod parçasını silme gibi durumda yapılan değişiklikleri geri alabiliriz. 
Aynı zamanda proje üzerinde çalışan bir çok kişinin projede yaptığı her bir değişikliğin kaydedilmesi ve 
diğer kişiler tarafından görülmesini de sağlar. Bu şekilde takım çalışmalarında projenin yönetimini kolaylaştırır ve eş zamanlı 
çalışmayı destekler.
*******************************************
2) "git pull" ile "git fetch" komutlarının farkı nedir? -> git fetch; örneğin proje üzerinde çalışan iki kişiden birinin yaptığı değişiklikleri 
bir diğer kişinin uzak sunucudan git fetch ile local de ki bilgisayarında değişikliğe gitmeden haberdar olmasıdır. Daha sonrasında 
git pull denildiğinde öncesinde haberdar olunan değişiklikler bulunulan çalışma alanına alınabilir. Aralarındaki fark ise 
git pull komutunun değişiklikleri çalışma alanına alması yani entegre etmesidir.
*******************************************
3) Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve 
gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir? -> Takım arkadaşımız kodlarını sadece commit etmiş
olabilir. Yani push komutunu kullanmamıştır. Veya push yaptığı branch i doğru söylememiş olabilir.
*******************************************
4) "git fetch origin" komutundaki "origin" neye karşılık gelmektedir? -> Projenin kopyalandığı ana uzak depoya karşılık gelir.
*******************************************
5) "HEAD" kelimesi neyi temsil etmektedir? -> HEAD i mevcut branch olarak düşünebiliriz. Örneğin git checkout yaptığımızda
HEAD yeni branch i işaret eder.
*******************************************
6) "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir? -> Git in oluşturulan dosyalardan haberdar olduğu bölge diyebiliriz. Eğer
yeni bir dosya oluşturuyorsak projede bunu staging area almadığımız takdirde Git bu dosyayı ve üzerinde yapılan değişiklikleri görmeyecektir.
*******************************************
7) "Untracked file" ne demektir? -> Dosya üzerinden yapılan değişikliklerden Git in haberi yok demektir. Git takip etmemiş oluyor o dosyayı.
*******************************************
8) ".git" klasörünü silersek ne olur? -> Git ile kaydedilen bilgiler kaybolur ve de dizin Git repo görevini üstlenmeyecektir.
*******************************************
9) Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız? -> sh dosyası oluşturarak
git init komutunu her çağırdığımızda bu işlemi sağlayabiliriz.
*******************************************
10) Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar? -> Branch işlemi ile aslında projemizi dallara ayırıyoruz. Örneğin: proje üzerinde
sonradan aklımıza gelen bir geliştirme yapacağız. Fakat bu geliştirmeyi ana proje yapısına direkt eklemeden ayrı olarak geliştirmek istiyoruz. Bunu isteme sebebimiz
ise geliştirme esnasında hata alabilme ya da bir sorun olma ihtimaline karşın ana projemizi etkilenmeyecek konumda tutmak. Bu sebeple branch ler açıp geliştirmeler
yapıyoruz. Aynı zamanda proje üzerinde farklı branch ler açarak bir çok kişi aynı anda geliştirme yapabilme imkanına sahip oluyor ana projeyi etkilemeden.
*******************************************
11) Sıfırdan bir "branch" nasıl oluşturabiliriz? -> git branch "branch ismi " formatında yazarak yeni bir branch oluşturabiliriz.
*******************************************
12) Var olan bir "branch"e nasıl geçebiliriz? -> git checkout "branch ismi" formatonda yazarak geçiş yapabiliriz.
*******************************************
13) "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz? -> git clone --single-branch --branch branch_ismi <repo_url>
formatında yazarak bu işlemi sağlayabiliriz.
*******************************************
14) "Merge conflict" ne demektir? -> Örneğin aynı projede çalışan iki kişinin yaptığı değişikliklerin birleştirilmesi sırasında ortaya çıkabilir. Projede aynı bölümde 
farklı değişikliklerin çakışması conflict sebep olur. Bizim burada seçim yapmamız gerekir hangi değişikliklerin kalacağı ile ilgili.
*******************************************
15) "git log" komutu ile hangi bilgileri görebiliriz? -> Geçmişte attığımız commit lere ulaşabiliriz ya da branch işlemleri vs de gerçekleştirdiysek bunları da görmemiz mümkün.
*******************************************
16) "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz? -> iki dosya veya commit arasındaki değişiklikleri görebiliriz.
*******************************************
17) Git reset ile neyi geri alıyoruz? -> Yapılacak tanımlamalara göre: dosya ve commit geri alabiliriz. Aynı zamanda staging area alanındaki değişiklikleri geri almak için de kullanabiliriz.
*******************************************
18) "git commit" ile "git push" arasındaki fark nedir? -> git commit : değişiklikleri local e kaydederken, git push ise bu değişiklikleri remote kaynağa gönderir.
*******************************************
19) Atomic commit ne demektir? -> Commit işlemi gerçekleştirirken olabildiğince her bir değişikliği adım adım commit etmek,
commit mesajının sade ve yapılan işlemi net açıklar şekilde olmasın gerektiğini söyler Atomic Commit.
*******************************************
20) Repository ne demektir? -> Bir projenin tüm dosya ve belgelerinin saklandığı yerdir. Ve de üzerinde geliştirmeler yapılabilir.
*******************************************
21) "git tag" nedir? "git branch"’ten farkı nedir? -> git tag : belirli bir commit'i işaretlemek ve sürüm numarası veya 
yayın adı gibi bir etiket atamak için kullanılırken, git branch: farklı geliştirmeler yapmak için dallar oluşturmamızı sağlar. Böylece
aynı anda bir çok geliştirme yapılabilir.
*******************************************
22) Git'i görsel olarak kullanabilmek için hangi üçüncü taraf araçları ve uygulamaları kullanabiliriz? -> GitHub Desktop, SourceTree
*******************************************
23) "GitHub" ile "git" arasındaki fark nedir? GitHub benzeri diğer siteler nelerdir? GitHub veya diğer sitelerdeki kullanıcı adlarını yazar mısınız?->
Git, bir versiyon kontrol sistemidir. Github ise git projelerini barındırabileceğimiz bir platformdur. Sourcetree,Git Fork, GitKraken kullanabiliriz.
*******************************************
