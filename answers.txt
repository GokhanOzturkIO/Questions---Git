1-Git Nedir?
Git, yazılım geliştirme süreçlerinde kullanılan, hız odaklı, dağıtık çalışan bir sürüm kontrol ve kaynak kod yönetim sistemidir.
----------------------
2-"git pull" ile "git fetch" komutlarının farkı nedir?
git fetch, uzak depodan yeni bilgileri çeker, ancak yerel çalışma dizinini değiştirmez veya güncellemez.
git pull, benzer şekilde uzak depodan yeni bilgileri çeker, ancak aynı zamanda bu bilgileri yerel çalışma dizinine de uygular.
----------------------
3-Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?
Takım arkadaşımızın kodlarını gönderdiği branchte olduğumuzdan emin olmalıyız.
Takım arkadaşımız add, commit ve push işlemlerinin tamamını gerçekleştirilmemiş olabilir.
----------------------
4-"git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
"origin" adı, bir projenin uzak depolarını takip etmek için sıkça kullanılan varsayılan bir isimdir. Genellikle, projeyi klonlarken otomatik olarak eklenen orijinal uzak depoyu temsil eder. Ancak, aynı projede birden fazla uzak depo eklenmişse, bu uzak depolar farklı isimlerle etiketlenebilir.
----------------------
5-"HEAD" kelimesi neyi temsil etmektedir?
HEAD, genellikle şu an üzerinde çalıştığınız branch'i temsil eder. Yani, hangi branch üzerinde çalışıyorsanız, HEAD o branch'i gösterir.
HEAD, aynı zamanda mevcut branch'in en son commit'ini temsil eder. Yani, hangi commit üzerinde çalıştığınızı gösterir.
Eğer bir commit üzerinde değilseniz ve bir branch üzerinde çalışıyorsanız, HEAD en son commit'i gösterir.
----------------------
6-"Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
Bir sonraki commit'e eklenecek değişikliklerin hazırlandığı bölgedir.
----------------------
7-"Untracked file" ne demektir?
Git tarafından takip edilmeyen, yani versiyon kontrolüne dahil edilmemiş dosyaları ifade eder. Bu nedenle Git'in değişiklikleri takip etmesi veya bu dosyaları commit etmesi söz konusu değildir.
Bir dosyanın "untracked" durumda olduğunu görmek için git status komutunu kullanabilirsiniz. Bu komutun çıktısında "Untracked files" bölümünde izlenmeyen dosyalar listelenir. Eğer bu dosyaların takip edilmesini istiyorsanız, git add komutu ile bu dosyaları Staging Area'ya ekleyebilir ve bir sonraki commit'e dahil edebilirsiniz.
----------------------
8-".git" klasörünü silersek ne olur?
Git ile ilgili tüm bilgileri ve geçmişi kaybedersiniz. Bu, depo geçmişi, branch bilgileri, commitler, tag'lar ve diğer Git ile ilgili verileri içerir.
----------------------
9-Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
mkdir -p ~/.git-templates
cd ~/.git-templates
touch README.md
git config --global init.templateDir ~/.git-templates
komutları ile her git init komutu ile README.md dosyası otomatik olarak oluşturulur.
----------------------
10-Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
Projenin farklı versiyonlarını aynı anda yönetmeyi sağlayan ve bağımsız bir geliştirme hattını temsil eden bir kavramdır. Bir "branch" oluşturduğunuzda, projenizin mevcut durumunu temsil eden bir kopya oluşturulur ve bu kopya üzerinde bağımsız olarak çalışabilirsiniz.
-Farklı geliştiriciler kendi kopyalarında çalışabilir ve sonra bu değişiklikleri ana projeye birleştirebilir.
-Ana branch'ten türetilen branch'lerde hata düzeltmeleri ve bakım yapma olanağı sağlar.
-Yeni özellikleri veya değişiklikleri test etmek için izole bir ortam sağlar.
----------------------
11-Sıfırdan bir "branch" nasıl oluşturabiliriz?
git branch branch-adi
----------------------
12-Var olan bir "branch"e nasıl geçebiliriz?
git checkout branch-adi
----------------------
13-"git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?
git clone -b branch-adi repo-url
----------------------
14-"Merge conflict" ne demektir?
Branchler birleştirilirken git'in otomatik olarak çözümleyemediği çakışmaların olduğu durumu ifade eder.
Bu durumlar genellikle şu durumlarda ortaya çıkar:
-İki farklı branch aynı dosyanın aynı satırında değişiklik yapmışsa.
-Bir branch bir dosyayı tamamen silerken, diğer branch aynı dosyayı düzenlemeye çalışıyorsa.
----------------------
15-"git log" komutu ile hangi bilgileri görebiliriz?
commit SHA: Her commitin SHA değeri görülebilir.
Author: Kimin commit ettiği bilgisini içerir.
Date: Commit'in yapıldığı tarih ve saat bilgisi yer alır.
Commit Mesajı: Kullanıcının commit'e eklediği açıklama gösterilir.
----------------------
16-"git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?
-Working Directory ile Staging Area (Index) Arasındaki Değişiklikler
-Staging Area (Index) ile Son Commit Arasındaki Değişiklikler
-İki Farklı Commit veya Branch Arasındaki Değişiklikler
----------------------
17-Git reset ile neyi geri alıyoruz?
Soft Reset:
Sadece çalışma dizisi ve staging area geri alınır.
Dosyaların içeriği değişmez, değişiklikler korunur.
git reset --soft commit_sha

Mixed Reset (Varsayılan):
Çalışma dizisi geri alınır, dosyaların içeriği değişmez.
Değişiklikler staging area'dan kaldırılır.
git reset commit_sha

Hard Reset:
Çalışma dizisi ve staging area tamamen geri alınır.
Dosyaların içeriği belirtilen commit'e göre güncellenir.
git reset --hard commit_sha
----------------------
18-"git commit" ile "git push" arasındaki fark nedir?
git commit yapılan değişiklikleri yerel depoya kaydetmek için kullanılır.
git push yerel depodaki commit'leri uzak depoya göndermek için kullanılır.
----------------------
19-Atomic commit ne demektir?
Atomic commit, bir değişiklik setini tamamlayan ve tek bir amaç için odaklanan bir commit türüdür. Bu commit'ler, bağımsız olarak uygulanabilir, geri alması kolay ve anlamlı commit mesajları içerir, böylece projenin geçmişi daha düzenli ve anlaşılır hale gelir.
----------------------
20-Repository ne demektir?
Bir projenin veya yazılımın kaynak kodlarını, dosyalarını, tarihini ve sürüm geçmişini içeren bir depolama alanını ifade eder.
----------------------
21-"git tag" nedir? "git branch"’ten farkı nedir?
Tag, genellikle sürüm numaralarını, yayınları veya projelerin belirli durumlarını işaretlemek için kullanılır.
Branch, projenin farklı geliştirme hattını temsil eder ve genellikle farklı özelliklerin veya geliştirmelerin üzerinde çalışmak için kullanılır.
----------------------
22-Git'i görsel olarak kullanabilmek için hangi üçüncü taraf araçları ve uygulamaları kullanabiliriz?
-GitHub Desktop
-GitKraken
-Sourcetree
-GitExtensions
-IDE(vscode,intellij,android studio)
----------------------
23-"GitHub" ile "git" arasındaki fark nedir? GitHub benzeri diğer siteler nelerdir? GitHub veya diğer sitelerdeki kullanıcı adlarını yazar mısınız?
Git, yerelde versiyon kontrolü sağlayan bir sistemken, GitHub, bulut tabanlı Git hizmetidir ve uzak depolama, işbirliği ve takım çalışması imkanı sunar.
GitHub benzeri siteler;GitLab,Bitbucket,SourceForge.
Github:augurcan
----------------------
24-main ya da master branch'inin diğer branchlerden farkı nedir?
Master branch, genellikle projenin ana ve stabil geliştirme hattını temsil ederken, diğer branch'ler genellikle özel geliştirme hatlarıdır ve yeni özelliklerin, hataların düzeltilmesinin veya denemelerin yapıldığı alanlardır.
----------------------
25-".gitignore" dosyası nedir ve ne amaçla kullanılır?
Bir Git deposundaki belirli dosyaların veya klasörlerin izlenmesini veya commit geçmişine eklenmesini önlemek için kullanılan bir dosyadır.
----------------------
