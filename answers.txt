1. Git yazılım geliştirme sureclerinde kullanılan versiyon kontrol aracıdır. Projede farklı bilgisayarlardan birden fazla kisinin calısmasına ve proje uzerınde yapılan degısıklıklerının es zamanlı kaydedilmesine olanak tanır.
2. Git pull remote repositorydeki degısıklıklerı alır ve local repository ile merge eder. Bu overwrite merge conflict e yol acabilir. Git fetch ise sadece degisiklikleri alır ve local repositoryde degisiklik yapmaz. Bu sayede değişiklikleri gözden geçirmek için zaman verir.
3. Henüz remote repository ye pushlanmamıs olabilir veya fetch etmek ıcın gerekli izinlere sahip degilizdir. İnternet baglantısıyla ilgili veya remote repository adres ismiyle ilgili bir sıkıntı olmus olabılır.
4. Remote repository url i için kullanılan standart default bir kısaltmadır. İsmi isteğe bağlı değiştirilebilir.
5. Kullanıcının mevcut branchte hangi commit üzerinde çalıştığını gösterir. Bu dizindeki dosyaların hangi sürümde olduğunu belirler. Yeni commit oluşturulduğunda HEAD otomatik olarak bu konumu işaret eder.
6. Staging area commit edilmeye hazır olan değişiklikleri içinde barındıran ara bi alandır. Working directorydeki değişiklikler staging area ya eklenerek sonraki commit e dahil edilebilir. Commit etmeden önce genel bir kontrol için kullanılabilir.
7. Git tarafından kontrol edilemeyen dosyalardır. Takip edilmesi için git add ile staging areaya eklenip daha sonra git commit komutunu kullanmak gerekir.
8. Git ile ilgili kaydedilmiş tüm bilgiler silinir.
9. Template dosyası içerisinde "ReadMe.md" dosyası oluşturduğumuzda git init her çağrıldığı zaman bu dosya otomatik olarak oluşturulmuş olacaktır. Templateler git repository leri için git in başlangıç ve ayar dosyalarıdır.
10. Branch kavram olarak ağaç gövdesinden ayrılan dalları simgeler. Kod yapısında birden fazla yazılımcının özgürce çalışabilmesini sağlar. Projenin ana branch i main olarak isimlendirilir. Eğer main üzerinde değişiklik yapılacaksa mainin kopyası olarak yeni bir branch açılır ve main branch i etkilemeden değişiklikler ve testler yapılır. Daha sonra tekrar main branch e commit edilir. Her ekip üyesi kendi branch i zerinde çalışabilir. Bu sayede çoklu çalışma ortamında oluşabilecek karmaşa önlenmiş olur.
11. Branch oluşturmak için "git branch random_branch_name" komutu kullanılır. Yeni bir branch açıldığında HEAD değişmez. Bu yüzden açılan branch e gitmek için "git checkout random_branch_name" kullanılır. "git checkout -b random_branch_name" kısayolu ile de yeni bir branch yaratıp ona gitmiş oluruz.