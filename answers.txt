1- Git bir versiyon takip sistemi ve kaynak kod yönetim aracıdır.
Projelerin sürüm geçmişini takip etmek, farklı geliştiriciler arasındaki işbirliğini kolaylaştırmak
ve geliştirmek için kullanılır.

2- git fetch komutu uzak sunucudaki değişikleri bildirir ama bu değişikleri yerel dosyalarla birleştimez.
   git pull komutu uzak sunucudaki değişikleri cekip yerel dalınızdaki dosyalar ile birleştirir.
   
3- Arkadaş yaptığı değişikleri sadece commitlemiş olup push yapmamış olabilir.
   Repo'ya push izni olmayabilir.
   Sizin yerel dosyanızda yaptıklarınızla, arkadaşınızın yaptığı değişikler çakışıyo olabilir.
   
4- Bir projede birçok repo kullanılabilir. "origin" projenin ana reposunu temsil eder.

5- "HEAD" komutlar arasında referans olarak kullanılır. Genellikle çalışma alanınızldaki en son commit'i veya branch'i işaret eder.

6- Staging area veya index değişiklerin geçici olarak saklandığı ve commit işleminden önce kullanırız.

7- Untracked file Git tarafından versiyon kontrolüne dahil olmayan dosyalardır.
 Eğer bir dosyanın versiyon kontrolü içerisinde bulunmasını istemiyorsanız gitignore dosyası oluşturup içerisinde belirtebiliz.

8- Git .git klasöründe dosyaların tüm versiyon kontrol bilgilerini ve geçmişini sakladığı bir dizindir.
   Eğer kaza ile bu klasörü silersek bütün versiyon bilgilerini kaybetmiş oluruz.
   
9- Git her yeni repo oluşturduğumuzda şablon bir klasör oluşturmamıza olanak sağlar. 

mkdir -p ~/.git_template komutuyla şablon dosyanızın tutulacağı bir  klasör oluşturabiliriz.
daha sonra ~/.git_template/README.md. komutuyla klasörün içinde her git init yazdığınızda içinde olmasını istedğiniz dosyayı oluşturun.
git config --global init.templatedir '~/.git_template'  komutu ile bu klasörün template olarak kullanılmasını sağlayın.

10- projemizin farklı versiyonlarını geliştirmemizi ve proje içerisindeki kişilerin ayrı ayrı kısımları yapmasına olanak sağlar.

11- git branch <branch adı>

12- git checkout <branch adı>

13- git clone -b <branch_name> <repository_url>

14- Git'in birleştime sırasında ve otomatik olarak halledemediği durumları ifade eder.
    Farklı geliştiricilerin farlı dallarına yazdıkları değikliklerin aynı dosyada aynı satırda birleştiği durumda ortaya çıkar.
	
15- git log komutu ile yapılan bütün commitleri, commitlerin id'lerini, zamanın ve kimin yaptığını görebiliriz.
16- git diff <commit1> <commit2> ile iki farklı durumun arasındaki farkı görebiliriz.
17- Bu komut, çalışma dizinindeki dosyaları, Staging Alanı'ndaki dosyaları veya HEAD işaretçisini (son commit'i) belirli bir duruma geri döndürmenizi sağlar.
18- git commit yapılan değişikleri yerel bir Git deposuna kaydetmek için kullanılır.
    git push yapılan değişikleri uzak sunucudaki Git deposuna aktarmak için kullanılır.

19- her bir commitin sadece yapılan bir değişikliği temsil etmesidir.

20- it tarafından yönetilen bir proje veya kod deposudur. Bir Git deposu, bir veya daha fazla dosya ve bu dosyalarda yapılan değişikliklerin tarihini ve sürümünü takip eden bir dizi commit içerir.

Git deposu, bir projenin tam tarihçesini, farklı sürümlerini ve değişiklik