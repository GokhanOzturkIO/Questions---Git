1-Git Nedir?
Git, yazılım geliştirme süreçlerinde kullanılan, hız odaklı, dağıtık çalışan bir sürüm kontrol ve kaynak kod yönetim sistemidir.
----------------------
2-"git pull" ile "git fetch" komutlarının farkı nedir?
git fetch, uzak depodan yeni bilgileri çeker, ancak yerel çalışma dizinini değiştirmez veya güncellemez.
git pull, benzer şekilde uzak depodan yeni bilgileri çeker, ancak aynı zamanda bu bilgileri yerel çalışma dizinine de uygular.
----------------------
3-Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?
Takım arkadaşımızın kodlarını gönderdiği branchte olduğumuzdan emin olmalıyız.
Takım arkadaşımız add, commit ve push işlemlerinin tamamını gerçekleştirilmemiş olabilir.
----------------------
4-"git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
"origin" adı, bir projenin uzak depolarını takip etmek için sıkça kullanılan varsayılan bir isimdir. Genellikle, projeyi klonlarken otomatik olarak eklenen orijinal uzak depoyu temsil eder. Ancak, aynı projede birden fazla uzak depo eklenmişse, bu uzak depolar farklı isimlerle etiketlenebilir.
----------------------
5-"HEAD" kelimesi neyi temsil etmektedir?
HEAD, genellikle şu an üzerinde çalıştığınız branch'i temsil eder. Yani, hangi branch üzerinde çalışıyorsanız, HEAD o branch'i gösterir.
HEAD, aynı zamanda mevcut branch'in en son commit'ini temsil eder. Yani, hangi commit üzerinde çalıştığınızı gösterir.
Eğer bir commit üzerinde değilseniz ve bir branch üzerinde çalışıyorsanız, HEAD en son commit'i gösterir.
----------------------
6-"Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
Bir sonraki commit'e eklenecek değişikliklerin hazırlandığı bölgedir.
----------------------
7-"Untracked file" ne demektir?
Git tarafından takip edilmeyen, yani versiyon kontrolüne dahil edilmemiş dosyaları ifade eder. Bu nedenle Git'in değişiklikleri takip etmesi veya bu dosyaları commit etmesi söz konusu değildir.
Bir dosyanın "untracked" durumda olduğunu görmek için git status komutunu kullanabilirsiniz. Bu komutun çıktısında "Untracked files" bölümünde izlenmeyen dosyalar listelenir. Eğer bu dosyaların takip edilmesini istiyorsanız, git add komutu ile bu dosyaları Staging Area'ya ekleyebilir ve bir sonraki commit'e dahil edebilirsiniz.
----------------------
8-".git" klasörünü silersek ne olur?
Git ile ilgili tüm bilgileri ve geçmişi kaybedersiniz. Bu, depo geçmişi, branch bilgileri, commitler, tag'lar ve diğer Git ile ilgili verileri içerir.
----------------------
9-Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
mkdir -p ~/.git-templates
cd ~/.git-templates
touch README.md
git config --global init.templateDir ~/.git-templates
komutları ile her git init komutu ile README.md dosyası otomatik olarak oluşturulur.
----------------------
10-Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
Projenin farklı versiyonlarını aynı anda yönetmeyi sağlayan ve bağımsız bir geliştirme hattını temsil eden bir kavramdır. Bir "branch" oluşturduğunuzda, projenizin mevcut durumunu temsil eden bir kopya oluşturulur ve bu kopya üzerinde bağımsız olarak çalışabilirsiniz.
-Farklı geliştiriciler kendi kopyalarında çalışabilir ve sonra bu değişiklikleri ana projeye birleştirebilir.
-Ana branch'ten türetilen branch'lerde hata düzeltmeleri ve bakım yapma olanağı sağlar.
-Yeni özellikleri veya değişiklikleri test etmek için izole bir ortam sağlar.
----------------------
11-Sıfırdan bir "branch" nasıl oluşturabiliriz?
git branch branch-adi
----------------------
12-Var olan bir "branch"e nasıl geçebiliriz?
git checkout branch-adi
----------------------
13-"git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?
git clone -b branch-adi repo-url
----------------------
