1. Git Nedir?

Git , dağınık versiyon kontrol sistemlerinden biridir.Proje geliştirme süreçlerinde dosyaların değişikliklerini takip etmeye, bu değişikliklerin izlenmesine, işbirliği yapmaya ve değişiklikleri yönetmeyi sağlayan bir araçtır.

———————————————————————————————————————————————

2."git pull" ile "git fetch" komutlarının farkı nedir?

git fetch : Uzak sunucudaki gönderilen değişikliklerden localdeki bilgisayarın haberdar olmasını sağlar.
git full : Uzak sunucudaki değişiklikleri indirir ve bu değişiklikleri yerel çalışma kopyasına entegre eder.
Uzak sunucudaki değişiklikleri localimize almak için ilk önce “git fetch” daha sonra “git pull” komutlarını uygularız.

———————————————————————————————————————————————

3.Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?

1) Biz “fetih” işlemi yapmadan direkt “pull” işlemi yapmaya çalışmış olabiliriz.
2) Takım arkadaşımız commitleri staging area’ya almış ama ‘commit’ ve ‘push’ işlemlerini veya sadece ‘push’ işlemini uygulamamış olabilir.

———————————————————————————————————————————————

4."git fetch origin" komutundaki "origin" neye karşılık gelmektedir?

Genellikle Git deposunun bir uzak depo olarak adlandırıldığı yerdir.Projenin yerel kopyasının aldığı veya gönderdiği uzak depoyu temsil eder.

———————————————————————————————————————————————

5."HEAD" kelimesi neyi temsil etmektedir?

Git’te şu an çalışmakta olduğumuz konumu gösteren terimdir.En son yapmış olduğumuz commit’e işaret eder.

———————————————————————————————————————————————

6."Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?

Kontrol ve tutma bölgesi diyebiliriz.Commit’leri push’lamadan önce gönderdiğimiz ara alandır.Burada yapılan değişiklikler geri alınabilir,kontrol edilebili.Bu bölge sayesinde hataları daha erken tespit edebiliriz.

———————————————————————————————————————————————

7."Untracked file" ne demektir?

Untracked file git tarafından takip edilmeyen dosyalara verilen addır. Bu dosyaları git add ile staging area'ya alıp tracked file haline getirebiliriz.

———————————————————————————————————————————————

8.".git" klasörünü silersek ne olur?

“.git” dosyası ‘git init’ komutu ile oluşturulur.Git,bu klasör içerisinde dosya kontrolleri yapar.Bu dosya silindiğinde Git ile bir bağlantı kalmaz. Yani yapmış olduğumuz tüm işlemleri sileriz.

———————————————————————————————————————————————

9.Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?

Bir template klasörü oluşturarak içerisinde ReadMe.md dosyası oluşturup “git inin - -template <directorys>” komutunu çalıştırıp Git’i başlatırız.

———————————————————————————————————————————————

10.Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?

Bir Git projesinde ana kod tabanından ayrılan bir kopyasıdır.Bu ayrı kopyalar üzerinde değişiklikler yapabiliriz.Daha sonra bu değişiklikler ana kodda birleştirilebilir.Bu sayede birden fazla kişi aynı anda çalışma yapabilir.Kodun belli bir sürümünde istikrarı korumayı sağlar.

———————————————————————————————————————————————

11.Sıfırdan bir "branch" nasıl oluşturabiliriz?

“ git branch <branch adı> “ komutu ile yeni bir branch oluşturabiliriz.

———————————————————————————————————————————————

12.Var olan bir "branch"e nasıl geçebiliriz?

“ git checkout <branch adı> “ komutu ile var olan bir branch’e geçiş yapabiliriz.
Yeni bir branch oluşturup direkt olarak o branch’e geçmek için “git checkout -b <branch adı>” komutunu kullanırız.

———————————————————————————————————————————————

13."git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?

“git clone  - - branch <branch adı> <url>” komutunu kullanarak belirli bir spesifik branch’i çekebiliriz.

———————————————————————————————————————————————

14."Merge conflict" ne demektir?

İki veya daha fazla kişinin çalıştığı bir projede , aynı dosyanın aynı satırını, iki veya daha fazla kişi değiştirip bu değişiklikleri commit’leyip, kendi branch’lerine push’ladıktan sonra değişiklikleri master branch’ine merge etmesiyle çalışırken yaşanan çakışmaya denir.Çakışma olduğunda takım arkadaşları ile konuşup hangi kodun geçerli olduğuna birlikte karar verilmelidir.

———————————————————————————————————————————————

15."git log" komutu ile hangi bilgileri görebiliriz?

"git log" komutu ile depodaki yapılan tüm commitler listelenir.Her bir commit’in kim tarafından yapıldığını zaman yapıldığı,hangi değişiklikleri içerdiği gibi bilgileri gösterir.En yeni commit’ten başlayarak en eskiye doğru tüm commit’leri listeler.Çıktıda her commit için özet bilgiler bulunur.

———————————————————————————————————————————————

16."git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?

“git diff” komutu ile takip edilen dosyalardaki değişiklikleri görüntüleyebiliriz.Bu komut, değiştirilmiş veya eklenmiş dosyalar arasundaki farkları, çalışma diziniyle en son commit edilmiş olan sürüm arasında karşılaştırı.Eklenmiş veya silinmiş dosyaları da gösterebilir.

———————————————————————————————————————————————

17.Git reset ile neyi geri alıyoruz?

“git ceset” komutu ile staging area’ya aldığımız dosyaları veya değişiklikleri staging area’dan çıkartarak “git add” yaptığımız halden önceki durumuna getirebiliriz.Dosyalar üzerinde yapılan işi geri alma işlemi değildir.

———————————————————————————————————————————————

