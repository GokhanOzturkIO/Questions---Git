question1 -> Git Nedir?
answer1 -> Git, versiyon kontrol sistemi olarak bilinen, kod değişikliklerini takip etmeyi ve birden fazla kişinin aynı projede çalışırken değişiklikleri koordine etmeyi sağlayan bir yazılımdır. Açık kaynaklıdır ve projelerdeki değişiklikleri yönetmek, eski sürümlere geri dönmek ve farklı geliştirme dallarında çalışmayı kolaylaştırır. Bu, özellikle yazılım geliştirme süreçlerinde ekip çalışması için vazgeçilmez bir araçtır.

question2 -> "git pull" ile "git fetch" komutlarının farkı nedir?
answer2 -> git pull, uzak depodan değişiklikleri çekip yerelde otomatik olarak birleştirir. git fetch, uzak değişiklikleri çeker ama birleştirmez, kullanıcıya inceleme ve manuel birleştirme imkanı sunar.

question3 -> Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?
answer3 -> Ya takım arkadaşınız kodları push etmemiştir, Ya ben yada o yanlış branchda olabilir, ya da fetch işlemi yapmayı unutmuş olabilirim.

question4 -> "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
answer4 -> "origin", genellikle yerel depodaki uzak depoya verilen varsayılan isimdir. Bu, Git'in uzak depolarla çalışırken kullandığı bir referanstır. 

question5 -> "HEAD" kelimesi neyi temsil etmektedir?
answer5 -> Git'te, şu anda çalışmakta olduğunuz son commit'i, yani mevcut dalın en son noktasını temsil eder. Bu, Git'in, projeniz üzerinde hangi noktada olduğunuzu takip etmesini sağlar. Genellikle, HEAD aktif dalın en son commit'ine bir referanstır ve değişiklikleri commit ettiğinizde, HEAD otomatik olarak en yeni commit'e güncellenir. 

question6 -> "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
answer6 -> "Staging Area" ya da "Index", Git'te değişikliklerin commit edilmeden önce bekletildiği bir ara katmandır. Bu alan, hangi dosyaların bir sonraki commit'e dahil edileceğini seçmenize olanak tanır.

question7 -> "Untracked file" ne demektir?
answer7 -> "Untracked file", Git tarafından henüz takip edilmeyen, yani herhangi bir commit'e dahil edilmemiş dosyayı ifade eder. Bu dosyalar, Git deposuna yeni eklenmiş olabilir ve git add komutu kullanılarak takip edilmesi gereken dosyalardır.

question8 -> ".git" klasörünü silersek ne olur?
answer8 -> ".git" klasörünü silmek, Git versiyon kontrol bilgilerini ve tüm geçmişi siler; projeniz artık bir Git deposu olarak takip edilmez ancak projenizin dosyaları korunur.

question9 -> Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
answer9 -> Git'in "templates" özelliğini kullanarak her git init işlemiyle README.md dosyası oluşturmak için, özel bir Git şablon dizini oluşturun ve bu dizine post-init hook'u ekleyin. Bu hook, README.md oluşturma komutlarını içermeli ve her yeni repo başlatıldığında otomatik çalışacak şekilde ayarlanmalıdır. Bu yöntem, yeni projeler için otomatik bir başlangıç dosyası sağlar.

question10 -> Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
answer10 -> Git'te "branch" yapısı, projenin farklı sürümleri veya özellikleri üzerinde aynı anda ama bağımsız şekilde çalışmayı sağlayan bir mekanizmadır. Her dal (branch), projenin bir kopyası gibi davranır ve üzerinde yapılan değişiklikler ana dal (master veya main) veya diğer dallardan bağımsızdır. Bu yapı, birden fazla geliştiricinin aynı projede farklı özellikler üzerinde çalışmasına, hataları düzeltmesine veya yeni özellikler eklemesine olanak tanırken, ana projenin bütünlüğünü ve istikrarını korur. Dallar arasında değişiklikleri birleştirme (merge) işlemi ile, işlenen tüm değişiklikler ana projeye entegre edilebilir. Bu, ekip çalışmasını ve projelerin yönetimini kolaylaştırır, aynı zamanda riskleri azaltır.

question11 -> Sıfırdan bir "branch" nasıl oluşturabiliriz?
answer11 -> git branch yeni_branch_adı komutu ile branch açabilir ve git checkout yeni_branch_adı ile oluşturdugumuz branch'a geçebiliriz.

question12 -> Var olan bir "branch"e nasıl geçebiliriz?
answer12 -> git checkout branch_adı ile branch değiştirebiliriz. Git 2.23.0 veya daha yeni sürümlerde, git switch komutu da kullanılabilir ve bu, branch değiştirme işlemi için daha modern ve önerilen bir yoldur git switch branch_adı ilede branch değiştirilebilir.
