1. Git Nedir?

- Git, bir versiyon kontrol sistemi (VCS) olarak bilinen ücretsiz ve açık kaynaklı bir yazılımdır. Geliştiricilerin kaynak kodlarını takip etmelerine, değişiklikleri yönetmelerine ve işbirliği yapmalarına olanak tanır. 

2. "git pull" ile "git fetch" komutlarının farkı nedir?

- Git fetch, uzak depodan güncellemeleri çeker, ancak bu güncellemeleri doğrudan yerel çalışma kopyasına birleştirmez. Uzak depodaki değişiklikleri yereldeki takip ettiğiniz uzak dallarda görmek için kullanılır.
- Git pull, git fetch ile aynı işlevi görür (uzak depodan güncellemeleri alır), ancak ayrıca bu güncellemeleri yerel çalışma kopyasına da birleştirir.

3. Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?

- Uzak sunucudaki dallar güncellenmemiş olabilir. Bu, git fetch origin gibi bir komutla uzak depodan güncel bilgileri alabilirsiniz.
- Local çalışma alanında commit atılmamış değişiklikler olabilir. 
- Takım arkadaşımız ile conflict yaşamış olabiliriz. Bunları çözmeliyiz.
- Kodları çekme yetkimiz olmayabilir.

4. "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?

- "git fetch origin" komutundaki "origin", genellikle bir Git depo adresine verilen bir isimdir ve bu depoyu temsil eder. Bu isimlendirme genellikle varsayılan olarak gelen bir isimdir, ancak Git kullanıcıları genellikle bu ismi değiştirebilirler.

5. HEAD" kelimesi neyi temsil etmektedir?

- "HEAD" terimi, Git'te şu anki çalışma kopyasının (working directory) ve üzerinde çalıştığınız daldaki en son commit'in referansını temsil eder. Yani, mevcut işlemekte olduğunuz noktayı işaret eden bir gösterge olarak düşünülebilir.

6. "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?

-"Staging Area" veya "Index", Git'in çalışma prensiplerinden biri olan üç aşamalı iş akışının (three-stage workflow) bir parçasıdır. Staging area, çalışma kopyasındaki değişiklikleri gelecekteki bir commit için hazırlanan geçici bir bölge veya ara aşama olarak düşünülebilir. Buraya eklenen dosyalar, bir sonraki commit'e dahil edilmeye aday hale gelir.

7. "Untracked file" ne demektir?

- "Untracked file" (izlenmeyen dosya), bir Git deposunda henüz Git tarafından takip edilmeyen veya izlenmeyen bir dosyayı ifade eder. Yani, bu dosya, Git'in gözetimi altında değil ve Git, dosyanın değişikliklerini takip etmez. 
Bir dosyanın "untracked" duruma gelmesi genellikle şu durumlarda olur:
-Yeni Dosya Eklediğinizde
-gitignore Dosyası Kullanıldığında
-Silinen Dosya İçin

8.".git" klasörünü silersek ne olur?

-.git klasörü, bir Git deposunun tüm versiyon kontrolü ve konfigürasyon bilgilerini içeren önemli bir kısımdır. Bu klasörü silmek, Git deposunun işlevselliğini tamamen ortadan kaldırır ve projenizin Git ile yönetilemez hale gelmesine neden olur.

9. Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?

- Bunun için git init --template <dosya yolu> komutunu kullanmalıyız. Bu sayede istediğimiz templatelere göre git reposu oluşturulur.

10. Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?

- Git'te "branch" (dal), projenin farklı özelliklerini veya geliştirmelerini izole etmek ve yönetmek için kullanılan bir kavramdır. Git, her bir dalı, projenin bir belirli noktasındaki commit zinciri olarak düşünür. Yani, her dal, projenin farklı bir durumunu temsil eder. Bir projede birden çok dal kullanmak, farklı geliştirmeleri aynı anda izlememizi, test etmemizi ve uygulamamızı sağlar. 

11. Sıfırdan bir "branch" nasıl oluşturabiliriz?

- git branch (branch ismi) şeklinde oluşturabiliriz.

12. Var olan bir "branch"e nasıl geçebiliriz?

- git checkout (branch ismi) veya git switch (branch ismi) komutunu kullanabiliriz.

13. "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?

-git clone -b <branch name> <remote path> şeklinde bir branch'i klonlayabiliriz.

14. "Merge conflict" ne demektir?

- "Merge conflict" (birleştirme çakışması), Git'te iki farklı dalı birleştirmeye çalıştığınızda, Git'in otomatik olarak birleştiremediği ve kullanıcının müdahale etmesi gereken bir durumu ifade eder. Bu durum, Git'in farklı dallardaki aynı dosyanın aynı satırlarında çakışan değişiklikleri çözme konusunda kararsız kaldığı bir durumdur.

15. "git log" komutu ile hangi bilgileri görebiliriz?

-git log komutu, Git deposundaki commit geçmişini gösteren bir komuttur. Ayrıca commit ile birlikte:
Commit Hash (SHA-1)
Commit sahibini
Tarih ve Saat Bilgisi
Commit Mesajı

16. "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?

-Çalışma Kopyası ile En Son Commit Arasındaki Değişiklikleri görebiliriz.
git diff
-Belirli Bir Commit ile Çalışma Kopyası Arasındaki Değişiklikleri  görebiliriz. 
git diff COMMIT_HASH
-İki Belirli Commit Arasındaki Değişiklikler:
git diff COMMIT_HASH1 COMMIT_HASH2
-İki Farklı Branch Arasındaki Değişiklikler:
git diff BRANCH1 BRANCH2

17. Git reset ile neyi geri alıyoruz?

- git reset ile staging area da olan değişiklikleri geri alıyoruz.

18. "git commit" ile "git push" arasındaki fark nedir?

-git commit komutu, yapılan değişiklikleri lokal depoya (yani bilgisayarınızdaki kopyaya) kaydetmek için kullanılır.

-git push komutu, lokalde yapılan commit'leri uzak bir depoya göndermek için kullanılır. Uzak depo, genellikle bir Git sunucusudur (GitHub, GitLab, Bitbucket gibi).

-Bu iki komutun birbiriyle ilişkisi şu şekildedir: Önce git commit ile yapılan değişiklikleri lokal depoya kaydedersiniz, ardından git push ile bu değişiklikleri uzak depoya gönderirsiniz.

19. Atomic commit ne demektir?

- "Atomic commit" (atomik commit), bir commit'in, bir projedeki bir dizi değişikliği tam olarak ve bütünsel bir şekilde temsil ettiği bir commit yönetim konseptidir. Atomic commit, bir değişiklik grubunu, projenin tutarlı bir durumunu temsil eden tek bir commit içinde birleştirmeyi amaçlar.

20.Repository ne demektir?

- Repository kavramı, yazılım geliştirme süreçlerini düzenlemek, takip etmek ve paylaşmak için kullanılır. Bir yazılım projesinin repository'si, geliştiricilerin projede yaptıkları değişiklikleri, geçmiş durumları ve işbirliği içinde çalışma yeteneklerini yönetmelerini sağlar. Repository, proje dosyalarının, kaynak kodlarının ve diğer ilgili bileşenlerin bulunduğu bir merkezdir. 




