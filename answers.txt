1.Soru: Git Nedir ?

Cevap: Git,yazılım geliştirme projelerini izlemek,yönetmek ve sürüm kontrolünü sağlamak için kullanılan bir versiyon kontrol sistemidir. Diğer bir deyişle dağıtık bir versiyon kontrol sistemidir. Linus Torvalds tarafından Linux çekirdeği geliştirme sürecinde kullanılmak üzere 2005 yılında geliştirilmiştir.Şu anda dünya genelinde projeler ve geliştirmeler için çoğunlukla kullanılmaktadır.Açık kaynaklı bir yazılımdır ve GitHub,GitLab,Bitbucket gibi bir çok platformda kullanılmaktadır aynı zamanda herhangi bir işletim sistemi üzerinde de kullanılabilir.
---------------------------------------------------------------------------------------
2.Soru: "git pull" ile "git fetch" komutlarının farkı nedir?

Cevap: Git fetch komutu uzak sunucudaki değişiklikleri alır ancak sizin localinize entegre etmez, fetch sizi sadece değişiklikler hakkında bilgilendirir.
Git pull ise uzak sunucudaki değişiklikleri alıp localinize entegrede eder.
---------------------------------------------------------------------------------------
3.Soru: Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?

Cevap: -Takım arkadaşımız commitlemiş ancak pushlamayı atlamış ise,
       -Takım arkadaşımız ile kodlarımız arasında bir conflict var ise,
       -Takım arkadaşımızın değişiklik yaptığı branchte değilsek yani doğru branchte değilsek,
       -Localimiz uzak sunucudaki yeni değişiklikler hakkında bilgi sahibi değilse git fetch yapmadıysak,
       -İnternet bağlantımızda bir sıkıntı var ise internet bağlantısını kontrol etmediysek.
       Bu durumlarda git pull ile yeni geliştirmeleri localimize alamayız.
---------------------------------------------------------------------------------------
4.Soru: "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?

Cevap: "origin" kelimesi, git deposundaki varsayılan olarak adlandırılan uzak depoyu temsil eder.
       Bu isimlendirme, genellikle git deposunu oluştururken eklediğiniz uzak depo referansına atıfta bulunur.
      Yani origin, genellikle birinci uzak depoyu temsil eder ve projenin asıl kopyasının bulunduğu yerdir.
---------------------------------------------------------------------------------------
5.Soru: "HEAD" kelimesi neyi temsil etmektedir?

Cevap:"Head" kelimesi, bir Git deposundaki mevcut çalışma durumunu ifade eden bir referansı temsil eder. 
       HEAD, şu an üzerinde çalıştığınız şube (branch) veya bir commit'in doğrudan referansını gösterebilir.
       Genelde sizin en son yaptığınız commit işlemini işaret ederken,
       Bazı durumlarda bağlı olduğunuz branchi de işaret edebilir.
---------------------------------------------------------------------------------------
6.Soru: "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?

Cevap: "Staging Area" veya "Index", Git'in çalışma prensiplerinden birini temsil eden bir bölgedir.
       Bu bölge, dosyaların değişikliklerini hazırlamak ve bir sonraki commit'e eklenecek olan dosyaları belirlemek için kullanılır.

       Yaptığımız değişiklikler bizim localimizde bulunsa bile staging areaya aktarmadığımız sürece git tarafından trac edilmiyor yani izlenmiyordur.
       Gitin değişiklikleri izleyip kontrol edebilmesi için yaptığımız değişiklikleri kaydetmemiz gerekir bu da staging area ara bölgesine aktardığımızda olur.

       (git add .) = (git add --all) = (git add -a) Directory de yer alan tüm içerikleri staging areaya alır.
  
      Bu bölge şu görevleri yerine getirir;

      Değişiklikleri Seçme ve Hazırlama:
      
      Yaptığınız değişiklikleri belirli dosyalar üzerinden seçip, "Staging Area"ye ekleyebilirsiniz. 
      Bu, değişiklikleri commit etmek üzere hazırlamanızı sağlar.

     Commit İçin Dosyaları Belirleme:

     Bir sonraki commit'in hangi dosyaları içereceğini belirlemek için "Staging Area" kullanılır. 
     Yani, "Staging Area"de bulunan dosyalar, bir sonraki commit'te yer alacaktır.

    Parça Parça Commit İmkanı:

     "Staging Area" sayesinde, farklı değişiklikleri ayrı ayrı commit etme esnekliğine sahip olabilirsiniz.
     Yani, bir dosyanın bir kısmını hazırlayabilir ve sadece o kısmını commit edebilirsiniz.
---------------------------------------------------------------------------------------
Soru 7: "Untracked file" ne demektir?

Cevap: Bu dosyadaki değişiklikler henüz git tarafından kontrol edilemiyor demek.
       Eğer bu dosyada değişiklikler yaparsan yaptığın değişiklikleri gite soramazsın çünkü git kontrolü dahilinde değildir.
--------------------------------------------------------------------------------------
Soru 8: ".git" klasörünü silersek ne olur?

Cevap: ".git klasörü" bir Git deposunun temelini oluşturan ve tüm depo ile ilgili bilgileri içeren önemli bir klasördür.
      Bu klasörü silmek, o depoyu kullanılamaz hale getirir.
     Depoda bulunan izlenen ve kontrol edilen tüm bilgiler kaybolur.
     Herhangi bir yanlışlığa zemin hazırlamamak için ".git" klasörünü gömülü dosya olarak tutmak daha yararlı olacaktır.
    Bunun için ayarlar->dosya gezgini->gizli dosyalar ve sistem dosyalarını göster-> seçeneğini kapatınız.
---------------------------------------------------------------------------------------
Soru 9: Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?

Cevap: Her git init komutunda otomatik ReadMe.md dosyası oluşturmak istiyorsak global bir git şablonu oluşturabiliriz template ile.
---------------------------------------------------------------------------------------
Soru 10: Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?

Cevap: Git'te "branch" (şube), projenin bağımsız geliştirme yoludur ve belirli bir noktadaki dosya ve dizinlerin bir kopyasını içerir. 
       Proje üzerinde paralel olarak çalışmak, farklı özellikleri eklemek veya hataları düzeltmek için kullanılır. 
       Branchler, projenin farklı sürümlerini ve geliştirmelerini izlemenizi sağlar.
       Paralel olarak kopyalarda yapılan değişiklikler en son ana branchte birleştiriliyor.
       Aktif olarak aynı branch üzerinde çalışırken conflict çıkışlarını engeller.
       Bir conflict çıkarsa ana branch birleştirilirken çıkması ve o sırada halledilmesi daha yararlıdır.
       Branchler bize bağımsız çalışma ortamları,paralel geliştirme,geliştirme izolasyonu,geçmişin izlenmesi,
       risk azaltma ve sağlıklı iş birliği sağlar.
--------------------------------------------------------------------------------------
Soru 11: Sıfırdan bir "branch" nasıl oluşturabiliriz?

Cevap: Sıfırdan bir branch yapmak için ; git branch komutunu kullanabiliriz.
       örn: git branch "bla bla"
       Bu komut ile "bla bla" adında bir branch oluşturmuş oluruz.
       Ancak branch oluşturduktan sonra o branche geçiş yapmaz yeni oluşturduğunuz branche 
       yada farklı bir branche geçiş yapmak için checkout komutunu kullanıyoruz.
       Bu komut git checkout "bla bla" komutudur. Böylelikle oluşturduğumuz "bla bla" branchine 
       geçiş yapmış oluyoruz. 
      Checkout komutunun bir diğer özelliği de git branch komutu gibi yeni bir branch açabiliyor oluşu.
      Eğer checkout ile geçiş yapmak istediğimizde geçiş yapmak istediğimiz branch bulunmuyorsa git bize
      bu branchin bulunmadığına dair bir uyarı veriyor.
      Checkout ile yeni bir branch açma komutu ise: git checkout -b branch ismi şeklindedir.
      örn: git checkout -b blabla2 
----------------------------------------------------------------------------------------
Soru 12: Var olan bir "branch"e nasıl geçebiliriz?

Cevap: Var olan bir branche git checkout branch ismi komutu ile geçebiliriz.
      ör: git checkout bla bla
      Bir başka bu işlemi yapan komut ise: git switch -c komutudur.
      ör: git switch -c blabla
----------------------------------------------------------------------------------------

Soru 13: "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?

Cevap: Git clone komutunu kullanırken belirli bir spesifik branchi çekmek için --branch veya kısaltması olan -b seçeneğini kullanabiliriz. 
      Ayrıca, --single-branch seçeneği ile sadece belirtilen branchi alabilir ve tüm geçmişi çekmeyebiliriz.
      
     Belirli bir branchi çekmek için komut: git clone -b <branch_name> <repository_url>
     örneğin main isimli bir branchi çekmek için: git clone -b main <https://github.com/kullanici_adi/proje.git
---------------------------------------------------------------------------------------
Soru 14: "Merge conflict" ne demektir?

Cevap: "Merge conflict" (birleştirme çakışması), Git'te birleştirme işlemi sırasında karşılaşılan ve 
       manuel müdahale gerektiren bir durumu ifade eder.Bu durum, farklı branchlerde yapılan değişikliklerin çakıştığı 
       ve otomatik birleştirme işleminin başarısız olduğu anlamına gelir.

      Merge Conflict genellikle şu durumlarda ortaya çıkar:
      -Aynı satıra yapılan değişiklikler
      -Farklı dosyalarda aynı isimde dosyalar
      -Silinen veya taşınan dosyalar
     Birleştirme çatışması durumunda, Git çatışmanın olduğu dosyaları işaretler ve çözümleme sürecini başlatır. 
     Bu süreçte, geliştiricinin çakışmayı çözmesi ve değişiklikleri manuel olarak birleştirmesi gerekebilir.
     Çakışma çözüldükten sonra, geliştirici değişiklikleri birleştirme işlemini tamamlar ve birleştirme commit'ini yapar.
---------------------------------------------------------------------------------------
   Soru 15: "git log" komutu ile hangi bilgileri görebiliriz?

Cevap: Git log komutu, bir Git deposundaki commit geçmişini görüntülemek için kullanılır.
       Bu komut, commit geçmişini sıralı bir şekilde gösterir ve her commit ile ilgili çeşitli bilgileri içerir. 
      
     Git log komutu ile görüntüleyebileceğimiz başlıca bilgiler:

     Commit Hash (SHA-1):

     Her commit, bir benzersiz SHA-1 hash değeri ile tanımlanır. Bu hash değeri, commit'in tam olarak belirlenmesini sağlar.

     Author ve Committer Bilgileri:

     Author (yazar) bilgisi, commit'i oluşturan kişinin adı ve e-posta adresini içerir.
     Committer (taşıyan) bilgisi, commit'i depoya ekleyen kişinin adı ve e-posta adresini içerir.

     Commit Tarihi ve Saati:

     Commit'in yapıldığı tarih ve saat bilgisi görüntülenir.

     Commit Mesajı:

    Geliştirici tarafından yazılan commit mesajı, yapılan değişiklikler hakkında açıklama içerir.
    git log komutu, bu bilgileri tarih sırasına göre listeleyerek gösterir.
---------------------------------------------------------------------------------------
Soru 16: "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?

Cevap: Git diff komutu, farklı durumlar arasındaki değişiklikleri göstermek için kullanılır.
       Bu komut, özellikle çalışma dizisi (working directory) ile depo (repository) arasındaki veya iki commit arasındaki farkları görmek için kullanılır.

       Git diff komutu ile aşağıdaki durumlar arasındaki değişiklikleri görebiliriz:
       -Çalışma Dizisi ile Staging (Index) Alanı Arasındaki Değişiklikler
       -Staging (Index) Alanı ile Son Commit Arasındaki Değişiklikler
       -İki Commit Arasındaki Değişiklikler
--------------------------------------------------------------------------------------
Soru 17: Git reset ile neyi geri alıyoruz?

Cevap: Git reset komutu, bir Git deposunda yapılan değişiklikleri geri almak veya commit geçmişini düzenlemek için kullanılır. 
Bu komut, belirli bir commit'e kadar olan değişiklikleri geri alabilir veya sadece çalışma dizisinin (working directory) durumunu 
etkileyerek commit geçmişinde geri gitmeyi sağlar.

Git reset komutu ile geri alınabilecek farklı durumlar şunlardır:

-Commit Geçmişinde Geri Gitme
-Commit ve Çalışma Dizisinde Geri Alma
-Commit'i Geri Alma, Ancak Değişiklikleri Saklama
--------------------------------------------------------------------------------------
Soru 18: "git commit" ile "git push" arasındaki fark nedir?

Cevap: git commit ile yapılan değişiklikleri lokal depoya kaydederken, git push ile bu değişiklikleri uzak bir depoya gönderir ve paylaşırız. 
Yani, git commit lokaldeki değişiklikleri "yakalar", git push ise bu değişiklikleri uzak bir depoya "iter".
--------------------------------------------------------------------------------------
Soru 19: Atomic commit ne demektir?

Cevap: "Atomic commit", bir commit işlemi sırasında bir dizi değişikliği içeren commit'in, tüm değişikliklerin bir arada
uygulandığı ve bağımsız olarak işlevsel olduğu bir commit türünü ifade eder. Atomik commitler, birlikte çalışan birden fazla geliştiricinin
veya ekip üyesinin çalışmalarını yönetmede ve projenin geçmişini sürdürülebilir bir şekilde organize etmede önemli bir prensiptir.

Atomik commitlerin bazı temel özellikleri şunlardır:

Bağımsızlık:

Atomik commitler, birbirinden bağımsız ve tek başına anlamlı değişiklikleri içerir. Bu, her commit'in tek bir sorumluluğu olmasını 
sağlar ve projenin geçmişini daha iyi anlaşılabilir ve sürdürülebilir kılar.

Geri Alabilirlik (Revertibility):

Atomik commitler, geri alınabilir (revertible) olmalıdır. Yani, bir commit geri alındığında, sadece o commit'e ait değişiklikler 
geri alınmalı ve diğer commit'ler etkilenmemelidir.

Kolay İnceleme ve Anlama:

Atomik commitler, kod incelemeleri ve geçmişi anlama açısından daha elverişlidir. Her commit'in bir amacı olduğu için, geçmişte 
yapılan değişiklikleri izlemek ve anlamak daha kolaydır.

Kodun Durumunu Bozmama (Do not break the build):

Atomik commitler, projenin sürekli entegrasyon (CI) süreçlerinde ve otomatik testlerde daha etkili bir şekilde kullanılabilir.
Her commit, kodun durumunu bozmamalı ve testleri başarılı bir şekilde geçmelidir.
Örneğin, bir özellik eklemek, bir hata düzeltmek veya bir iyileştirme yapmak amacıyla yapılan değişiklikleri içeren bir commit, 
tek bir amacı ifade eden ve geri alındığında bu amacı tersine çevirebilen bir atomik commit örneğidir.
-----------------------------------------------------------------------------------------

