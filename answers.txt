1-) Git Nedir?
	
-Dağıtık versiyon kontrol sistemidir.

2-) "git pull" ile "git fetch" komutlarının farkı nedir?

-Git fetch, uzak sunucudaki değişiklerin local bilgisayarın haberdar olmasını sağlar. Git pull ise bu değişiklikleri local bilgisayara almamızı sağlar.

3-) Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?

-Değişiklikleri commitleyip sunucuya pushlamamıştır. Ya da takım arkadaşımız pushlamış olsa bile pull işleminden önce fetch işlemini yapmamışsak yine kodları lokalimize alamayız.

4-) "HEAD" kelimesi neyi temsil etmektedir?

-Mevcut branch'teki en son commit'i temsil etmektedir.

5-) "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
Üzerinde değişiklik yapılan dosyaların Git’e gönderilmeden önce tutulduğu alandır.

6-) "Untracked file" ne demektir?

-Takip edilmeyen dosya anlamına gelmektedir. Yeni oluşturulan dosyalar bu kapsamdadır. Git tarafından takip edilmeyen bu dosyalar git add komutu ile staging area'ya alınmazsa yapılan değişiklikler git tarafından takip edilmez.

7-) ".git" klasörünü silersek ne olur?

-Git ile ilgili çalıştığımız tüm bilgiler kaybolacaktır. git init komutu kullanılarak git'in yeniden initiliaze edilmesi gerekecektir.

8-) Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?

- ReadMe.md dosyasının olduğu bir template belirleyip bunu git init --template komutu ile çalıştırmalıyız.

9-) Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?

-Branch, ana akışın yanında yan yollar sağlamaktadır. Yani projeyi paralel hale getirerek birçok kişinin conflict durumu ile karşılaşmadan çalışmasına imkan sağlamaktadır.

10-) Sıfırdan bir "branch" nasıl oluşturabiliriz?

-Git branch branchname komutu ile oluşturulur.

11-) Var olan bir "branch"e nasıl geçebiliriz?

-git checkout branch name komutu ile geçebiliriz.

12-) "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?

-Git clone  --branch branchname komutu spesifik olarak belirtilen branch çekilir.

13-) "Merge conflict" ne demektir?

-İki kişi tek bir dosyadaki aynı satırda değişiklik yapmış ise ortaya çıkan duruma Merge Conflict denir.

14-) "git log" komutu ile hangi bilgileri görebiliriz?

-Atılan tüm commitler görülür. Bunun yanında her commit'in hashcode'u, author , date ve hangi dosyada değişiklik yapıldığı bilgilerini görebiliriz.

15-) "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?

-staging area'da olan ve staging area'da olmayan değişiklikleri görebiliriz.

16 - ) Git reset ile neyi geri alıyoruz?

-Staging area'daki değişiklikleri geri alınır. Staging area'ya konulan dosyalar staging area'dan çıkarılır. Fakat bununla birlikte Dosyada yapılan değişiklikler geri alınmaz.

17-) "git commit" ile "git push" arasındaki fark nedir?

-Git commit komutu ile uzak sunucuya gönderilecek olan değişiklikler bir mesaj ile localde tutulur. Git push ise commitlenen ve localde tutulan bu değişiklikleri uzak sunucuya gönderir.

18 -) Atomic commit ne demektir?

-Her bir commit’in bir mantıksal işi temsil edecek şekilde atılmasıdır.


19-) Repository ne demektir?

-Proje dosyalarının bir arada tutularak depolandığı yerdir.

20-) "git tag" nedir? "git branch"’ten farkı nedir?

-Her bir release sonrasında oluşturularak daha sonra o versiyona dönülmek istendiğinde kolaylık sağlar. 

21-) Git'i görsel olarak kullanabilmek için hangi üçüncü taraf araçları ve uygulamaları kullanabiliriz?

Gource.io -- https://gource.io/
Visualize Git -- https://visualizegit.com/
Git Commands Visualized -- https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1
Visualizing Git -- https://onlywei.github.io/explain-git-with-d3/#branch


22-) "GitHub" ile "git" arasındaki fark nedir? GitHub benzeri diğer siteler nelerdir? GitHub veya diğer sitelerdeki kullanıcı adlarını yazar mısınız?

-Git bir versiyon kontrol sistemidir. GitHub ise projelerin tutulduğu yerdir. GitLab, BitBucket, OneDev, CodeBerg, Gitea, AWS CodeCommit gibi siteler ise Github’ın alternatifi olarak karşımıza çıkmaktadır.


23 -) main ya da master branch'inin diğer branchlerden farkı nedir?

-Main ya da master branchleri default olarak var olan branch’lerdir.




