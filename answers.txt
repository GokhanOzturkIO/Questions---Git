1.Git Nedir?
-> Git, yazılım geliştirme projelerinde kullanılan dağıtılmış bir versiyon kontrol sistemidir. Değişiklikleri izler, farklı versiyonlar arasında geçiş yapmayı sağlar ve ekip üyelerinin işbirliğini kolaylaştırır. 
Hızlı, güvenilir ve esnek yapısıyla popülerdir.
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
2.git pull" ile "git fetch" komutlarının farkı nedir?
-> git fetch yalnızca uzak depodaki güncellemeleri getirir ve yerel kopyayı etkilemezken, git pull hem güncellemeleri alır hem de yerel kopyayı günceller.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
3.git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
-> Ana proje dosyasındaki son güncellemeri almak için kullanılan komuttur.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
4."HEAD" kelimesi neyi temsil etmektedir?
-> Git içinde hangi konumda olduğumuzu gösterir.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
5."Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
-> Staging area, Git'in çalışma ağacınızdaki (working tree) değişiklikleri takip etmesine ve yönetmesine yardımcı olan bir ara bellek gibidir.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
6."Untracked file" ne demektir?
-> Git'de takip edilemeyen dosyalara denir.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
7. .git klasörünü silersek ne olur
-> 1.Geri döndürülemez bir işlemdir.
   2.Projenizin versiyon geçmişini, değişiklik takibini ve uzak depo bağlantısını kaybolur. 		
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
8. Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
-> git init komutundan sonra otamatık olarak oluşur yada belirli sablonlar kullanarak isteğimiz dosyaların otamatik olarak eklenmesini isteyebiliriz.
       ## Kod Örneği.
	mkdir -p ~/.git-templates/initial
	cp README.md ~/.git-templates/initial/
	git init example
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
9. Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
-> Projemizi dallara ayırmamızı sağlar.Proje içinde birçok kişinin kendi caseni geliştirmesine olanak sağlar.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
10. Sıfırdan bir "branch" nasıl oluşturabiliriz?
-> git branch ynemreuslu komutu ile yeni bir branch oluşturmuş olduk.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
11. Var olan bir "branch"e nasıl geçebiliriz?
-> git checkout ynemreuslu komutu ile branche geçeriz.
-> git checkout -b ynemreuslu komutu ile hem yeni branch acariz ve o branche geçeriz.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
12."git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?
-> git clone --single-branch ynemreuslu https://github.com/GokhanOzturkIO/Questions-Git komutuyla, "Questions" deposundaki "ynemreuslu" adlı branch'i klonlamış olduk.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
13."Merge conflict" ne demektir?
-> "Merge conflict", Git'te iki farklı kaynaktan (genellikle farklı branch'lerden veya commit'lerden) gelen değişikliklerin otomatik olarak birleştirilememesi durumudur. Bu durumda, 
kullanıcı tarafından manuel olarak çözülmesi gereken bir durumdur.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
14."git log" komutu ile hangi bilgileri görebiliriz?
-> git log komutu, Git deposundaki commit geçmişini görüntüler.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
15."git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?
-> git diff komutu ile belirli iki durum arasındaki farkları görebilirsiniz. Bu durumlar genellikle iki farklı commit, bir commit ve çalışma dizini arasındaki farklar veya iki farklı branch arasındaki farklar olabilir. 
Bu komut, dosya içeriğinde yapılan eklemeler, silmeler veya değişiklikler gibi farklılıkları gösterir.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
16.Git reset ile neyi geri alıyoruz?
-> git reset komutu, Git deposundaki belirli bir commit'e geri dönmek veya commit geçmişini değiştirmek için kullanılır.
-> Bu komut, bir commiti geri almanın yanı sıra, değişiklikleri staged veya çalışma dizininden kaldırabilir veya silebilir.
git reset komutu, --mixed, --soft veya --hard gibi farklı bayraklarla kullanılabilir.
-> --mixed bayrağı, geri alınan commit'in değişikliklerini çalışma dizininde bırakır, ancak staged alandan kaldırır.
-> --soft bayrağı, geri alınan commit'in değişikliklerini hem staged alanda hem de çalışma dizininde bırakır.
-> --hard bayrağı, geri alınan commit'in değişikliklerini tamamen siler, hem staged alandan hem de çalışma dizininden kaldırır.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
17."git commit" ile "git push" arasındaki fark nedir?
-> git commit ile yapılan değişiklikler yerelde saklanırken, git push ile bu değişiklikler uzak sunucuya gönderilir ve paylaşılır.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
18.Atomic commit ne demektir?
-> Atomic commit, bir commit'in bir değişiklik setini tam olarak ve bütünlüklü bir şekilde temsil etmesidir. Her commit, tek bir işlevselliği veya değişikliği içermelidir ve diğer commit'lerden bağımsız olmalıdır. 
Bu prensip, kod yönetimini kolaylaştırır ve izlenilebilirliği artırır.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
19.Repository ne demektir?
->  bir projenin tüm dosyalarını, kaynak kodunu ve diğer ilgili materyallerini içeren depodur. Bu depo, projenin versiyon kontrolü yönetimi için kullanılır. Geliştiriciler, dosyaları bu depoya ekler, değişiklikleri izler, farklı versiyonları oluşturur ve işbirliği yapar. 
Özetle, bir Git repo, bir projenin kodunun saklandığı, izlendiği ve paylaşıldığı yerdir
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
20."git tag" nedir? "git branch"’ten farkı nedir?
-> "git tag" komutu belirli bir noktayı işaretlemek veya sürümleri etiketlemek için kullanılırken, "git branch" komutu farklı özellikler üzerinde çalışmak veya farklı 
sürümleri geliştirmek için farklı dallar oluşturmak için kullanılır.
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
21.Git'i görsel olarak kullanabilmek için hangi üçüncü taraf araçları ve uygulamaları kullanabiliriz?
-> Sublime Merge,git fork,git kraken örnek verebiliriz.
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
22."GitHub" ile "git" arasındaki fark nedir? GitHub benzeri diğer siteler nelerdir? GitHub veya diğer sitelerdeki kullanıcı adlarını yazar mısınız?
-> Dağıtık bir versiyon kontrol sistemidir. Proje dosyalarının değişikliklerini izler, farklı versiyonları oluşturur ve işbirliği yapmayı sağlar. Yerel makinede çalışır.Githup ise Git tabanlı bir kod barındırma ve işbirliği platformudur. 
Git depolarının barındırılmasının yanı sıra, kod incelemesi, takım işbirliği, hata takibi gibi birçok özellik sunar.	
-> Örnek sitelere ise GitLab, Bitbucket,Launchpad örnek verebiliriz.Sadece githup kullanıyorum kullanıcı ismim: ynemreuslu.
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
23.main ya da master branch'inin diğer branchlerden farkı nedir?
-> İki branchinde teknik olarak birbirinden farkı yoktur.Genellikle projenin ana hattını temsil ederler.
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
24..gitignore" dosyası nedir ve ne amaçla kullanılır?
-> .gitignore" dosyası git tarafından izlenmemesi gereken dosyaları ve dizinleri belirtmek için kullanılır.
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
25."git push origin --delete branch_name” nedir ve ne için kullanılır?
-> Belirli bir dalın silinmesi için kullanılır.
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->