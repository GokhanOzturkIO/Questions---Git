1-) Git nedir?

-- Git bir versiyon kontrol sistemi ve yazılım geliştirme projelerinde kullanılan bir araçtır. Kod değişikliklerini izler, yönetir, işbirliği yapmayı sağlar ve farklı versiyonlarını saklar.

2-) "git pull" ve "git fetch" komutlarının farkı nedir ?

-- git pull: Uzak bir depodan güncelleme alır ve otomatik olarak yerel branch'e merge eder.

git fetch: Uzak bir depodan güncellemeleri alır, ancak yerel branch'e merge etmez. Yalnızca güncellemeleri indirir ve yereldeki branch'inizdeki uzak branch'in son durumunu günceller.

3-) "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?

-- "origin", genellikle projenin uzak depo (remote repository) olarak tanımlandığı yerel adlandırmadır.

4-) "HEAD" kelimesi neyi temsil etmektedir?

-- "HEAD", şu anda çalışılan branch'in en son commit'ini gösteren bir referanstır.

5-) "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?

-- "Staging Area" veya "Index", commit yapmadan önce değişikliklerinizi hazırladığınız ve commit etmek istediğiniz değişiklikleri belirlediğiniz alandır.

6-) "Untracked file" ne demektir?

-- "Untracked file", Git'in takip etmediği ve depolamadığı bir dosyadır. Yani, dosya Git veritabanında henüz eklenmemiştir.

7-) ".git" klasörünü silersek ne olur?

-- ".git" klasörü, Git deposunun tüm yapılandırma ve tarih bilgilerini içerir. Eğer bu klasörü silerseniz, Git deposunu ve geçmişini kaybedersiniz.

8-) Kendi lokalimizde her "git init" komutunu kullanırken otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?

-- "git init" komutu ile birlikte otomatik olarak "ReadMe.md" dosyası oluşturmak istiyorsanız, bir kabuk betiği veya otomatik bir iş akışı oluşturabilirsiniz.

9-) Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?

-- "Branch", projenin farklı geliştirme yollarını temsil eder. Paralel geliştirme, deneme veya özelliklerin izole edilmesi gibi durumları sağlar.

10-) Sıfırdan bir "branch" nasıl oluşturabiliriz?

-- git branch branch_name komutu ile bir branch oluşturabiliriz.

11-) Var olan bir "branch"e nasıl geçebiliriz?

-- git checkout branch_name komutu ile var olan bir branch'e geçiş yapabiliriz. 

12-) "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?

-- git clone -b branch_name <repository_url> komutunu kullanarak belirli bir branch'i çekebiliriz.

13-) "Merge conflict" ne demektir?

-- "Merge conflict", birleştirme (merge) işlemi sırasında Git'in otomatik olarak çözemediği iki farklı değişiklik arasındaki çakışmayı ifade eder.

14-) "git log" komutu ile hangi bilgileri görebiliriz?

-- git log, projedeki commit geçmişini gösterir. Her bir commit'in kimliği (hash), yazarı, tarihi ve commit mesajı gibi bilgileri görebilirsiniz.

15-) "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?

-- git diff, iki farklı durum arasındaki değişiklikleri gösterir. Genellikle çalışma dizini ve staging alanı arasındaki farkları göstermek için kullanılır.

16-) Git reset ile neyi geri alıyoruz?

-- git reset, commit geçmişinde geriye doğru hareket ederek yapılan değişiklikleri geri alır.

17-) "git commit" ile "git push" arasındaki fark nedir?

-- git commit, yapılan değişiklikleri yerel deposuna kaydeder. git push ise yerel depodaki değişiklikleri uzak bir depoya gönderir.

18-) Atomic commit ne demektir?

-- "Atomic commit", bir commit'in tek bir amacı veya değişikliği temsil ettiği bir commit stili veya yöntemidir.

19-) Repository ne demektir?

-- "Repository", projenin tüm dosyalarının ve geçmişinin depolandığı bir yerdir. Lokal olarak çalışanlar için "local repository" ve uzak olarak erişilebilenler için "remote repository" olarak iki türü vardır.





