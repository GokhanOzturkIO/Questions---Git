✔Git Nedir?
 -Git, dağıtık bir versiyon kontrol sistemi (VSC) olarak kullanılan açık kaynaklı bir yazılımdır.
 -Git, geliştiricilere bir projenin dosyalarının kodunun sürümlerini takip etmeye, değişiklikleri taki etmeye ve farklı geliştiriciler arasında işbirliği yapmamızda yardımcı olur.
 -Git sayesinde projemizde geçmişte yapılan değişiklikleri geri dönme, hataları düzeltme ve proje geçmişi görme(kim tarafından,ne zaman,ne yapıldığını) imkanı sağlar.

✔ "git pull" ile "git fetch" komutlarının farkı nedir?
  -"git fetch" komuutu değişikliklerden haberder olmamızı sağlar değişikliklerin ne olduğunu gösterir ama lokal branchine almaz. 
  -"git pull" ise uzak sunucudaki ilgili branchte ne varsa lokaline alır.

✔Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?
   - kodlarını pushlamamış olabilir.
   - git fetch yapmamış olabilir.

✔"git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
   Uzak sunucu 

✔"HEAD" kelimesi neyi temsil etmektedir?
   -Bağlı olduğumuz branchtaki en son yapılmış olan commit'i temsil etmektedir.

✔ "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
   -Bir sonraki commit'e eklemek istediğiniz değişiklikleri geçici olarak depoladığımız yer.

✔"Untracked file" ne demektir?
   -İzlenmeyen dosya, commit'e eklenmemiş ve takip edilmeyen dosya diyebiliriz.

✔".git" klasörünü silersek ne olur?
   Git'in tüm versiyon kontrol bilgileri, uzak bağlantı bilgileri , branch ve commit bilgilerimiz kaybolur. Yeniden git'i initialize etmemiz gerekecek.

✔ Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
   Klasörün içerisine Readme.md dosyası oluşturup git init --template=klasör yolu dedim .gitin içerisine oluştu. 

✔ Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
   -Projelerimizi yönetmek için kullanılan bir komuttur.
   -Projenizdeki dallları görmeniz ve yeni bir dal oluşturmanızı sağlar.
    Bize ne sağlar?
   -Branchler bizlere farklı özellikler geliştirirken ve hataları düzeltirken işimizi organize etmemize yardımcı olur.
   -Projede fazla kişi olduğunda her biri kendinde branchinde çalışır böylece çakışma(conflict) olasılığı azalır. 

✔ Sıfırdan bir "branch" nasıl oluşturabiliriz?
   git branch branch_adı

✔ Var olan bir "branch"e nasıl geçebiliriz?
   git checkout branch_adı veya git switch brach_adı

✔"git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz? 
git clone --branch branch_adi <repo_url>

✔"Merge conflict" ne demektir?
   Branclerin çakışması

✔"git log" komutu ile hangi bilgileri görebiliriz? 
   Geçmiş commitleri listeler tarih,yazar,commit mesajlarını görebiliriz. Kısa commit bilgileri diyebilirim.

✔"git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?
   -Git diff ile "staging area" veya son commit arasındaki farkları görebiliriz

✔ Git reset ile neyi geri alıyoruz?
    Add yapmadan önceki haline dönüyor staging areada aldıklarımızı tekrardan staging areadan çıkartıyor.

✔"git commit" ile "git push" arasındaki fark nedir?
   git commit değişiklikleri local bilgisayarıma kaydeder git push ise localde yapılan değişiklikleri uzak sunucuya gönderir.

✔Atomic commit ne demektir?
 -Atomic commit kısaca bir dizi işlemi tek bir bağlamsal bir bütün olarak gerçekleştiren bir iş anlamına gelir. Bir projede birden çok dosyada yapılan işlemi atomic commit uygulayarak yaparsak daha bütünlüğü korur ve başka geliştiriciler incelediğinde nerde ne olduğunu ne gibi değişikler olduğunu görür.

✔Repository ne demektir?
 -Projede ki tüm dosyaların, geçmiş versiyonlarını ve değişiklik geçmişini içerir. Repository üzerinden projeyi yönetir, değişiklikleri kaydeder işbirliği yaapabiliriz.Kısaca repomuzda bir projemizi belgemizi notumuzu herşeyi depolayabiliriz.

✔"git tag" nedir? "git branch"’ten farkı nedir?
  -Git tag komutu belirli bir commit üzerinden etiket eklemek ve belirli bir commite isim vermek için kullanılır. En önemli kullanım sebebi projenin güncel versiyonu dışında geçmişe dönebilmektedir neden commit değilde tag derseniz bir porjede çok fazla commit oluyor ve versiyonu bulmak zor olur bu yüzden git tag ile projenin versiyonlarını etiketleyerek daha çabuk bulabiliriz.
  -Git tag versiyon işlemlerinde işimize yarar git branchler ise genellikle bir projenin parçası olarak oluşturulur ve birleşitirilir. Git tagler sabit bir yapıya sahip git branchler ise dinamik bir yapıya sahipler sürekli değiştirilebilir geliştirilebilir.

✔Git'i görsel olarak kullanabilmek için hangi üçüncü taraf araçları ve uygulamaları kullanabiliriz?
  -GitHub Desktop,SourceTree, GitKraken,TortoiseGit,Git Extensions, GitUp,Git GUI, SmartGit, Git-cola,Tower,Fork,GitWeb ..

✔"GitHub" ile "git" arasındaki fark nedir? GitHub benzeri diğer siteler nelerdir? GitHub veya diğer sitelerdeki kullanıcı adlarını yazar mısınız?
  -Git versiyon kontrol sistemidir.Projeleri takip etmek, değişiklikleri kaydetmek ve işbirliği için kullanılır. Github ise git tabanlı bir web platformudur aynı zamanda sosyal medya platformudur.
  - Github benzere siteler nelerdir?
   GitLab, Bitbucket, SourceForge örnek verebilirim.
  - GitHub veya diğer sitelerdeki kullanıcı adlarını yazar mısınız?
   GitHub:@Gamzecoskkun
  
  

