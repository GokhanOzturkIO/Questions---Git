1- Git nedir?

Git bir versiiyon kontrol sistemidir. Dosyaların zaman içinde uğradığı değişiklikleri işaretlemek, raporlamak, etiketlemek için kullanılır. Bu hem tek başına çalışırken hem de grupla çalışırken düzenli ve verimli bir çalışma ortamı oluşturmaya yardımcı olur.
#####
 
2- "git pull" ile "git fetch" komutlarının farkı nedir?

Uzak bir repoyla çalışırken git fetch komutunu kullanırsak uzak repodaki son değişikliklerden "haberdar oluruz" ancak yerel repomuza çekmeyiz. Eğer git pull komutunu kullanırsak, bu kez uzak repodaki değişiklikleri kendi yerel repomuza çekebilir ve böylece karşıyla senkronizasyon sağlayabiliriz.
#####



3- Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?

Eğer teknik bir sorun(bağlantı kopması vb) yoksa arkadaşımız commitlediği değişikleri push ile uzak repoya göndermemiş olabilir. Push ettiği halde sorun devam ediyorsa farklı bir branche push etmiş olabilri.
#####


4- "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?

Uzak repoya denk gelir. "git pull" dediğimizde o "origin"den çekeriz
#####

5- "HEAD" kelimesi neyi temsil etmektedir?

Üzerinde çalıştığımız son commiti temsil eder. Farklı bi dala veya commite geçersek HEAD de güncellenir.
#####

6- "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?

"git add" komutunu kullandıktan sonra henüz commitlemediysek dosyalarımız bir "ara bölge"de bulunur. Üstünde çalıştığınız dosya ile commit deposu arasında bir bekleme bölgesi denilebilir. Böylece tüm değişiklikleri bir seferde değil de grup grup gönderebiliriz.
#####

7- "Untracked file" ne demektir?

Git sistemiyle takip edilmeyen, değişiklikleri izlenmeyen dosyadır.
#####

8-- ".git" klasörünü silersek ne olur?

Git ile yaptığımız tüm geçmiş bilgisini ve tüm ayarları kaybederiz. Projemizin git deposu ortadan kalkar.
#####

9- Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?

Yanıtı bilmediğim için chatgpt'ye sordum. Script önerdi. Daha doğal bi yolu yok mu dedim. Yaklaşık olarak şöyle bi şey önerdi:

Yeni bi git reposu oluştuğumuzda belli dosya ve dizinleri kopyalayabilir, bunun için şablon oluşturabilirmişiz.

 bunun için önce
 
>  mkdir -p ~/git-templates/skeleton 
 komutu ile bir klasör oluşturuyor, sonra da
 
 
 > echo "# Proje Başlığı" > ~/git-templates/skeleton/README.md
 komutuyla bi readme dosyası oluşturuyormuşuz(tırnakların içine yazılan "proje başlığı", readme'nin başına ekleniyor).
 
 
 En son olarak da
 
 > git config --global init.templateDir '~/git-templates/skeleton'
 komutunu kullanıp git yapılandırmamızı güncelliyormuşuz...
 #####

10- Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?

Branh aslıdda "dal" anlamına gelir(bkz: branş). Bu özellik sayesinde geliştiriciler aynı anda farklı özellikler ve düzeltmeler üstünde çalışabilir.

Aynı zamanda, asıl ve stabil kodların tutulduğu main/master branchinden aynı bi branchte çalışılırsa bi kullanıcının asıl projeye zarar verme ihtimali azaltılır.

Ayrıca aynı projenin farklı sürümlerini kolayca takip etmede yardımcı olur.
#####

11- - Sıfırdan bir "branch" nasıl oluşturabiliriz?

> git branch yeni-branch-adi

 komutu ile yeni branch oluşturulabilir.
 #####

12- Var olan bir "branch"e nasıl geçebiliriz?

> git checkout gecilmek-istenen-branch-adi

komutu ile halihazırda var olan bir branche geçilebilir.
#####

13- "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?

> git clone --branch branch-adi URL
kalıbını kullanabiliriz.
#####

14- "Merge conflict" ne demektir?

İki ayrı branchteki değişiklikler aynı dosyanın aynı bölümünde yapılırsa ve Git bu değişiklikleri otomatik olarak birleştiremezse bu hata alınır.
#####

15- "git log" komutu ile hangi bilgileri görebiliriz?

Commit geçmişi, sahipleri ve commit hashlerini görebiliriz.
#####


16- "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?

"Çalışma dizini ile staging area", "staging area ve son commit", "iki commit", "iki branch", "çalışma dizini ve bi commit", "belli bir dosya veya dizin yolu", "iki farklı branchteki dosya veya dizin" arasındaki değişiklikler olmak üzere toplam 7 imiş...
#####

17- Git reset ile neyi geri alıyoruz?

Varsayılan haliyle kullanılırsa, son commiti geri alıyoruz.
#####

18- "git commit" ile "git push" arasındaki fark nedir?

Git commit ile yapılan değişiklikler yerel repoya kayıt olarak işlenir. Git push ile de bu commitler uzak repoya gönderilir.
#####

19- Atomic commit ne demektir?

Değişiklikleri parça parça, küçük küçük "kaydetmek" demektir. Böylece yapılan değişilkliklerin takibi ve organizasyonu çok daha kolay yapılır.
#####

20- Repository ne demektir?

Projenin version kontrolü ile izleme altına alındığı depodur.
#####

21- "git tag" nedir? "git branch"’ten farkı nedir?

Git tag, belirli commitleri işaretlemek için kullanılır. Genelde proje sürümünü işaretlemede kullanıldığı görülür.

branch fonksiyon olarak apayrı bir şeydir. Paralel geliştirme için kullanılır.  Ayrıca tag'ler genelde değişmez kabul edilirken branchler değişime açıktır. Son olarak, tagler sabit bir commite referans iken branch son commite referans verir.
#####

22 - Git'i görsel olarak kullanabilmek için hangi üçüncü taraf araçları ve uygulamaları kullanabiliriz?

GitKraken, Fork, Sourcetree, Tower Github Desktop, Smartgit...
#####

