1. Git yazılım geliştirme sureclerinde kullanılan versiyon kontrol aracıdır. Projede farklı bilgisayarlardan birden fazla kisinin calısmasına ve proje uzerınde yapılan degısıklıklerının es zamanlı kaydedilmesine olanak tanır.
2. Git pull remote repositorydeki degısıklıklerı alır ve local repository ile merge eder. Bu overwrite merge conflict e yol acabilir. Git fetch ise sadece degisiklikleri alır ve local repositoryde degisiklik yapmaz. Bu sayede değişiklikleri gözden geçirmek için zaman verir.
3. Henüz remote repository ye pushlanmamıs olabilir veya fetch etmek ıcın gerekli izinlere sahip degilizdir. İnternet baglantısıyla ilgili veya remote repository adres ismiyle ilgili bir sıkıntı olmus olabılır.
4. Remote repository url i için kullanılan standart default bir kısaltmadır. İsmi isteğe bağlı değiştirilebilir.
5. Kullanıcının mevcut branchte hangi commit üzerinde çalıştığını gösterir. Bu dizindeki dosyaların hangi sürümde olduğunu belirler. Yeni commit oluşturulduğunda HEAD otomatik olarak bu konumu işaret eder.
6. Staging area commit edilmeye hazır olan değişiklikleri içinde barındıran ara bi alandır. Working directorydeki değişiklikler staging area ya eklenerek sonraki commit e dahil edilebilir. Commit etmeden önce genel bir kontrol için kullanılabilir.
7. Git tarafından kontrol edilemeyen dosyalardır. Takip edilmesi için git add ile staging areaya eklenip daha sonra git commit komutunu kullanmak gerekir.
8. Git ile ilgili kaydedilmiş tüm bilgiler silinir.
9. Template dosyası içerisinde "ReadMe.md" dosyası oluşturduğumuzda git init her çağrıldığı zaman bu dosya otomatik olarak oluşturulmuş olacaktır. Templateler git repository leri için git in başlangıç ve ayar dosyalarıdır.
10. Branch kavram olarak ağaç gövdesinden ayrılan dalları simgeler. Kod yapısında birden fazla yazılımcının özgürce çalışabilmesini sağlar. Projenin ana branch i main olarak isimlendirilir. Eğer main üzerinde değişiklik yapılacaksa mainin kopyası olarak yeni bir branch açılır ve main branch i etkilemeden değişiklikler ve testler yapılır. Daha sonra tekrar main branch e commit edilir. Her ekip üyesi kendi branch i zerinde çalışabilir. Bu sayede çoklu çalışma ortamında oluşabilecek karmaşa önlenmiş olur.
11. Branch oluşturmak için "git branch random_branch_name" komutu kullanılır. Yeni bir branch açıldığında HEAD değişmez. Bu yüzden açılan branch e gitmek için "git checkout random_branch_name" kullanılır. "git checkout -b random_branch_name" kısayolu ile de yeni bir branch yaratıp ona gitmiş oluruz.
12. Var olan bir branch e gitmek için "git checkout random_branch_name" komutu kullanılır.
13. Spesifik bir branch i çekmek istiyorsak "git clone --single-branch --branch random_branch_name random_repository_url" komutu kullanmalıyız. Kontrol etmek için ilgili klasöre geçip "git branch" komutunu kullanırsak random_branch_name i verecektir.
14. Farklı branchlerde yapılan değişiklikleri main branch e gönderirken karşılaşılan sorunları kapsar. İki farklı branchte aynı satırda farklı değişiklikler yapılması, bir branchte bir dosya silinirken diğerinde  silinmemiş olması veya farklı branchlerde aynı adı taşıyan farklı dosyaların oluşturulması merge conflict doğurur. Conflictin meydana geldiği durumlarda "git merge --abort" komutu ile merge yapmadan önceki hale dönebiliriz. Merge başarılı olmasına rağmen merge den önceki duruma geçmek istiyorsak "git reset --merge" komutunu kullanabiliriz.
15. "git log" komutu git repositorydeki commit geçmişini gösterir. Commit in kim tarafından ne zaman ne için atıldığının bilgisini içerir. "git log --oneline" her commiti tek satırda gösterir. "git log --graph" komutu da commitler arasındaki ilişkiyi görsel olarak ifade eder.
16. "git diff" komutu ile working directory ile staging area arasındaki değişiklikleri görebiliriz. staging area ile son yapılan committeki farkları görebiliriz. İki commit arasındaki farkları görebiliriz. İki branch arasındaki farkları görebiliriz.
17. Son commiti istenilen bir commite geri döndürür ve bundan sonraki tüm commitleri siler. Geri döndürülen commitin üzerine yazıldığı için dikkatli olmak gerekir. Working directorydeki veya staging areadaki değişiklikleri geri alır veya dosyaların hepsini staging areadan geri alır. 
18. "git commit" working directorydeyken "git add" ile staging areaya aktarılmış dosyaları staging area dan alıp local repositorye kaydeder. "git push" ise local repositorydeki dosyaları remote repositorye yükler.
19. Yazılımsal bir değişiklik yapıldıktan sonra durumu özetleyen anlamlı bir commiti temsil eder. Atomic commit in bu değişikliklerin hepsini kapsayacak kısa bir yazıya sahip olması gerektiğinden konuyla alakalı her bir bütün değişiklik başına bir atomic commit atılmalıdır. Bu sayede geriye dönük tarihçe takibinde, belli bir konuyla yapılması gereken değişikliklere kolayca ulaşıp vakit kazanabiliriz.