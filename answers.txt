1) Git Nedir: Git, bir versiyon kontrol sistemidir. Geliştirdiğimiz bir yazılımı, yazdığımız bir kitabı veya basitçe aldığımız notları versiyonlamak ve zaman damgasıyla yaptıklarımızı gözden geçirmek için harika bir sistemdir.

2) "git pull" ile "git fetch" komutlarının farkı nedir: "git fetch" komutu, uzak sunucudaki değişiklikilerden lokalin haberdar olmasını sağlar. 
Değişiklikleri çekmez. "git pull" komutu ise, "git fetch" komutu ile haberdar olduğumuz değişiklikleri lokale çekmemizi sağlar. 
"git pull" komutu, sadece güncel (çalışılan) branch'deki değişiklikleri çeker. Öncesinde mutlaka "git fetch" komutunun çalıştırılması gerekir.
Aksi takidirde değişikliklerden haberdar olamayacağımız için conflict'ler oluşabilir.

3) Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir:
"git fetch" komutunu çalıştırmamış olabiliriz. Farklı branch'lerde olabiliriz. Takım arkadaşımız sadece commit atıp push'lamayı unutmuş olabilir.

4) "git fetch origin" komutundaki "origin" neye karşılık gelmektedir: "origin", uzak deponun URL'i yerine kullanılır. Uzak depomuzu işaret eder.

5) "HEAD" kelimesi neyi temsil etmektedir: güncel branch'in son commit'ini temsil eder.

6) "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir: Staging Area, yaptığımız değişiklikleri veya yeni oluşturduğumuz dosyaları, commit'lemeden
önce tuttuğumuz ara bir bölgedir. Yaptığımız her değişikliği commit'lemek istemeyebiliriz. Commit'lemek istediğimiz değişiklikleri hazırda tutmak için Staging Area'ya alırız.

7) "Untracked file" ne demektir: Untracked file, Git tarafından takip edilmeyen dosyaları temsil eder. Bu dosyalar, commit ve push işlemlerinden etkilenmezler.

8) ".git" klasörünü silersek ne olur: .git klasörünü silersek, Git tarafından kaydedilen bilgiler silinir ve o klasör artık Git Repository'si olmaktan çıkar. 
Öncesinde commit'leri uzak bir sunucuya push'lamadıysak tüm versiyon kontrollerimizi kaybederiz.

9) Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
Bir template klasörü oluşturup, içerisinde ReadMe.md dosyası oluşturup, "git init --template <directory>" komutunu çalıştırarak Git'i başlatabiliriz.

10) Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar: Branch'ler, bir takımla çalışırken, aynı anda farklı özellikler üzerine çalıştığımız bir durumda,
birbirimizden etkilenmemek için kullandığımız bir yapıdır.

11) Sıfırdan bir "branch" nasıl oluşturabiliriz: "git branch <branch name>" komutuyla bir branch oluşturabiliriz.

12) Var olan bir "branch"e nasıl geçebiliriz: "git switch <branch name>" komutuyla veya "git checkout <branch name>" komutuyla, var olan bir branch'e geçebiliriz. 
Bir branch'i hem oluşturup hem de geçiş yapmak istiyorsak, "git checkout -b <branch name>" komutunu kullanabiliriz.

13) "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz: "git clone --branch <branch name> <url>" komutuyla belirli bir spesifik branch'i çekebiliriz.

14) "Merge conflict" ne demektir: Merge conflict, iki veya daha fazla kişinin çalıştığı bir projede, aynı dosyanın aynı satırını,
iki veya daha fazla kişi değiştirip, bu değişiklikleri commit'leyip, kendi branch'lerine push'ladıktan
sonra değişiklikleri master branch'ine merge etmeye çalışırken yaşanan çakışmadır. 
Çakışma olduğunda takım arkadaşlarımızla görüşüp, hangi kodun geçerli olacağına karar vermemiz gerekir.

15) "git log" komutu ile hangi bilgileri görebiliriz: "git log" komutu ile, atılan commitleri, commit'lerin id'lerini, commit'leri kimlerin attığını, 
ne zaman attığını, commit mesajını ve eğer güncel branch'e merge edildiyse, commit'lerin hangi branch'lerden atıldığını görebiliriz.

16) "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz: "git diff" komutu ile, takip edilen dosyalardaki değişiklikleri görüntüleyebiliriz. 
Silinen yazıları, eklenen yazıları ve silinen dosyaları görüntüleyebiliriz.

17) Git reset ile neyi geri alıyoruz: "git reset" komutu ile, Staging Area'ya aldığımız dosyaları veya değişiklikleri Staging Area'dan çıkartarak eski haline döndürebiliriz. 
Bu işlem eklediğimiz dosyaları silmez, değişikliklerimizi geri almaz.

18) "git commit" ile "git push" arasındaki fark nedir: "git commit" komutu, değişikliklerimizi ve versiyonlarımızı lokale kaydeder. 
"git push" ise, değişikliklerimizi ve versiyonlarımızı uzak sunucuya kaydeder, orada saklar.

19) Atomic commit ne demektir: Atomic commit, tek bir iş yapan, geri alınması kolay ve zahmetsiz olan, yapılan işi tam anlamıyla açıklayan, kısa ve öz commit mesajıdır.

20) Repository ne demektir: Repository, versiyonladığımız şeylerin tutulduğu, lokalde veya uzak sunucuda bulunabilen bir depodur.

