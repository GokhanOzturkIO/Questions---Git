1- Git Nedir?
# Yapılan işlemler için versiyonlama yapmak için kullanılır. Kod veya dosya işlemlerindeki değişiklerin takibini yapmak için kullanılan versiyon kontrol sistemidir.

2- "git pull" ile "git fetch" komutlarının farkı nedir?
# git fetch ile uzak sunucuda olan değişikleri indiririz ama lokaldeki dosyalarımız değişmez. git pull ile değişikler lokal dalımızda birleşir.

3- Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?
# Arkadaşımız kodlarını commit etmiş ama push işlemi yapmamış olabilir. Bu durumda biz fetch işlemi yaptığımızda değişikleri göremeyeceğiz.

4- "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
# Bağlı olunan ana repoyo temsil eder. git fetch origin ile uzaktaki repodaki değişiklikleri lokale alırız.

5- "HEAD" kelimesi neyi temsil etmektedir?
# HEAD kelimesi üzerinde bulunulan branch'in son commit'ini gösterir. Bu HEAD commit işlemleri sırasında değişir. Stack mantığıyla düşünürsek, HEAD en eklenen commit'e denir.

6- "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
# Staging Area çalışılan dosyaların git tarafından takip edilmesi için oluşturulmuş sanal bir bölümdür. git add ile değişiklikler veya direkt dosyalar Index bölümüne taşınır.

7- "Untracked file" ne demektir?
# git dosyasında bulunan ancak git tarafından henüz tanınmamış dosyalara denir. Bu dosyaları git add ile git'e tanıtırız ekleriz.

8- ".git" klasörünü silersek ne olur?
# Üzerinde çalışılan dosyanın git tarafındanki tüm bilgileri silinir. Repo bilgileri, kod geçmişi, log vb. tüm bilgiler kaldırılır.

9- Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
# git ile çalışacağımız dosyada ReadMe.md dosyası için bir template belirliyoruz. İlk defa git'i aktif ederken git init komutu ile birlikte --template [Template konumu/ dosya yolu] kodunu da kullanıyoruz. "git init --template [template konumu]"

10- Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
# Ana projemizde adı üzerinde dallanma yapmamızı sağlar. Bu dallar ile aynı kaynak üzerinden farklı yollar veya birden fazla kişiyle çalışabilir daha sonra birleştirerek tek bir proje haline getirebiliriz.

11- Sıfırdan bir "branch" nasıl oluşturabiliriz?
# git branch [branch-adı] ile yeni bir branch oluşturulabilir. git checkout -b [branch-adı] bu şekilde de oluşturulur ve o branch'e geçiş yapılır.

12- Var olan bir "branch"e nasıl geçebiliriz?
# git checkout [branch-adı] ile var olan bir branch'e geçiş yapabiliriz.

13- "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?
# "git clone --branch [branch-adı] [repo-url]" bu şekilde çekilebilir.

14- "Merge conflict" ne demektir?
# Aynı dosya üzerinden birden fazla kişiyle çalışma durumunda sıklıkla yaşanılan bir durumdur. Farklı kişiler tarafından gerçekleştirilen merge işlemlerinden sonra yapılan değişiklerin aynı dosya veya aynı kod dizininde olduğu durumda 'Merge Conflict' durumu oluşur. Kod sorumlusu tarafında hangi değişikliğin kabul göreceği el ile seçildikten sonra sorun çözülür.

15- "git log" komutu ile hangi bilgileri görebiliriz?
# Yapılan commit'ler hakkında bilgiler verir. Yapan kişi, tarih, commit mesajı gibi bilgileri git log komutu ile görebiliriz.

16- "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?
# Stagind Area'daki son commit'ler arasındaki farklılıklara git diff --staged veya git diff --cached komutlarıyla bakabiliriz. Kısaca commit'ler arası farklılıklar git diff ile öğrenilebilir.

17- Git reset ile neyi geri alıyoruz?
# Staging bölümüne yollanan dosyaları geri alıyoruz.

18- "git commit" ile "git push" arasındaki fark nedir?
# git commit ile üzerinde çalışılan dosya yapılan değişiklikleri ile beraber mesaj eklenerek push durumuna hazır hale gelir ancak hala lokalde tutulur. git push ile uzaktaki repoya ulaştırılır. 

19- Atomic commit ne demektir?
# Yapılan değişiklikler birbirinden bağımsız ise Atomic commit ile sadece ilgili değişiklikler commit edilir. Her commit'in yapılan tek bir değişikliği ifade ettiği commit türüdür.

20- Repository ne demektir?
# Çalışılan projenin(yazılım projesi olmak zorunda değil) bir versiyon kontrol sistemiyle dijital ortamdaki haline denir. Uzaktan dosya yönetimi ve ilerlemesi takip edilebilir.

21- "git tag" nedir? "git branch"’ten farkı nedir?
# git tag komutu commit ile ilgilidir. İstenilen commit'i etiketlemeye yarar. gir branch ise çeşitli commit'lere sahip dalları temsil eder.