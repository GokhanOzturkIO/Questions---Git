Soru 1 - Git nedir ? 
	- > Git en kısa tanımıyla bir versiyon kontrol sistemidir. Herhangi bir projenin üzerinde farklı bilgisayarlardan, birden fazla kişinin çalışmasına
	olanak verir ve ekip çalışmasını daha kolay, düzenli hale getirir. Daha da açmak gerekirse projede yapılan değişiklikleri git ile beraber eş zamanlı
	olarak kaydedebilir ve yapılan değişiklikleri takip edebiliriz.

Soru 2 - Git pull ile git fetch komutlarının farkı nedir ?
	-> Git fetch komutu ile uzak sunucuda bulunan değişikliklerden haberdar oluruz. Git pull komutunu kullanarak da bu değişiklikleri kendi lokal sunucumuza
	çekeriz.

Soru 3 - Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak
 nerelerde hata yapılmış olabilir?
	-> 1 - Takım arkadaşımız yaptığı değişiklikleri uzak sunucuya göndermemiş olabilir.
	   2 - Uzak sunucumuzda ve kendi lokal sunucumuzda yapılan değişiklikler çakışmış olabilir.
	   3 - Uzak sunucuya erişim yetkimiz olmayabilir.

Soru 4 - "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
	-> 'origin' git fetch komutunu kullanacağımız uzak sunucuyu ifade eder.

Soru 5 - "HEAD" kelimesi neyi temsil etmektedir?
	-> Bulunduğumuz branch'te atılan son commit'in işaretçisidir.

Soru 6 - "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
	-> Bu kavramları projemizdeki değişiklikleri commitlemeden önce sakladığımız bir ara bölge olarak ifade edebiliriz.

Soru 7 - "Untracked file" ne demektir?
	-> Untracked file git'in takip etmediği, değişikliklerinden haberdar olmadığı dosyalardır. Örneğin uzak sunucudan bir repo'yu lokal sunucumuza kopyaladık.
	Kopyalama işleminden sonra lokal sunucumuzda bu repo'ya yeni bir dosya ekledik. Eğer git status komutunu çalıştırırsak yeni eklenen dosyayı "untracked file"
	adı altında görürüz. Çünkü bizim kopyaladığımız repo'da bu dosya bulunmuyordu ve bu sebeple takip edilmiyor(git add komutu ile dosyayı takip edilebilir hale
	getirebiliriz).

Soru 8 - ".git" klasörünü silersek ne olur?
	-> .git klasörü çalıştığımız proje içerisinde git init komutu ile git'in kendi oluşturduğu gizli bir klasördür. Bu klasör git'in proje üzerinde aktif olduğu
	anlamına gelir. Kısacası eğer bu klasörü silersek git'in projedeki aktifliğini kaldırırız ve git ile beraber yaptığımız tüm değişiklikleri kaybederiz.

Soru 9 - Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
	-> Bir proje üzerinde farklı branch'ler açarak kendi çalışma ortamımızı yaratabiliriz. Bu sayede farklı branch'lerde yapılan değişiklikler birbirini etkilemez.
	Örnek verecek olursak bir arkadaşımızla e-ticaret uygulaması geliştirdiğimizi varsayalım. Bir kişi üye kayıt-giriş kodlarını kendi branch'inde yazarken diğer
	bir kişi ürünlerin kullanıcıya gösterimini kendi branch'inde hazırlayabilir. Daha sonrasında da bu branch'leri birleştirerek projeyi tamamlayabiliriz ve proje
	üzerinde çalışan kişiler çalışma sırasında birbirini etkilememiş olur.

Soru 10 - Sıfırdan bir "branch" nasıl oluşturabiliriz?
	-> 1 ) git branch branchName komutu ile yeni bir branch oluşturabiliriz
	   2 ) git checkout -b branchName komutu ile yeni bir branch oluşturur ve o branch'e geçiş yapabiliriz.

Soru 11 - Var olan bir "branch"e nasıl geçebiliriz?
	-> git checkout branchName komutu ile var olan branch'e geçiş yapabiliriz.

Soru 12 - "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?
	-> git clone --branch <branchName> <uzak sunucu url'si>

Soru 13 - "Merge conflict" ne demektir?
	-> Aynı proje üzerinde çalışan kişilerin benzer satırlarda veya dosyalarda yaptıkları değişikliklerin çakışması.

Soru 14 - "git log" komutu ile hangi bilgileri görebiliriz?
	-> 1 ) Commit ID - Git tarafından oluşturulur.
	   2 ) Author - Git üzerinde yapılan config ayarlarında girdiğimiz kullanıcı adı ve mail bilgileri. Kısaca commit'in kim tarafından atıldığı.
	   3 ) Date - Commit'in atılma tarihi ve saati
	   4 ) Commit Message - Commit atılırken girilen commit mesajı

Soru 15 - "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?
	-> 1 ) Henüz staging area'ya taşınmamış değişiklikler
	   2 ) Staging area'da olan dosyalar üzerindeki değişiklikler
	   3 ) İki commit arası değişiklikler

Soru 16 - Git reset ile neyi geri alıyoruz?
	-> git reset komutunu kullanarak git add ile staging area'ya taşıdığımız dosyaları staging area'dan çıkartırız. Dosyalar üzerindeki değişikliklerin geri alındığı
	anlamına gelmez.

Soru 17 - "git commit" ile "git push" arasındaki fark nedir?
	-> git commit komutu ile yaptığımız değişiklikleri lokal sunucumuzda bulunan working tree kısmına kaydederiz. git push komutu ile commitlediğimiz değişiklikleri
	uzak sunucuya göndeririz.

Soru 18 - Atomic commit ne demektir?
	-> Atomic commit birden fazla değişikliği bir araya getirip tek bir işlem olarak uygulamayı ifade eder. Bu, bir grup dosya değişikliğini tek bir commit olarak 
	kaydetmek anlamına gelir.



