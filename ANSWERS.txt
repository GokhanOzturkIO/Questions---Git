1-Git Nedir?
-Git, bir versiyon kontrol sistemidir. 

2-"git pull" ile "git fetch" komutlarının farkı nedir?
-uzak sunucuda proje üzerinde yapılan değişiklikleri birleştirmek ve farkını görebilmek için fetch işlemi yapılır. Ve pull işlemine hazır hale gelinir. Pull işlemi ise ilgili branche gönderilen commitleri çekmek için kullanılır.

3-Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?
-Böyle bir durumla karşılaşılıyorsa, git fetch işlemi esnasında bir conflict oluşmuş demek olabilir. Aynı dosya üzerinde aynı yerlerde yapılan düzenlemeler conflicte neden olmuş olabilir. Düzeltmek için farklı branch'ler açıp oradan devam etmek mantıklıdır.

4-"git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
-bahsedilen origin -> uzak sunucu/depo adresidir.

5-"HEAD" kelimesi neyi temsil etmektedir?
-HEAD kelimesi genellikle son atılan commmiti işaret eder, bazen de bağlı olunan branch'i de işaret eder.

6-"Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
-staging area -> untracked olan dosyaların tracked hale dönüştüğü bir ara lokasyon. pushlamadan önce değişiklikleri inceleyip düzenleme imkanı sunan yer.

7-"Untracked file" ne demektir?
-git'in çalışma dizinindeki dosyaları takip etmediği anlamına gelir.

8-".git" klasörünü silersek ne olur?
-.git klasörünü silmek bütün değişiklikleri siler ve proje kontrolünü imkansız hale getirir.

9-Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
-touch README.md
chmod +x initialize_git_repo.sh
./initialize_git_repo.sh
işlemlerinden geçirerek yapılabilmekte.

10-Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
-Branch yapısı ana proje yapısını bozmadan proje üzerinde çalışmalarımızı yapabilme imkanı sunar. Main branch'e paralel farklı bir branch'dir ve bir projeyi ağaca benzetirsek her branch bir dala benzer.

11-Sıfırdan bir "branch" nasıl oluşturabiliriz?
-git branch feature/<branch adı>
veyahut git checkout -b feature/<branch adı> şeklinde yapılabilir.

12-Var olan bir "branch"e nasıl geçebiliriz?
-örneğin 'git checkout feature/<branch adı>' komutuyla geçilebilir.

13-"git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?
-git clone --branch <branch adı> <repo linki>

14-"Merge conflict" ne demektir?
-genellikle Git'te iki farklı kaynaktan gelen değişikliklerin aynı dosyanın aynı bölümlerini etkilediğinde ortaya çıkar. Birleştirme (merge) işlemi sırasında, Git bu durumu tespit eder ve çakışma çözülmeden birleştirme işlemini tamamlamaz.

15-"git log" komutu ile hangi bilgileri görebiliriz?
-atılan commiti, tarihini, yazarını görebiliriz.

16-"git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?
-staging area'dan önceki ve staging areada bulunan farkları gösterir. yani 2 durum arasındaki değişiklikleri gösterir

17-Git reset ile neyi geri alıyoruz?
-staging area'ya gönderdiğimiz dosyaları geri alıyoruz.

18-"git commit" ile "git push" arasındaki fark nedir?
-git commit yapılan değişiklikleri kaydeden ve bunun mesajını göstermeye yarayan komuttur. Push ise yapılan tüm değişiklikleri uzak sunucudaki adrese gönderilmesini sağlar.

19-Atomic commit ne demektir?
her bir değişikliği tek tek ekleyip her birine ayrı bir commit mesajı ekleyip commitlemektir. İşlerin daha düzenli ilerlemesini ve gözükmesini sağlar.

20-Repository ne demektir?
-"Repository" (Depo), bir yazılım projesinin, dosyalarının, geçmişinin ve sürüm kontrolü bilgilerinin saklandığı yerdir. Bir repository, yazılım geliştirme sürecinde kullanılan dosyaların ve verilerin depolandığı, yönetildiği ve paylaşıldığı merkezi bir depo olarak düşünülebilir.

21-"git tag" nedir? "git branch"’ten farkı nedir?
-git tag bir commit üzerine etiket oluşturmak için kullanlır.Genellikle sürüm num gibi tanımlayıcılar bulunur.
git branch'de projenin bir kopyası üzerinde çalışabileceğimiz başka bir alandır.

22-Git'i görsel olarak kullanabilmek için hangi üçüncü taraf araçları ve uygulamaları kullanabiliriz?
-GitHub/Desktop uygulaması
GitKraken
SourceTree
GitExtensions

23-"GitHub" ile "git" arasındaki fark nedir? GitHub benzeri diğer siteler nelerdir? GitHub veya diğer sitelerdeki kullanıcı adlarını yazar mısınız?
-GitHub, bir projelerinizi depolayıp public olarak paylaşabileceğiniz bir mecradır. Git ise bir verssiyon kontrol sistemi olduğu için gitHub'a göre daha bütünsel bir alandır. benim gitHub kullanıcı adım : @cansilaci1
github benzeri siteler ise gitlab, azure devops, bitbucket vb..


