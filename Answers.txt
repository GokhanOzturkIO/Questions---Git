1. Git Nedir?

Git, bir versiyon kontrol sistemidir. Bir projenin üzerinde versiyonlama yapabilme ve hem aynı dosya üzerinde birden fazla kişi ile çalışabilme hem de yaptıkları değişiklikleri görebilmek için kullanılan bir araçtır. 
İlk sürümü Linux çekirdeği'nin geliştirilmesinde kullanılmak üzere Linus Torvalds tarafından oluşturulmuştur.
Projenin versiyonlarında yapılan değişiklik "commit" olarak adlandırılır. 
Commit sayesinde proje üzerinde yaptığımız her bir değişikliği geri dönüp kontrol edebilme ve yapılan değişiklikleri konrol edebilmeyi sağlar.
Birden fazla kişi ile çalışma imkanı sağladığı için her proje ile ilgilenen kişi kendi branch'ini oluşturarak değişiklikler yapabilir. Bu değişiklikleri de master branch yaparak asıl projeye ekleyebilir.
Her commit, bir kullanıcı tarafından yapılan değişiklikleri belgelendirir ve takip etmeyi kolaylaştırır.

------------------------------------------

2. "git pull" ile "git fetch" komutlarının farkı nedir?

Git pull, proje içerisimde master branch'den projenin güncel versiyonunu almak için kullanılır. 
Git pull projede yakın zamanda yapılan değişiklikleri almaktadır.
Git pull komutu, git fetch komutunu da içerir ve güncellemeleri locale otomatik olarak entegre eder. 
Git fetch ise, başka bir sunucunun projesinde bulunan bütün içeriği locale indirmek için kullanılır. Bu komut, localdeki bilgileri güncellemek için kullanılır, ancak localde herhangi bir değişiklik yapmaz.
Git fetch genellikle locali uzak sunucu ile  güncellemek için git reset komutuyla kullanılır.

------------------------------------------

3. Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?

- Bağlantıda bir hata olabilir.
- Değişiklikleri pull edebilmek için erişim izni olmayabilir.
- Değişikliklerin yapıldığı branch farklı olabilir. Dolayısıyla takım arkadaşınız farklı bir branch'e gönderdiyse bunu öğrenip o branch'e pull yapmanız gerekir.
- Merge conflict olabilir. Yani sizin yaptığınız değişiklikler ile takım arkadaşınızın yaptığı değişiklikler çakışıyor olabilir. Öncelikle çakışan dosyaları düzenlemek gerekir.

------------------------------------------

4. "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?

Origin, localin bağlı olduğu uzak Git deposunun adıdır. Bu komut, uzak sunucudan güncellemeleri almayı sağlar. 
Origin de uzak sunucuyu ifade etmek için kullanılan bir isimdir.

------------------------------------------

5. "HEAD" kelimesi neyi temsil etmektedir?

Commit işlemini işaret eden yapıya HEAD denir. Bazen bağlı olduğu branch'e işaret etse de genellikle en son atılan commiti işaret eden yapıdır.

------------------------------------------

6. "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?

Staging Area ya da Index, Git'in local ile sunucu arasında bir ara bölgedir.
Dosya üzerinde yapılan değişiklikler doğrudan commit yaparak projeye entegre edilmez. Değişiklikler committen önce Staging Area'ya eklenir.
Bu nedenle proje üzerinde yapılmak istenen değişiklikleri belirleme imkanı tanır. Commit işlemi yapmadan önce developer'a kontrol etme şansı tanır.

------------------------------------------

7. "Untracked file" ne demektir?

Takip edilmeyen dosya demektir. Local'de bulunan ancak commitlenmeyen dosya için kullanılır. Commitlenmediği için git tarafından takip edilmemektedir.
Bu dosyaları git tarafından takip edilebilmesi için, git add komutu il Staging Area'ya eklenmesi gerek. 
Sonrasında dosyalar Staged durumuna geçer ve bir sonraki commit işlemiyle projeye dahil edilir.

------------------------------------------

8. ".git" klasörünü silersek ne olur?

.git klasörü silindiğinde projeye dair yapılan tüm değişikikleri kaydeden bilgiler gitmiş olur. Projenin tüm geçmişini silmiş oluruz. 

------------------------------------------

9. Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?

-"ReadMe.md" dosyasını kullanarak
-Git'in template özelliğini kullanarak

------------------------------------------

10. Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?

Branch'ler projeyi dallara ayırır. Her bir branch projenin farklı versiyonlarını temsil eder. Birden fazla kişi ile çalışan takımlar için oldukça önemlidir. Bu sayede takımlar birbirinin yaptğı değişikliklerden etkilenmez ve bağımsız çalışabilirler.
Branch'ler birden fazla özelliğin aynı anda geliştirlmesini sağlar. 
Projede geliştirilecek olan versiyonların ana projeye zarar vermemesini sağlar.

------------------------------------------

11. Sıfırdan bir "branch" nasıl oluşturabiliriz?

"git branch yeni_branch_adı" komutu ile yeni bir branch oluşturulabilir.

------------------------------------------

12. Var olan bir "branch"e nasıl geçebiliriz?

"git checkout var_olan_branch_adı" komutu ile var olan branch'e geçilebilir.

------------------------------------------

13. "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?

"git clone --single-branch" komutu ile sadece o branch'in geçmişi alınırç Projedeki diğer branch'ler indirilmez.

------------------------------------------

14. "Merge conflict" ne demektir?

Git'te iki veya daha fazla farklı kaynaktan gelen değişikliklerin birleştirilirken karşılaşılan bir çakışma durumunu ifade eder. Böyle bir anda git hangi değişikliklerin kabul edileceğini otomatik olarak çözemez.
Dolayısıyla developer'ların çakışan dosyaları elle düzeltmesi gerekir.

------------------------------------------

15. "git log" komutu ile hangi bilgileri görebiliriz?

Commitleri görmemizi sağlar. Her bir yapılan commit işlemi için hashcode verir. Yapılan iki ayrı commit ya da iki farklı branch arasındaki farkları da hashID denilen kodlarla görürüz.

------------------------------------------

16. "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?

- İki farklı commit arasındaki değişiklikleri görme
- Staging Area'daki dosyaları, mevcuttaki güncel Git'te bulunan hallerinden farklarını görme

------------------------------------------

17. Git reset ile neyi geri alıyoruz?

Dosyayı Staging Area'dan çıkarmadır. Bu işlem dosyalar üzerindeki yapılan işlemi geri almaz. Sadece Staging Area'dan çıkarma yaparç Dosya içeriğine dokunmaz.

