Q1)Git Nedir

Git,dağıtık version kontrol sistemi ve kaynak kod yönetim aracıdır.Bizim yazılım geliştirme sürecimizde,projelerimizi izlemek,değişikliklikleri yönetmek,işbirliği yapmak ve geçmiş versiyonlara geri dönmek için kullanılır.En basit tanımıyla bir versiyon kontrol sistemi olarak düşünebiliriz.Versiyonlarına ayırmak istediğimiz herhangi birşey var ise git kullanımını rahatça yapabiliriz.Metinleri,görselleri,belgeleri etkili bir şekilde git ile yönetebiliriz.
=================================================================================================================================================================

Q2)"git pull" ile "git fetch" komutlarının farkı nedir?

Öncelikle tanımlayalım,bu iki komut da remote repodaki değişiklikleri almak için kullanılan iki farklı git komutudur.Bu kodların ikisi de uzak repodaki güncellemeleri indirmemize olanak verir fakat aralarında önemli farklar vardır.

Git Fetch komutu uzak repodaki değişiklikleri indirir ve localda güncel bir kopyasını oluşturur fakat bu,local çalışma dizinimizi değiştirmez,mevcut çalışmamızı etkilemez.Bizim local kopyamız'ı güncellemez,sadece "bak remote repoda değişiklikler oldu haberin olsun" şeklinde çalışır.

Git Pull ise aslında git fetch + git merge gibi düşünebiliriz.Git pull remote repodaki değişiklikleri indirir,ve bu değişiklikleri local branchimiz ile birleştirir.Bu aynı zamanda local repomuzu da günceller.Yani, temel fark, git fetch ile sadece uzak depodaki güncellemelerin alınması ve yereldeki dosyaların güncellenmemesi, git pull ile ise uzak depodaki güncellemelerin alınması ve yerel dosyaların otomatik olarak güncellenmesidir.

=================================================================================================================================================================

Q3)Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?

Öncelikle takım arkadaşımız kodu commitlemiş fakat remote repoya push etmemiş olabilir.
Remote repoda herhangi bir bağlantı problemi olmuş olabilir.
Bizim remote repoya erişim iznimiz olmayabilir.

=================================================================================================================================================================

Q4)"HEAD" kelimesi neyi temsil etmektedir?

HEAD genel olarak çalıştığımız branch üzerinde atılan en son commiti işaret eder.Bu nedenle HEAD, kullanıcının çalışma dizininideki en son değişiklikleri temsil eder.Git komutlarını kullanırken HEAD,genellikle mevcut konumumuzu ifade etmek için kullanılır.

=================================================================================================================================================================

Q5)"Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?

Bu bölge aslında bizim yaptığımız değişikliklerin commitlenmeden önceki bulunduğu ara bir alandır.Bu,kullanıcının commit yapmadan önce değişiklikleri görmesine ve istenmeyen değişikliklerin yanlışıkla dahil edilmesini önlemesine olanak tanır.git add komutu ile dosyaları staging area'ya ekleyebiliriz.

=================================================================================================================================================================

Q6)"Untracked file" ne demektir?

Untracked file,git repomuzda izlenmeyen dosyaları ifade eder.Yani kısa tabirle biz git status yazdığımızda Untracked file yazısı görüyorsak o dosyayı git takip etmiyordur.Yeni oluşturulan dosyalar genellikle izlenmeye başlanmazlar.Bu dosyaları biz git add komutu ile staging area'ya ekleyerek tracked edilmesini sağlarız.Ayrıca projenin gereksinimine bağlı olarak da,belirli dosyaların izlenmesini veya izlenmemesini sağlamak isteyebiliriz.

=================================================================================================================================================================

Q7)".git" klasörünü silersek ne olur?
Bu klasör bizim bütün git bilgilerimizin bulunduğu bir klasördür ve çok önemlidir.Git reposunun temel yapıtaşıdır ve git tarafından yönetilen bir projenin tüm bilgilerini içeren bir dizidir.Eğer .git klasörünü silersek bütün git geçmişimizi sileriz.Bu sebeple bu dosyayı silerken dikkatli olmalıyız.

=================================================================================================================================================================

Q8)Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?

Öncelikle bilgisayarımızda bir metin düzenleyicisi açmamız gerekiyor.İçeriği istediğimiz şekilde düzenleyebiliriz.Örneğin,şablon "Readme.md" dosyası oluşturup içeriğine birşeyler yazabiliriz.Sonrasında dosyayı "Readme.md" olarak kaydederiz.Sonrasında git'in varsayılan şablon dizinini bulmamız gerekiyor.Buna git'in yüklü olduğu yerden ulaşabiliriz.Git->mingw64->share->git-core->templates kısmına ulaştığımızda oluşturduğumuz "Readme.md" dosyasını buraya kopyalayabiliriz.Artık herhangi bir git init komutu çalıştırdığımızda,git otomatik olarak bu "Readme.md" dosyasını yeni oluşturulan repo içindeki .git klasörünün içerisine ekleyecektir.

=================================================================================================================================================================

Q9)Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?

Git branch yapısı,bize projenin farklı çalışma yollarını,geliştirme süreçlerini veya özellikleri izlememizi sağlar.Türkçe çevirisi "dal" demektir.Her bir branch,projenin bir versiyonunu temsil eder ve ana branch(genellikle main veya master olarak adlandirilir) üzerinden ayrılan bir geliştirme hattıdır.Bu,bir projenin farklı sürümlerini ve değişikliklerini izlemeyi kolaylaştırır.Branch yapısın bizlere çeşitli avantajlar sağlar.Bu avantajlardan ilki farklı ekipler ve geliştiricler ile aynı anda farklı özellikler veya düzeltmeler üzerinde çalışabiliriz.Her biri kendi branchinde değişiklikleri yapar daha sonra bu değişiklikleri main branch ile birleştirirler.İkinci olarak yeni bir feature deniyorsak,bu feature'yi ayrı bir branchde projenin gidişatını bozmadan test edebiliriz,eğer uygun bir durum olursa da main branchle birleştirebiliriz.Üçüncü olarak ise herhangi bir branch üzerinde yaptığımız değişikliklerin main branchi etkilemediğinden dolayı geri alınması veya değiştirilmesi daha kolaydır.Bu şekilde riskler azaltılır ve çeşitli denemeler yapılabilir.Son olarak akıllarda canlanması için branch yapısını otoyola eklenen yan yollar olarak düşünebiliriz.Bu durumda bir adet ana otoyol vardır ve çeşitli yan yollar vardır.Bu yan yollar en sonunda otoyol'a bağlanır.Burada, yan yolları branchler,ana otoyolu ise main branch olarak düşünebiliriz.

=================================================================================================================================================================


Q10)Sıfırdan bir "branch" nasıl oluşturabiliriz?

Örnek vermem gerekirse "git branch feature" komutunu kullanarak yeni bir branch oluşturabiliriz.

=================================================================================================================================================================

Q11)Var olan bir "branch"e nasıl geçebiliriz?

Bu kısımda da örnek vermem gerekirse "git checkout feature" komutunu kullanarak,varolan bir branche geçiş yapabiliriz.Fakat bu noktada yukarıdakı soruyla bu soruyu da birleştiren bir komut bulunmaktadır.Yani örneğin biz master branchinde bulunalım ve tek bir komutla hem yeni bir branch oluşturup hem de o branche geçiş yapmak isteyelim.Bu işlemi gerçekleştirmek için "git checkout -b feature" komutunu kullanabiliriz.Bu komut hem feature adında bir branch oluşturur,hem de oluşturduğumuz feature branchine geçiş yapar.

=================================================================================================================================================================

Q12)"git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?

Burda git clone komutunu kullanarak belirli spesifik bir branch'i çekmek istiyorsak, "-b" veya "--branch" flag'ini kullanabiliriz.Taslak olarak komut'u şöyle gösterebiliriz: "git clone -b <branch_adi> <repository_url>".Hemen bir örnek verelim.Örneğin remote repoda yer alan development adında bir branchi çekmek istiyoruz.Bu durumda yazmamız gereken komut "git clone -b development <repository_url>".İşte bu şekilde sadece belirli bir branchi localimize çekerek,projenin tüm tarihini ve diğer branchlerini çekmekten kaçınabiliriz.Büyük çaplı projelerde ve sadece spesifik bir branche'e ihtiyaç duyduğumuz durumlarda faydalı olabilir.

=================================================================================================================================================================

Q13)"Merge conflict" ne demektir?

Merge conflict dediğimiz olay,farklı branchlerdeki değişiklikleri birleştirirken(merge) karşılaştığımız durumdur.Türkçe anlamına baktığımızda ise çakışma olduğunu görürürüz.Merge conflict'in birden fazla sebebi olabilir.İlk olarak 2 farklı branchte aynı dosyada aynı satırda değişiklik yaparsak conflict gerçekleşebilir.İkinci olarak bir branchdeki silinmiş bir dosyanın diğer branchde değiştirilmiş olması durumunda,üçüncü olarak ise bir branchte bir dosyanın tamamen silinip,diğer branchde ise o dosyanın değiştirilmiş olması durumda conflict yaşanabilir.Merge conflict gerçekleştiği durumda müdahale etmemiz gerekir.Git,çakışan dosyaları işaretler ve geliştiriciye hangi dosyalarda ve hangi satırlarda çakışma olduğunu gösterir.Bizler,bu çakışmayı çözmek için dosyaları düzeltebilir ve daha sonra birleştirme(merge) işlemini tamamlayabiliriz.

=================================================================================================================================================================

Q14)"git log" komutu ile hangi bilgileri görebiliriz?

Öncelikle git log komutunun ne işe yaradığıyla başlayalım.Bu komut,bizim repoda yaptığımız commitleri listelemek için kullanılır.Commit geçmişini ve her bir commit için bazı detayları bize gösterir.

		commit 94f5a1e7f65cb8ec189b8c8295d43ec0feb505e5 (HEAD -> feature/ardaisitan)
		Author: Arda Işıtan <arda_isitan55@hotmail.com>
		Date:   Fri Feb 9 13:24:56 2024 +0300

    	Question13 Answered

    Örneğin yukarıdaki committe,ilk kısımda commit hash  dediğimiz commit'in benzersiz kimliğini gösterir.Her bir commit benzersiz bir  kimliğe sahiptir.Author kısmında ise commit atan kişinin kullanıcı adı ve email bilgilerini gösterir.Date kısmında ise commitin atıldığı tarihi ve saati gösterir.Son olarak en aşağıda ise commit atan kişinin commit mesajını bize gösterir.

=================================================================================================================================================================

Q15)"git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?

git diff ile working directory yani bizim çalışma alanımızdaki değişiklikleri görebiliriz,ikinci olarak staging areaya alınan dosyalar ile son yapılan commit arasındaki değişiklikleri görebiliriz,üçüncü olarak iki farklı commit arasındaki değişiklikleri görebiliriz,dördüncü olarak iki farklı branch arasındaki değişiklikleri görebiliriz,son olarak ise sadece belirli bir dosya üzerindeki değişiklikleri görebiliriz.


=================================================================================================================================================================

Q16)Git reset ile neyi geri alıyoruz?

git reset ile staging area bölgesine eklediğimiz dosyaları,geri working directory(çalışma dizini)'e alıyoruz.Fakat bu komutta dosyaların içeriği değişmez,sadece git add ile staging area'ya eklediğimiz değişiklikleri o alandan çıkartma işlemidir.

=================================================================================================================================================================


Q17)"git commit" ile "git push" arasındaki fark nedir?


git commit,bizim git add ile staging area'ya aldığımız değişiklikleri bir adım öteye götürerek local repomuza dahil eder.Commit oluşturduğumuzda ise,değişiklikler local olarak depolanır ve projenin geçmişinde bir nokta olarak işaretlenir.git push ise local repomuzda bulunan commitleri,remote(uzak) bir git reposuna göndermemizi sağlar.Yani bizim localde yaptığımız değişiklikleri paylaşmak ve diğer geliştiricilerle işbirliği yapmak için kullanılır.

=================================================================================================================================================================


Q18)Atomic commit ne demektir?
Atomic commit, bir yazılım projesinde yapılan bir değişiklik setinin, tek bir mantıklı iş birimi temsil etmesi anlamına gelir. Bu, bir commit içindeki değişikliklerin birbirleriyle bağlantılı ve bağımlı olmalarını ifade eder. Atomic commit prensibi, her bir commit’in bağımsız ve bütünlüğe sahip olmasını sağlar.Kısacası projelerimizde commit atarken,her bir adımı tek bir commit içinde değil, ayrı ayrı commitler şeklinde atmalıyız.

=================================================================================================================================================================


Q19)Repository ne demektir?

Git özelinde,git repository bir projenin tüm kaynak kodlarını,dosyalarını,geçmişini ve diğer ilgili bilgileri içeren bir yapıdır.Bilgisayarımızda birden fazla git reposu oluşturabiliriz.Her git'i kullanmak istediğimizde git'e yeni bir repo oluşturmasını söylememiz gerekir.Fakat bu kısımda,her git reposununu kendi geçmişi vardır ve  birbirlerinden bağımsızdır.

=================================================================================================================================================================

Q20)git tag" nedir? "git branch"’ten farkı nedir?

"git tag" komutu belirli commit üzerine etiket eklemek veya belirli bir commite isim vermek için kullanılır.Bu, genellikle sürüm numaraları veya yayın adları gibi belirli bir işaretleme ihtiyacı olduğunda kullanılır. Etiketler, projenin belirli bir noktasını işaretlemek ve bu noktaya kolayca dönebilmek için kullanışlıdır.

Örnek olarak git tag v1.0 dediğimizde "v1.0" etiketi oluşturulur.

Farklarına gelirsek,git tag belirli bir commit üzerine etiket eklemek için kullanılırken,git branch farklı geliştirme hatları oluşturmak ve yönetmek için kullanılır.

git tag kullanırsak belirli commit üzerine işaretleme yaparız ve bu işaret o commiti belirtir,herhangi bir değişim olmaz.git branch'de ise oluşturduğumuz branchler projenin farklı geliştirilme yollarını temsil eder ve her biri bağımsız bir geliştirme ortamı sağlar.

git tag genellikle belirli sürümleri veya yayınları işaretlemek için kullanılırken,git branch farklı özelliklerin veya geliştirilme süreçlerinin izlenmesi için kullanılır.

=================================================================================================================================================================

Q21)Git'i görsel olarak kullanabilmek için hangi üçüncü taraf araçları ve uygulamaları kullanabiliriz?

Burda git'i görsel olarak kullanmak için gitkraken,Github Desktop,Source Tree, GitAhead,Tower gibi uygulamaları kullanabiliriz.Bunlar gitin temel işlevlerini görsel bir arayüzle bize sunar ve projelerimizi daha kolay yönetmemizi sağlayabilir.

=================================================================================================================================================================

Q22)"GitHub" ile "git" arasındaki fark nedir? GitHub benzeri diğer siteler nelerdir? GitHub veya diğer sitelerdeki kullanıcı adlarını yazar mısınız?

Git bizim proje geliştirirken kullandığımız dağıtık bir sürüm kontrol sistemidir.Proje dosyalarımızın sürüm geçmişini izlemek,değişiklikleri yönetmek ve işbirliği yapmak için kullanılır.Yerel(Local) bilgisayarımızda çalışır ve repolarımızı yönetir.Github ise git tabanlı yazılım geliştirme platformudur.Bizim git repolarımızı barındırır,projelerimizi sergileyip diğer geliştiricilerle işbirliği yapmamızı sağlar.Github web tabanlı bir hizmettir.

Github benzeri diğer sayfalara örnek olarak Gitlab,Bitbucket verilebilir.

Github Kullanıcı Adım :ArdaIstn

=================================================================================================================================================================


Q23)main ya da master branch'inin diğer branchlerden farkı nedir?

Main ya da master branchi bizim projemizde temel geliştirme hattını temsil eder.Yani bizim projemizin asıl gidişatını belirleyen branchdir.Biz yeni bir branch oluşturduğumuzda amacımız,belirli bir özelliği,bir düzeltmeyi veya başka bir deneyi geliştirme sürecinde izlemek için kullanılırken, main ya da master branchi projenin üzerindeki ana ve kararlı geliştirme yönünü temsil eder.Main ya da master branchi proje üzerindeki ana kaynak kodunu içerir.Diğer oluşturduğumuz branchler ise main ya da master branchinin dışında belirli bir işlevselliğin veya bir özelliğin geliştirilmesi için kullanılır.Bu nedenle main ya da master branchinde yapılan değişiklikler proje üstünde daha geniş bir etkiye sahip olabilirken diğer branchler genellikle daha dar kapsamlıdır.Diğer oluşturduğumuz branchler geçici olarak kullanılır ve merge işleminden sonra genellikle kapatılır veya silinir.


=================================================================================================================================================================


Q24)".gitignore" dosyası nedir ve ne amaçla kullanılır?

".gitignore" dosyası,git tarafından izlenmesini istemediğimiz  dosyaları ve klasörleri belirtmek için kullanılan dosyadır.Projenin kök dizininde bulunur ve 	git'e hangi dosyaların veya klasörlerin izlenmemesi gerektiğini söyler.Bu dosyanın kullanım amacı ise,bazı dosyaların veya dizinlerin projenin geçmişini kirletmesi ve gereksiz yere yer kaplamasını önlemektir.Ayrıca hassas dosyaların paylaşılmasını önlemek için de kullanılır.


=================================================================================================================================================================

Q25)"git push origin --delete branch_name” nedir ve ne için kullanılır?

Bu komut bizim "origin" denen uzak repoda bulunan bir branchi silmemizi sağlayan komuttur. Bu komut genellikle artık kullanılmayan veya gereksiz hale gelen bir dalın temizlenmesi veya birleştirme işlemleri sonrasında gereksiz dalların kaldırılması için kullanılır.Ancak,dikkatli kullanılmalıdır çünkü silinen bir dal geri getirilemez.

=================================================================================================================================================================


















