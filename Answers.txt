1. Git Nedir?
Git bir versiyon kontrol sistemidir. Kurulu olduğu yerde değişiklikleri versiyonlamak, takip etmek gibi işlemleri yürütmek için kullanılır.

2. "git pull" ile "git fetch" komutlarının farkı nedir?
git fetch; Remote Repository'deki değişikliklerden Local Repository'yi haberdar eder, Local'deki kodlarımızda değişiklik olmaz. git pull ise önce git fetch gibi Remote'dan Local'e çeker, sonra git merge/git rebase gibi Local'den Working Directory'ye aktarır. Her zaman önce git fetch ile bir kontrol sağlayıp sonrasında git pull yapmak sağlıklıdır.

3. Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?
Takım arkadaşımız git commit yapmış ancak git push yapmayı unutmuş olabilir.

4. "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
'origin' ifadesi Remote Repository'ye (örneğin GitHub'ta bir repo) karşılık gelmektedir.

5. "HEAD" kelimesi neyi temsil etmektedir?
HEAD son atılan commit'i ya da o anki branch'i işaret eder. Genelde en son gönderilen commit'i işaret eder.

6. "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
"Index/Staging Area" yapılan değişikliklerin Local Repository'ye gönderilmeden yani commit atılmadan önce koyulduğu ara bölgedir. Bu bölge sayesinde değişiklikleri commit'lemeden önce değişikliklere ekleme-çıkarma yapabiliriz, atacağımız commit'e son şeklini verebiliriz. Gerçek hayattan örnek verecek olursak; alışverişte kullandığımız sepet Staging Area, alışveriş bittiğinde sepettekileri topluca kasadan geçirme işlemi commit işlemidir.

7. "Untracked file" ne demektir?
Working Directory'de değişiklik yapıldığında git status ile mevcut durum kontrol edilirse, üzerinde değişiklik yapılan dosyaların "Untracked" olduğu görülür. Bu ifade ilgili dosyaların Git tarafından takip edilmediği anlamına gelir. git add komutu ile değişiklikler Staging Area'ya alınırsa dosyalar artık "Tracked" yani takip edilir olmuş demektir.

8. ".git" klasörünü silersek ne olur?
Çalışma alanındaki git ile ilgili tüm bilgileri kaybederiz. Git'i kullanacaksak tekrar initialize etmemiz gerekir.

9. Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
Bir template oluşturduktan sonra git'i başlatırken git init --template <template-konumu> komutu ile yapabiliriz.

10. Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
Farklı kişilerin çalışmalarının karışmasını önler. Herkes projenin bir parçasıyla ilgili çalışır ve kendi branch'inde değişiklikler yapar. Sonra bu değişikliklerden uygun olanları ana branch'e alınır yani projenin ana kodlarına uygulanır. Eğer herkes aynı branch'te çalışsaydı ve bir parçada birden fazla kişi değişiklik yapıyor olsaydı çakışmalar yani conflict'ler meydana gelirdi.

11. Sıfırdan bir "branch" nasıl oluşturabiliriz?
git branch <branch-adı> komutu ile sıfırdan branch oluşturulabilir.

12. Var olan bir "branch"e nasıl geçebiliriz?
git checkout <branch-adı> komutu ile var olan branch'e geçilebilir.

13. "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?
git clone --branch <branch-adı> <uzak_repo_linki> komutu ile spesifik bir branch çekilebilir.
Ayrıca git clone --single-branch <branch-adı> <uzak_repo_linki> komutu ile branch'in sadece history'si (loglar) çekilebilir.

14. "Merge conflict" ne demektir?
Bir projede değişiklik yaptığımız parça, git pull yapacağımız branch'te de değiştirilmiş olabilir. Bu durumda merge conflict ortaya çıkar. Hangi branch'teki değişikliklerin önemli olduğu belirlenir ve o merge edilir.

15. "git log" komutu ile hangi bilgileri görebiliriz?
Yaptığımız commit'lerin commit mesajı, hash code, kişi, mail, tarih bilgilerini görebiliriz.
