1) Git Nedir?

Git açık kaynaklı bir versiyon kontrol sistemidir. Versiyon kontrol sistemleri bir çalışma alanındaki değişiklikleri kayıt altına alır. Bu şekilde değişiklikler izlenip yönetilebilir. Aynı zamanda Git sayesinde aynı projede birden fazla kişinin çalışma yapması kolaylaşır.

-------------------------

2) "git pull" ile "git fetch" komutlarının farkı nedir?

git fetch komutu uzak depodaki güncellemeleri localdaki depomuza getirir ancak dosyalarda herhangi bir değişiklik oluşturmaz.

git pull komutu ise uzak depodaki değişiklikleri direkt olarak locakdeki depomuzla birleştirir. Bazen bu durumda conflict oluşma ihtimali vardır. Conflicti çözmek için gerekli aksiyonları almamız gerekir.

-------------------------

3) Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?

- Arkadaşınız ile farklı dallarda çalışıyor olabilirsiniz. Eğer böyle bir durum varsa "git pull" işlemi yaparken spesifik olarak o dalı belitebiliriz.
git pull origin BranchName

- Arkadaşımız dalgınlıkla "git push" işlemi yapmayı unutmuş olabilir.

- Yanlış dizinde git komutu çalıştırıyor olabiliriz.

- Localdeki depomuzun son yapılan değişikliklerden haberi olmayabilir. Bunu aşmak için "git fetch" veya "git remote update" komutu kullanılabilir.

-------------------------------

4) "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?

origin genelde bir referans isim olarak kullanılır. Bu durumda origin kelimesi uzak sunucudaki depoyu temsil etmektedir.

-----------------------------

5) "HEAD" kelimesi neyi temsil etmektedir?

"HEAD" üzerinde değişiklik yaptığımız commiti ve üzerinde çalıştığımız branchi gösteren bir referanstır.

----------------------------------

6) "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?

Çalışma dizininde yapılan değişikliklerden kaydedilmek istenenler "git add fileName" komutu ile "Staging Area" bölgesine taşınır. Bu bölge bir geçiş bölgesidir. En son aşamada değişiklikleri istersek kaldırabilirz istersek de "git commit" komutunu kullanarak değişiklikleri kaydedebiliriz. Tabii ki commit işlemi istenilirse gerekli komutlar kullanılarak geri alınabilir.

---------------------------------------

7) "Untracked file" ne demektir?

Bu dosyalar git tarafından izlenmezler. Dosya üzerindeki hehrangi bir değişikliği "git status" ile göremeyiz. Dosyalar "git push" ile uzak depoya gönderilmez. Bu dosyalar yalnızca localde durur.

---------------------------------------

8) ".git" klasörünü silersek ne olur?

Çalışma dizinindeki git deposu silinmiş olur ve git tarafından kaydedilen tüm bilgiler silinir. Commit bilgileri, branch bilgileri gibi tüm bilgiler silinir. Bu yüzden de git'in sağlamış olduğu tüm avantajları kaybederiz.

---------------------------------------

9) Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?

Bunun için git template yapısını kullanabiliriz. Windows için aşağıdaki adımları uygulayabilirsiniz.

- %USERPROFILE%/.gitconfig dosyanızı açın. (Dosya yoksa oluşturun.)
- "%USERPROFILE%" değişkeni kullanıcı profili klasörünün yoludur.
- Dosyanın sonuna aşağıdaki metni ekleyin.

[init]
	templatedir = %USERPROFILE%\.git-templates

- %USERPROFILE%/.git-templates klasörünü oluşturun ve içerisine otomatik oluşturulmasını istediğiniz README.md dosyasını ekleyin.

Bundan sonra "git init" komutu çalıştırıldığında proje klasöründeki ".git" klasörünün içersinde README.md dosyanız otomatik olarak oluşturulacaktır.

---------------------------------------

10) Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?

Branch yapısı projenin ana dosyalarını bozmadan projede istediğimiz her türlü değişikliği yapmamıza olanak tanır. Herhangi bir hata durumunda main/master branchine dokunmadığımız sürece main/master branchindeki ana proje yapısı korunur. Bu da güvenli bir biçimde projeye deneysel özellikler eklenmesine olanak tanır.

---------------------------------------

11) Sıfırdan bir "branch" nasıl oluşturabiliriz?

git branch NewBranch






















































































