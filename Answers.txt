
Answer to question 1:
    git: Dosyalar üzerinde versiyonlama yapabilmeyi sağlar. Dosyalar üzerinde birden çok kişi
    çalışıyorsa takibi kolaylaştırır. (VCS, Versiyon kontrol sistemi)

Answer to question 2:
    git fetch: uzak sunucuda olan değişiklikleri sadece bildirir. Haber verir, localde
    çalıştığımız dosyada bir değişiklik yapmaz.
    git pull: fetch gibi değişiklikleri bildirir fakat aynı zamanda değişiklikleri localde
    çalıştığımız dosyaya çeker.

Answer to question 3:
    1- Uzak sunucuya erişimim olmayabilir. Bu durumda pull komutu geçersiz kalır.
    2- Takım arkadaşımın gönderdiği depo ile benim localimdeki deponun bağlantısında uyuşmazlık
    yaşanmış olabilir. Uzak depoları kontrol edebiliriz.
    3- Çakışma (Conflict) yaşanıyor olabilir. Takım arkadaşımın değiştirdiği kısım ile benim
    çalıştığım kısımdaki değişiklikler çakışıyorsa da pull işlemi başarısız olur. Çakışma durumunu
     çözmek gerekir.
    4- pull yapmadan önce değişikliklerden haberdar olmak için fetch komutunu kullanmamış olabilirim.
    5- Takım arkadaşım localinde yaptığı değişiklikleri commitlemiştir fakat yaptığı değişiklikleri
    uzaktaki sunucuya gönderme aşamasını atlamış olabilir. (git push kullanarak bu sorunu
    çözebiliriz)

Answer to question 4:
    origin : git deposunun varsayılan remote repository referansıdır. fetch origin komutuyla
    varsayılan uzak depodan değişiklikleri alırız.

Answer to question 5:
    Head: Üzerinde çalışılan branch'ın son commitlerini temsil eder. Çalışılan son sürüm.

Answer to question 6:
    Staging Area: Localde yaptığımız değişiklikleri commitleyerek staging area kısmına almış oluruz.
    Githuba eklemez fakat ara bölgeye ekler. Remote sunucuda gözükmez (push'layana kadar).

Answer to question 7:
    Untracked file:Localde bir dosya oluşturulduğunda git'e eklenmediği zaman bu dosya git
    tarafından takip eidlemez. Bu dosyaya untracked file denir. add komutu ile staging area'ya
    eklenirse takip edilebilir hale gelir.

Answer to question 8:
    git klasörü -> deponun tğm geçmişini, dallarını, ayarlarını içerir. Silersek geçmiş silinir,
    deponun yönetimi kaybedilir, depo artık git olmaz, değişiklikleri de geri alamayız.

Answer to question 9:
    ############# Bu sorunun cevabından çok emin olamadığım için biraz araştırıp deneyerek cevabımı
    güncelleyeceğim. #############

Answer to question 10:
    branch:dal, projenin paralelde farklı çalışma alanlarını temsil eden geliştirme çizgisidir.
    head ın kopyasını alarak, bu kopya üzerinde yeni değişiklikler yapılır. Her branch bağımsız bir
    geliştirme yolunu temsil eder.

Answer to question 11:
    yeni branch oluşturmak için ->>> git branch [branch-name] komutu kullanılır. Komut yerine
    projenin yardımcı toolları üzerinden de git başlığı altından yeni bir branch oluşturulabilir.

