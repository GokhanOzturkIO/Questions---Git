
/*
*
* Answers format in this file is structured to provide both my response
* and the correct answer for each question in a clear and organized manner.
* 
* ## symbol represents my answers
* >> symbol represents the correct answer
* 
* Hopefully with the application of atomic commit message format. 
*
* Note: Correct answers are from ChatGPT 3.5 with this prompt:
*
* "Can you explain '<Question here>' as a mid or senior developer with a sentence or two?"
*
*/

*******************************************************

Q1 - What is Git? 

## Git is a Version Control System that helps developers to collaborate with other people and work with an ease of knowing that they can undo or revert things.

>> Git is a distributed version control system that empowers developers to track changes, collaborate seamlessly, and manage code effectively, serving as a cornerstone of modern software development workflows.

*******************************************************

Q2 - What is the difference between the 'git pull' and 'git fetch' commands?

## The difference lies in merging the changes into the current branch. Git fetch only retrieves the changes, while git pull also performs the merge. 

>> git pull updates your local branch with changes from the remote repository and automatically merges them, while git fetch retrieves the changes from the remote but leaves them in your local repository for you to merge or review manually.

*******************************************************

Q3 - If our teammate says, 'I've pushed my code, continue with my development,' and we can't fetch their code using 'git pull,' where might we have gone wrong?

## I would verify whether my teammate had pushed the code by reviewing the git log.

>> If our teammate claims they've pushed their code but we can't fetch it with 'git pull,' it suggests a potential oversight on their part, such as forgetting to push to the correct branch or failing to synchronize their local changes with the remote repository before pushing.

*******************************************************

Q4 - What does "origin" represent in the "git fetch origin" command?

## Remote repository.

>> In the context of the "git fetch origin" command, "origin" typically refers to the default remote repository from which the local repository was cloned or with which it is associated, allowing developers to retrieve any changes made to the remote repository since the last fetch or pull operation.

*******************************************************

Q5 - What does the word "HEAD" represents?

## Checked-out branch's latest commit.

>> In Git, 'HEAD' is a reference to the current commit in the repository, serving as a pointer to the tip of the currently checked out branch or the specific commit being worked on.

*******************************************************

Q6 - What does the region called 'Staging Area' or 'Index' exactly mean?

## It's the area where you decide which changes from your local files will be pushed to the server.

>> The 'Staging Area' or 'Index' in Git refers to a transitional area where changes are prepared before committing to the repository, allowing developers to selectively stage modifications for inclusion in the next commit.

*******************************************************

Q7 - What does 'Untracked file' mean?

## The files which we did not add to git.

>> "Untracked file" refers to a file in a Git repository that is not currently being tracked by Git. This means that Git is unaware of any changes made to the file, and it will not be included in commits or pushed to the remote repository unless explicitly added to the staging area using the "git add" command.

*******************************************************

Q8 - What happens if we delete the ".git" folder?

## That means we lose the files which tracked by git.

>> If we delete the ".git" folder in a Git repository, we effectively remove all version control information and history associated with that repository, rendering it no longer recognized as a Git repository.

*******************************************************

Q9 - If we want a 'ReadMe.md' file to be automatically created every time we use the 'git init' command in our local repository, what should we do?

## I think we can use a template, but I have never used it so...

>> To ensure that a 'ReadMe.md' file is automatically created whenever we initialize a new Git repository using the 'git init' command, we can utilize Git templates by customizing the default template directory or by creating a custom Git template.

*******************************************************

Q10 - What is the 'branch' structure mentioned in Git? What does it provide us?

## Branch is way to clone the code and work freely without changing the actual production code. 

>> In Git, a branch is a parallel line of development that allows developers to work on separate features or fixes without impacting the main codebase, providing a structured way to manage and collaborate on code changes.

*******************************************************

Q11 - How can we create a 'branch' from scratch?

## git branch <branchname>

>> To create a branch from scratch in Git, you can use the "git checkout -b <branch-name>" command, where "<branch-name>" is the name you want to give to your new branch, allowing you to start working on a new feature or bug fix independently of the main codebase.

*******************************************************

Q12 - How can we switch to an existing 'branch'?

## git checkout <branch-name>

>> To switch to an existing branch in Git, you can use the command "git checkout <branch-name>", where "<branch-name>" is the name of the branch you want to switch to, enabling you to continue your work on that specific branch or review its content.

*******************************************************

Q13 - How can we specifically fetch only a certain branch when using the 'git clone' command?

## ¯\_(ツ)_/¯

>> When using the 'git clone' command, you can fetch only a specific branch by appending the '--single-branch' flag followed by the branch name, ensuring that only the history related to that branch is cloned, which can significantly reduce download time and repository size.

*******************************************************

Q14 - What does 'merge conflict' mean?

## It refers to the conflicts while you are merging your code either other branches. 
 
>> A merge conflict occurs in Git when there are conflicting changes between the branches being merged, requiring manual intervention to resolve the discrepancies before the merge can be completed successfully.

*******************************************************

Q15 - What information can we see with the 'git log' command?

## Last commits

>> With the 'git log' command, developers can view the commit history of a Git repository, including details such as commit hashes, authors, timestamps, commit messages, and the changes introduced in each commit, providing valuable insights into the project's development timeline and the contributions made by various team members.

*******************************************************

Q16 - How many different changes can we see between two states using 'git diff'?

## Valla me confusion (・_・ヾ. We can compare between the latest changes with the last commit, same folder with  other branches?
 
>> With 'git diff', developers can view the differences between two states, such as between the working directory and the staging area, or between the staging area and the last commit, allowing them to review changes before committing and track modifications made to the codebase.

*******************************************************

Q17 - What do we revert with 'git reset'?

## Staged area files.

>> With 'git reset', we revert changes to the staging area or the commit history, allowing us to undo commits, unstage files, or reset the current branch pointer to a specific commit, effectively rewinding the repository's state to a previous point in time.

*******************************************************

Q18 - What is the difference between 'git commit' and 'git push'?

## When we commit something it's still stays in our local, it is not in the remote server until we push the code.

>> When you use 'git commit', you're recording changes to the local repository, essentially saving your work in a local snapshot. On the other hand, 'git push' is used to upload your local repository changes to a remote repository, making them accessible to others or syncing your work across different machines.

*******************************************************

Q19 - What does 'atomic commit' mean?

## What I'm trying in this branch. Pls let me know if I make it right or not. Hello? Is there anyone reading this? (._. )( ._.)

>> An atomic commit refers to the practice of making a single, self-contained commit that represents a single logical change or unit of work, ensuring that each commit is independent, complete, and focused, which improves code review, collaboration, and version control management.

*******************************************************

Q20 - What does 'repository' mean?

## Version Controlled Project.

>> A repository, in the context of software development, refers to a central location where version-controlled files and their history are stored, enabling collaboration, tracking changes, and managing project codebase across multiple contributors and development stages.

*******************************************************

Q21 - What is 'git tag'? What is the difference between 'git tag' and 'git branch'?

## Branch is way to clone the code and work freely without changing the actual production code. I had never used git tag before but as far as it seems people are using it for pointing the release versions. 

>> 'git tag' is a command used to mark specific points in a Git history, typically to signify releases or important milestones. It attaches a label to a specific commit for easy reference. The main difference between 'git tag' and 'git branch' is that while branches represent parallel lines of development for ongoing work, tags are used to mark specific points in history, such as releases, and are typically not moved or changed once created.

*******************************************************

Q22 - What third-party tools and applications can we use to interact with Git visually?

>> GitKraken, Sourcetree, GitHub Desktop etc.

*******************************************************

Q23 - What is the difference between 'GitHub' and 'git'? What are other similar sites to GitHub? Could you provide usernames on GitHub or other sites?

## Github is the 'Hub', git is the system. You can use Azure or Gitlab or Bitbucket etc.

>> Git is a distributed version control system used for tracking changes in source code during software development, while GitHub is a web-based hosting service that provides Git repository hosting, collaboration tools, and social networking features. Other similar sites to GitHub include GitLab, Bitbucket, and SourceForge. Some usernames on GitHub include octocat, torvalds, and defunkt.

*******************************************************

