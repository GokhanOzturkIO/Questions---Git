1- "Git Nedir?"
Git, yazılım geliştirme süreçlerinde kullanılan bir versiyon konrol sistemidir. Kod tabanının izlenmesini, yönetilmesini ve paylaşılmasını sağlar.
Aynı zamanda Git kod üzerinde yapılan değişikliklerin izlenmesini ve geri alınmasını sağlar. 

---------------------------------------------

2- "git pull" ile "git fetch" komutlarının farkı nedir?
"git fetch" uzak değişiklikleri alır ancak yerel dosyaları güncelleştirmezken, "git pull" hem uzak değişiklikleri alır hem de yerel dosyaları günceller. 

---------------------------------------------

3- Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?
Takım arkadaşımız kodları göndermiş olsa da, uzak depoya (remote repository) henüz push etmemiş olabilir. 
Takım arkadaşınız kodları farklı bir brancha push etmiş olabilir. 
Doğru uzak depo üzerinden çalışılmıyor olabilir.
Uzak depoya erişim izinleriniz olmayabilir veya yetkilendirme bilgileriniz yanlış olabilir.

----------------------------------------------

4-"git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
"origin" ismi, Git tarafından varsayılan olarak uzak depoya verilen isimdir.

----------------------------------------------

5-"HEAD" kelimesi neyi temsil etmektedir?
"HEAD" kelimesi şu anki çalışma branch'imizin son commit'ine işaret eder.

----------------------------------------------

6-"Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
"Staging Area" veya "Index", Git'in çalışma alanındaki dosyalar üzerinde yapılacak değişikliklerin geçici olarak saklandığı bir bölgedir. 
Bu bölge, bir sonraki commit'in içereceği değişikliklerin seçildiği yerdir.

----------------------------------------------
7- "Untracked file" ne demektir?
Bir dosyanın "untracked" olması, bu dosyanın depo (repository) içinde izlenmediği veya takip edilmediği anlamına gelir. 
Eğer bu dosyaların izlenmesi gerekiyorsa, öncelikle git add komutuyla izlenmeye başlanması gerekir.

-----------------------------------------------
8- ".git" klasörünü silersek ne olur?
".git" klasörünü silmek, projenin tüm geçmişini, izlenen dosyaların durumunu ve dal bilgilerini kaybetmemize neden olur.

-----------------------------------------------
9- Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
-

------------------------------------------------
10- Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
"branch" yapısı, paralel geliştirme, değişiklik yönetimi ve iş akışı yönetimi gibi önemli avantajlar sağlayarak, yazılım geliştirme süreçlerini daha verimli ve düzenli hale getirir.

-------------------------------------------------
11- Sıfırdan bir "branch" nasıl oluşturabiliriz?
"git branch <branch-adı>" komutu ile oluşturabiliriz.

-------------------------------------------------
12- Var olan bir "branch"e nasıl geçebiliriz?
"git checkout <branch-adı>" komutu ile geçebiliriz.

-------------------------------------------------
13-"git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?
"git clone --single-branch --branch <branch-adı> <repo-url>" 
Burada <branch-adı> belirli bir branch'in adını ve <repo-url> ise klonlamak istediğimiz repository'nin URL'sini temsil eder.

--------------------------------------------------
14-"Merge conflict" ne demektir?
Git'in farklı branch'lerden veya kaynaklardan gelen değişiklikleri birleştirmeye çalıştığında karşılaşılan bir durumdur.
Aynı Satırda Değişiklikler
Farklı Satırlarda Değişiklikler
Dosya Adı Değişiklikleri
Dosya Silme ve Değiştirme

---------------------------------------------------
15- "git log" komutu ile hangi bilgileri görebiliriz?
"git log" komutu, Git deposunda yapılan commit'leri görüntülemek için kullanılır. 
Bu komut;Commit Kimliği (SHA),Yazar,Tarih-Saat ve Commit Mesajını görüntüler.

----------------------------------------------------
16-"git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?
"git diff" komutu, Git deposundaki dosyalar arasındaki farkları görmek için kullanılır.
İki Farklı Commit Arasındaki Değişiklikler: "git diff <commit1> <commit2>"
İki Farklı Dal Arasındaki Değişiklikler: "git diff <branch1> <branch2>"
Çalışma Dizini ve İndeks Arasındaki Değişiklikler: Eğer hiçbir commit belirtilmemişse, "git diff" komutu çalışma dizini (working directory) ile staging area (index) arasındaki değişiklikleri gösterir. Yani, üzerinde çalıştığımız dosyalarda yaptığımız değişiklikleri ve staging area'ya eklenmemiş olanları gösterir.

-----------------------------------------------------
17- Git reset ile neyi geri alıyoruz?
"git reset" komutu, Git deposunda yapılan değişiklikleri geri almak veya geri sarmak için kullanılır.

-----------------------------------------------------
18- "git commit" ile "git push" arasındaki fark nedir?
"git commit" komutu yapılan değişiklikleri yerel Git deposuna kaydederken, "git push" komutu yereldeki bu değişiklikleri uzak bir sunucuya yükler ve diğer geliştiricilerle paylaşmamızı sağlar.

-----------------------------------------------------
19- Atomic commit ne demektir?
Daha temiz, daha düzenli ve daha yönetilebilir bir kod tabanı oluşturmak için kullanılan önemli bir geliştirme pratiklerinden biridir.

-----------------------------------------------------


