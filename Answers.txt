1- Git, yazılım geliştirme süreçlerinde kullanılan bir versiyon kontrol sistemidir. Git sayesinde yapacağınız projelerin adım adım versiyonlarının kopyalarını alarak daha sonra ihtiyaç duyduğunuzda aldığınız kopyalara yani versiyonlara kolayca dönebiliyorsunuz.  İlk sürümü Linux çekirdeği'nin geliştirilmesinde kullanılmak üzere 2005 yılında Linus Torvalds tarafından tasarlanıp geliştirilmiş, 2019 yılı itibarıyla %70 pazar payına ulaşmıştır. Açık kaynaklı özgür bir yazılım ürünü olan Git'i istediğiniz gibi kullanabilirsiniz.


*******************************************************************************************************************************************************


2- Fetch komutu değişikliklerin ne olduğunu liste şeklinde gösterir ama local branchine almaz.
Pull ise uzak sunucudaki ilgili branchte ne varsa localine alır.

Örnek vermek gerekirse ikimiz de Master branchinde değişiklikler yaptık. Senin yaptığın değişiklikler senin local bilgisayarında duruyor. Benimkiler benim lokalimde duruyor.
Senin local bilgisayarında ve benim local bilgisayarımda birbirimizin yaptığı değişiklikler yok. Ben yaptığım değişiklikleri uzak sunucuya gönderdikten sonra sen fetch yaparsan benim yaptığım değişiklikleri görürsün. Pull yaparsan benim yaptığım değişiklikleri kendi localine alırsın.


*******************************************************************************************************************************************************


3- Takım arkadaşımız yaptığı değişiklikleri pushlamamış olabilir veya biz git fetch yapmadan git pull yapmış olabiliriz.


*******************************************************************************************************************************************************


4- origin, Git'te genellikle varsayılan olarak tanımlanan bir uzak depo (remote repository) ismidir. Bir projeyi klonlarken (git clone), Git otomatik olarak bu varsayılan uzak depoyu origin olarak adlandırır.

Bu nedenle, git fetch origin komutunda origin, projenizin uzak depo adresini temsil eder. origin yerine farklı bir isim de kullanabilirsiniz, ancak çoğu durumda projeler origin adını kullanır.


*******************************************************************************************************************************************************


5- "HEAD", Git deposunda şu anda işaret edilen son commit'i (en son kaydedilen değişiklikleri) temsil eden özel bir işaretçidir. Yani, "HEAD" şu anda üzerinde çalıştığınız veya bulunduğunuz commit'i işaret eder.


*******************************************************************************************************************************************************


6- "Staging Area" veya "Index", Git'in çalışma alanındaki değişiklikleri yönetmek için kullandığı ara bir bölgedir. Bu bölge, çalışma dizininizde (working directory) yaptığınız değişikliklerin commit öncesinde geçici olarak saklandığı alandır.


*******************************************************************************************************************************************************


7- "Untracked file" (İzlenmeyen dosya), Git deposunun takip etmediği ve hakkında bilgi sahibi olmadığı dosyalardır. Yeni oluşturulmuş veya projeye eklenmemiş dosyalar bu kategoriye girer.


*******************************************************************************************************************************************************


8- Git yapısının geçmişini silmiş oluruz. Tüm commitler gider.


*******************************************************************************************************************************************************


9- 
1. Öncelikle, "ReadMe.md" dosyasını içeren bir şablon dosyası oluşturun veya hazırlayın. Bu dosya, projenizin varsayılan açıklamasını veya talimatlarını içerebilir.

2 .Ardından, bu "ReadMe.md" dosyasını her "git init" komutu çalıştırıldığında oluşturulacak bir klasöre (örneğin, Git'in varsayılan şablonlarının bulunduğu bir dizine) yerleştirin. 

3. Son olarak, Git'in şablonlarının bulunduğu dizini belirtmek için Git'in "template" konfigürasyonunu ayarlayın


*******************************************************************************************************************************************************


10- Git'te "branch" (dal), projenin farklı versiyonlarını, değişikliklerini ve geliştirmelerini izlemek için kullanılan bir yapıdır. Her dal, projenin ayrı bir hattını temsil eder ve bir dala yapılan değişiklikler, diğer dalları etkilemez. Bu, farklı özelliklerin veya değişikliklerin aynı anda geliştirilebilmesini sağlar ve bir daldaki çalışmaların diğer dallardaki çalışmalardan izole olmasını sağlar.


*******************************************************************************************************************************************************


11- git branch branch_ismi  şeklinde yeni bir branch oluşturulur. 


*******************************************************************************************************************************************************


12- git checkout branch_ismi


*******************************************************************************************************************************************************


13- Belirli bir spesifik dalı sadece klonlamak için git clone komutuna --single-branch bayrağını ve klonlamak istediğiniz dalı belirten -b bayrağını kullanabilirsiniz. Örneğin git clone --single branch -b branch_name repo_url


