1- Git, yazılım geliştirme süreçlerinde kullanılan bir versiyon kontrol sistemidir. Git sayesinde yapacağınız projelerin adım adım versiyonlarının kopyalarını alarak daha sonra ihtiyaç duyduğunuzda aldığınız kopyalara yani versiyonlara kolayca dönebiliyorsunuz.  İlk sürümü Linux çekirdeği'nin geliştirilmesinde kullanılmak üzere 2005 yılında Linus Torvalds tarafından tasarlanıp geliştirilmiş, 2019 yılı itibarıyla %70 pazar payına ulaşmıştır. Açık kaynaklı özgür bir yazılım ürünü olan Git'i istediğiniz gibi kullanabilirsiniz.


*******************************************************************************************************************************************************


2- Fetch komutu değişikliklerin ne olduğunu liste şeklinde gösterir ama local branchine almaz.
Pull ise uzak sunucudaki ilgili branchte ne varsa localine alır.

Örnek vermek gerekirse ikimiz de Master branchinde değişiklikler yaptık. Senin yaptığın değişiklikler senin local bilgisayarında duruyor. Benimkiler benim lokalimde duruyor.
Senin local bilgisayarında ve benim local bilgisayarımda birbirimizin yaptığı değişiklikler yok. Ben yaptığım değişiklikleri uzak sunucuya gönderdikten sonra sen fetch yaparsan benim yaptığım değişiklikleri görürsün. Pull yaparsan benim yaptığım değişiklikleri kendi localine alırsın.


*******************************************************************************************************************************************************


3- Takım arkadaşımız yaptığı değişiklikleri pushlamamış olabilir veya biz git fetch yapmadan git pull yapmış olabiliriz.


*******************************************************************************************************************************************************


4- origin, Git'te genellikle varsayılan olarak tanımlanan bir uzak depo (remote repository) ismidir. Bir projeyi klonlarken (git clone), Git otomatik olarak bu varsayılan uzak depoyu origin olarak adlandırır.

Bu nedenle, git fetch origin komutunda origin, projenizin uzak depo adresini temsil eder. origin yerine farklı bir isim de kullanabilirsiniz, ancak çoğu durumda projeler origin adını kullanır.


*******************************************************************************************************************************************************


5- "HEAD", Git deposunda şu anda işaret edilen son commit'i (en son kaydedilen değişiklikleri) temsil eden özel bir işaretçidir. Yani, "HEAD" şu anda üzerinde çalıştığınız veya bulunduğunuz commit'i işaret eder.


*******************************************************************************************************************************************************


6- "Staging Area" veya "Index", Git'in çalışma alanındaki değişiklikleri yönetmek için kullandığı ara bir bölgedir. Bu bölge, çalışma dizininizde (working directory) yaptığınız değişikliklerin commit öncesinde geçici olarak saklandığı alandır.


*******************************************************************************************************************************************************


7- "Untracked file" (İzlenmeyen dosya), Git deposunun takip etmediği ve hakkında bilgi sahibi olmadığı dosyalardır. Yeni oluşturulmuş veya projeye eklenmemiş dosyalar bu kategoriye girer.


*******************************************************************************************************************************************************


8- Git yapısının geçmişini silmiş oluruz. Tüm commitler gider.


*******************************************************************************************************************************************************


9- 
1. Öncelikle, "ReadMe.md" dosyasını içeren bir şablon dosyası oluşturun veya hazırlayın. Bu dosya, projenizin varsayılan açıklamasını veya talimatlarını içerebilir.

2 .Ardından, bu "ReadMe.md" dosyasını her "git init" komutu çalıştırıldığında oluşturulacak bir klasöre (örneğin, Git'in varsayılan şablonlarının bulunduğu bir dizine) yerleştirin. 

3. Son olarak, Git'in şablonlarının bulunduğu dizini belirtmek için Git'in "template" konfigürasyonunu ayarlayın


*******************************************************************************************************************************************************


10- Git'te "branch" (dal), projenin farklı versiyonlarını, değişikliklerini ve geliştirmelerini izlemek için kullanılan bir yapıdır. Her dal, projenin ayrı bir hattını temsil eder ve bir dala yapılan değişiklikler, diğer dalları etkilemez. Bu, farklı özelliklerin veya değişikliklerin aynı anda geliştirilebilmesini sağlar ve bir daldaki çalışmaların diğer dallardaki çalışmalardan izole olmasını sağlar.


*******************************************************************************************************************************************************


11- git branch branch_ismi  şeklinde yeni bir branch oluşturulur. 


*******************************************************************************************************************************************************


12- git checkout branch_ismi


*******************************************************************************************************************************************************


13- Belirli bir spesifik dalı sadece klonlamak için git clone komutuna --single-branch bayrağını ve klonlamak istediğiniz dalı belirten -b bayrağını kullanabilirsiniz. Örneğin git clone --single branch -b branch_name repo_url


*******************************************************************************************************************************************************


14- "Merge conflict" (birleştirme çakışması), Git'te iki veya daha fazla dalı birleştirme işlemi sırasında karşılaşılan bir durumdur. Birleştirme işlemi sırasında, Git farklı dallarda yapılan değişikliklerin aynı dosyanın aynı satırlarını etkilediğini belirler ve bu durumu bir çakışma olarak tanımlar.


*******************************************************************************************************************************************************


15- git log komutu, Git deposunda yapılan commit'leri listelemek için kullanılır. Bu komut kullanıldığında, Git geçmişindeki commit'lerin listesi görüntülenir ve her bir commit için aşağıdaki bilgileri görebilirsiniz:

1. Commit Hash: Her commit'in benzersiz bir kimliği vardır ve bu kimlik, commit hash olarak bilinir. Bu, commit'in tam olarak tanımlanmasını sağlar.
2. Yazar: Commit'i yapan kişinin adı ve e-posta adresi.
3. Tarih: Commit'in yapıldığı tarih ve saat.
4. Commit Açıklaması: Commit'i açıklayan bir mesaj. Bu mesaj, yapılan değişikliklerin ne olduğunu ve neden yapıldığını belirtir.
5. Değişiklikler: Commit ile eklenen, değiştirilen veya silinen dosyaların listesi ve bu dosyalardaki değişikliklerin özetleri.


*******************************************************************************************************************************************************


16- 
1. Çalışma Dizini ile "Staging Area" Arasındaki Farklar: Bu durumda, git diff komutunu çalıştırdığınızda, çalışma dizinizdeki dosyalar ile "staging area" (izin alanı) arasındaki farkları görebilirsiniz. Bu, çalışma dizinizde yaptığınız ancak henüz git add komutuyla "staging area"ya eklememiş olduğunuz değişiklikleri gösterir.

2. "Staging Area" ile Son Commit Arasındaki Farklar: git diff --staged veya git diff --cached komutları, "staging area" ile son commit arasındaki farkları gösterir. Bu, "staging area"daki değişikliklerin son commit ile karşılaştırılmasını sağlar.

3. İki Farklı Commit Arasındaki Farklar: git diff commit1 commit2 komutu, iki farklı commit arasındaki değişiklikleri gösterir. Burada "commit1" ve "commit2", karşılaştırmak istediğiniz iki commit'in hash veya etiketleridir.


*******************************************************************************************************************************************************


17- git reset ile staging area ya eklediğimiz dosyaları geri alabiliriz. 


*******************************************************************************************************************************************************


18- Git commit lokalinizdeki değişiklikleri kaydetmek etmek için kullanılır. git push ise kaydedilen bu değişiklikleri uzak depoya göndermek için kullanılır.


*******************************************************************************************************************************************************


19- "Atomic commit" (atomik commit), bir işlemi veya değişikliği tamamen birimli ve bölünemez bir şekilde kaydetmek anlamına gelir. Bir commit'in atomik olması, bir commit'te birbiriyle ilişkili bir grup değişikliğin bir arada kaydedilmesini ifade eder.


*******************************************************************************************************************************************************


20- Bir yazılım projesinin veya kaynak kodunun depolandığı ve yönetildiği bir yerdir. Bir "repository", bir yazılım projesinin tüm dosyalarını, geçmişini, sürüm geçmişini ve projeyle ilgili diğer verileri içerir.


*******************************************************************************************************************************************************


21- git tag komutu, belirli bir commit'e etiket eklemek veya etiketleri listelemek için kullanılırken, git branch komutu, projenin farklı dallarını oluşturmak, listelemek veya geçiş yapmak için kullanılır.


*******************************************************************************************************************************************************


22- GitHub Desktop, GitKraken, GitLab, BitBucket


*******************************************************************************************************************************************************


23- Git: Git, dağıtık bir sürüm kontrol sistemidir. Yazılım geliştirme projelerinde kaynak kodunun yönetilmesine olanak tanır. Git, yerel bir bilgisayar üzerinde depolanan bir projenin sürüm kontrolünü sağlar ve projenin geçmişini, değişikliklerini ve dallarını izler.

GitHub: GitHub, Git tabanlı bir kod barındırma ve işbirliği platformudur. GitHub, Git depolarının bulut tabanlı bir şekilde barındırılmasını sağlar ve projelerin çevrimiçi olarak paylaşılmasını, işbirliği yapılmasını ve izlenmesini sağlar. Ayrıca, proje yönetimi, sorun izleme, wiki ve CI/CD gibi bir dizi ek özellik sunar.

GitLab, BitBucket

