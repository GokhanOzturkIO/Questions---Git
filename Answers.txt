1- Git Nedir?
Git, dosyalar üzerinde versiyonlama yapmak, daha önceki yapılan değişiklikleri takip etmek ve bir dosya üzerinde değişiklik yapacak kişi sayısı birden fazla ise her bir kişinin yaptığı değişiklikleri tarihleriyle vs. takip etmek istediğimizde kullandığımız bir versiyon kontrol sistemidir.

2- "git pull" ile "git fetch" komutlarının farkı nedir?
Git fetch komutu ile uzak sunucudaki değişikliklerden local bilgisayarın haberdar olması sağlanır. Yapılan değişikler local repoya kaydedilir fakat birleştirilmez. Git pull komutu ile hangi branchte çalışıyorsak diğer developerlar tarafından oraya gönderilmiş olan commitler localdeki bilgisayara alınır.

3- Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?
Gönderen arkadaşımız yaptığı değişiklikleri pushlamamış olabilir veya biz git pull’dan önce git fetch’i kullanmamış olabiliriz.

4- "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
“origin” kopyalanan veya repoya push ve pull işlemleri gerçekleştirilen uzak repoyu temsil eden bir isimdir.

5- "HEAD" kelimesi neyi temsil etmektedir?
Mevcut branchte son commiti işaret eden pointerdır.

6- "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
Üzerinde değişiklik yaptığımız dosyaları Git’e göndermeye hazırladığımız alandır. Yaptığımız değişiklikleri buraya ekleyerek, bu değişikliklerin sonraki bir "commit" işlemiyle Git deposuna kalıcı olarak kaydedilmesini sağlarız. Yani, bu bölge, bir sonraki commit'e dahil etmek istediğiniz dosyaların bir listesini tutar.

7- "Untracked file" ne demektir?
Untracked file, bu dosyadaki değişiklikler henüz git tarafından kontrol edilmiyor demek.

8- ".git" klasörünü silersek ne olur?
“.git” klasörü silinirse Git tarafından kaydedilen tüm bilgiler kaybolur ve Git’in tekrar initialize edilmesi gerekir.

9- Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
"git init" komutunu kullanırken --template seçeneği, yeni bir Git deposu oluştururken varsayılan olarak kullanılacak bir şablon dizini belirtmenizi sağlar. Bu seçenek sayesinde, yeni bir depo oluşturduğunuzda belirli dosyalar (ReadMe.md dosyası gibi) veya yapılandırmalar otomatik olarak dahil edilir. 

10- Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
Branch, farklı özellikler veya işlevler üzerinde aynı anda çalışmayı, yeni bir özellik veya değişiklik denemek istenildiğinde, bunu ana dalı etkilemeden bir dalda yapabilmeyi, belirli bir özelliğin veya hata düzeltmesinin geçmişini inceleyebilmeyi, gerektiğinde geriye dönebilmeyi veya değişiklikleri birleştirebilmeyi ve Ana dal’ın (genellikle "master" dalı) stabil ve kullanıma hazır olan sürümün korunmasını sağlar.

11- Sıfırdan bir "branch" nasıl oluşturabiliriz?
“git branch branchadi” komutuyla sıfırdan bir “branch” oluşturulabilir.

12- Var olan bir "branch"e nasıl geçebiliriz?
“git checkout branchadi” komutu ile var olan bir “branch”e geçilebilir.

13- "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?
“git clone --branch branchadi” komutu ile belirli bir spesifik branch çekilebilir.

14- "Merge conflict" ne demektir?
İki developer’ın ayrı branch’lerde aynı dosyayı ve aynı satırı değiştirdiyse bu değişiklikleri ortak branch ile birleştirirken çakışma yaşanır bu duruma “merge conflict” denir.

15- "git log" komutu ile hangi bilgileri görebiliriz?
Bu komut ile Commit’in hash code’unu , Commit’i yazan kişinin adını ve e-posta adresini, Commit’in yazılma tarihini ve Commit mesajını görebiliriz. 

16- "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?
Bu komut ile 2 branch ve 2 commit arasındaki değişiklikleri gösterebiliriz.

17- Git reset ile neyi geri alıyoruz?
git add ile Staging Srea’ya alınan değişiklikleri Staging Area’dan çıkartır.

