1.Git Nedir? Sorusunun Cevabı:

-- Yazılım geliştirme projelerinde kullanılan, dosyaların ve projenin tüm geçmişinin kaydedilmesini ve yönetilmesini sağlayan bir araçtır. Projedeki her değişiklik bir "commit" olarak adlandırılır ve her kullanıcı kendi kopyası üzerinde bağımsız olarak çalışabilir. Git, projenin farklı sürümlerini karşılaştırma, birleştirme ve geri alma gibi işlemleri kolaylaştırır, böylece ekip üyeleri daha verimli bir şekilde işbirliği yapabilir.
-------------------------------------------------------------------------------------------------------------------------------------

2."Git Pull" ile "Git Fetch" komutlarının farkı nedir? sorusunun cevabı:

--git fetch: Uzak depodan güncellemeleri alır, ancak yerel çalışma alanınızı değiştirmez. Yani, uzak depodaki değişiklikler yereldeki dosyalara yansıtılmaz. Bu komut, sadece uzak depodaki güncellemeleri indirir ve onları yerelde kontrol etmenizi sağlar.
--git pull: Uzak depodan güncellemeleri alır ve bunları yerel çalışma alanınıza uygular. Bu komut, aslında git fetch ve git merge komutlarını birleştirir. Yani, uzak depodaki değişiklikleri alır ve mevcut çalışma dalınıza (branch) birleştirir.
--Bu nedenle, genellikle güncellemeleri almak için git fetch kullanmanız ve ardından gerektiğinde yerel çalışma alanınızı güncellemek için git merge veya git rebase kullanmanız önerilir. git pull kullanmak, sadece basit güncellemeler alırken ve hızlı bir şekilde çalışırken tercih edilebilir.

-------------------------------------------------------------------------------------------------------------------------------------

3.Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir? Sorusunun Cevabı:

--Takım arkadaşınızın kodlarını gönderdiği branch ile sizin lokalde olduğunuz branch farklı olabilir.
--İnternet bağlantınızda bir sorun olabilir.
--Uzak depoya erişim yetkiniz olmayabilir.
--Takım arkadaşınızın kodlarını gönderdiği commitler sizin lokaldeki commitlerle çakışıyor(conflict) olabilir.

-------------------------------------------------------------------------------------------------------------------------------------

4.git fetch origin" komutundaki "origin" neye karşılık gelmektedir? Sorusunun Cevabı:

--origin, genellikle bir Git depoya verilen isimdir ve uzak depoyu temsil eder. Bir depoyu klonladığınızda, Git otomatik olarak bu depoya origin adını verir. 
--Bu şekilde, uzak depoyu ifade etmek için origin adını kullanabilir ve git fetch origin gibi komutlarla bu uzak depodan güncellemeleri alabilirsiniz.

-------------------------------------------------------------------------------------------------------------------------------------

5.HEAD" kelimesi neyi temsil etmektedir? Sorusunun Cevabı:

--"HEAD", Git deposundaki şu anki çalışma konumunu (branch'i) gösteren bir referanstır. HEAD, genellikle çalışma alanınızdaki son commit'i (en son yapılan değişiklik) gösterir.
--HEAD'in işaret ettiği yer, çalışma alanınızda bulunan branch'in son commit'idir. Eğer doğrudan bir commit'in ID'sini vermek isterseniz, bu commit üzerinde HEAD'i taşıyabilirsiniz. Bu durumda, çalışma alanınızı bu commit'in durumuna götürmüş olursunuz.
--Özetle, HEAD, şu anki branch'in son commit'ini temsil eder ve çalışma alanınızda nerede olduğunuzu belirler.

-------------------------------------------------------------------------------------------------------------------------------------

6."Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir? Sorusunun Cevabı:


--"Staging Area" veya "Index", Git'in çalışma prensibinde önemli bir role sahip olan bir bölgedir. Bu bölge, değişiklikleri commit etmeden önce hazırlayabileceğiniz bir alandır. Yani, değişiklik yapmak istediğiniz dosyaları buraya ekleyerek (staging), bu dosyaları bir sonraki commit işleminizde dahil etmeyi seçebilirsiniz.

-------------------------------------------------------------------------------------------------------------------------------------

7."Untracked file" ne demektir? Sorusunun Cevabı:

--"Untracked file" (izlenmeyen dosya), Git'in takip etmediği ve değişikliklerini izlemediği dosyalardır. Genellikle proje klasörünüzde bulunan ve Git'in göz ardı ettiği yeni dosyalar olarak düşünebilirsiniz.
--Bir dosya, projenize eklediğinizde (örneğin, git add komutunu kullanarak), Git bu dosyayı izlemeye başlar ve değişikliklerini takip eder. Ancak, henüz eklenmemiş ve Git tarafından izlenmeyen dosyalar untracked file olarak kabul edilir.

-------------------------------------------------------------------------------------------------------------------------------------

8.".git" klasörünü silersek ne olur? Sorusunun Cevabı:

--.git klasörü, Git'in depo ile ilgili tüm bilgileri içeren ve depo yönetimi için gereken dosyaları barındıran kritik bir klasördür. Eğer bu klasörü silerseniz, depo yönetimiyle ilgili tüm bilgileri kaybedersiniz ve Git ile çalışamaz hale gelirsiniz. Bu durumda, Git geçmişi, branch'ler ve commit'ler gibi tüm bilgiler kaybolur ve depo boş bir klasör gibi davranır.

-------------------------------------------------------------------------------------------------------------------------------------

9.Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız? Sorusunun Cevabı:

--Her git init komutu çalıştırıldığında otomatik olarak bir ReadMe.md dosyası oluşturmak için, Git'in varsayılan şablon dosyalarını değiştirmeniz gerekmektedir. 
--Bunun için, Git'in template dizininde bulunan dosyaları düzenlemeniz veya değiştirmeniz gerekmektedir. 
--Bu dizin, genellikle Git'in yüklendiği yerde '/usr/share/gitcore/templates'  şeklinde bulunur. 
--Bu dizinde ReadMe.md adında bir dosya oluşturarak, bu dosyanın her yeni proje başlatıldığında kopyalanmasını sağlayabilirsiniz. Ancak, bu değişikliklerin tüm Git projelerinde etkili olacağını unutmayın.

-------------------------------------------------------------------------------------------------------------------------------------

10.Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar? Sorusunun Cevabı:

--Git'te "branch" (dal) kavramı, projenizin farklı versiyonlarını ve değişikliklerini ayrı ayrı izlemenizi sağlayan bir yapıdır. Her bir branch, projenin belirli bir versiyonunu temsil eder ve üzerinde yapılan değişiklikler sadece o branch'e etki eder.

--Branch'ler, aynı projenin farklı özelliklerinin veya farklı işlevlerinin geliştirilmesi için kullanılır. Örneğin, bir branch üzerinde yeni bir özellik eklerken, ana branch olan "master" branch'te stabil bir sürümü koruyabilirsiniz. Bu şekilde, yeni özellik geliştirme çalışmalarınız, diğer geliştiricilerin çalışmalarını etkilemeden devam edebilir.

--Branch'ler ayrıca paralel çalışma imkanı da sağlar. Bir ekip, aynı anda farklı özellikler üzerinde çalışabilir ve her bir özellik için ayrı branch'ler oluşturabilir. Sonrasında, bu branch'ler birleştirilerek (merge) projeye entegre edilebilir.

--Özetle, branch'ler Git'in esnekliğini ve gücünü arttırır, farklı özelliklerin ve değişikliklerin paralel olarak geliştirilmesine imkan tanır ve projenin daha iyi organize edilmesini sağlar.

-------------------------------------------------------------------------------------------------------------------------------------

11.Sıfırdan bir "branch" nasıl oluşturabiliriz? Sorusunun Cevabı:

--Sıfırdan bir branch oluşturmak için öncelikle Git deposunda olmanız ve oluşturmak istediğiniz branch'e geçmiş olmanız gerekmektedir. Örneğin, mevcut branch "master" ise ve yeni bir "feature" branch oluşturmak istiyorsanız, aşağıdaki adımları izleyebilirsiniz:

-->Terminal veya Git bash üzerinden Git deposunun bulunduğu dizine gidin.
-->git checkout -b feature komutunu kullanarak "feature" isimli yeni bir branch oluşturun ve bu branch'e geçin. Bu komut aynı anda branch oluşturur ve o branch'e geçer.
-->Artık "feature" branch üzerinde çalışabilirsiniz. Değişikliklerinizi ekleyerek (staging area'ya) ve commit ederek bu branch'e kaydedebilirsiniz.
--!!! Veya sıfırdan bir branch oluşturmak için git branch komutunu kullanabilirsiniz. Yeni oluşturulan branch, mevcut konumunuzdaki commit'e göre oluşturulur ve bu commit'in üzerine devam eder.

-------------------------------------------------------------------------------------------------------------------------------------


12.Var olan bir "branch"e nasıl geçebiliriz? Sorusunun Cevabı:

--Var olan bir branch'e geçmek için git checkout komutunu kullanabilirsiniz. Örneğin, master branch'ine geçmek için şu komutu kullanabilirsiniz:
---> git checkout master --
--Bu komut, master branch'ine geçiş yapar ve bu branch üzerinde çalışmaya başlamanızı sağlar. Branch ismini değiştirerek başka bir branch'e geçmek için aynı komutu kullanabilirsiniz. Örneğin, feature adındaki bir branch'e geçmek için şu komutu kullanabilirsiniz:
--> git checkout feature --
--Bu komutlar, mevcut branch'ten başka bir branch'e geçiş yapmanızı sağlar ve çalışma alanınızı seçtiğiniz branch'e göre ayarlar.

-------------------------------------------------------------------------------------------------------------------------------------

13.











