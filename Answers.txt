
Answer to question 1:
    git: Dosyalar üzerinde versiyonlama yapabilmeyi sağlar. Dosyalar üzerinde birden çok kişi
    çalışıyorsa takibi kolaylaştırır. (VCS, Versiyon kontrol sistemi)

Answer to question 2:
    git fetch: uzak sunucuda olan değişiklikleri sadece bildirir. Haber verir, localde
    çalıştığımız dosyada bir değişiklik yapmaz.
    git pull: fetch gibi değişiklikleri bildirir fakat aynı zamanda değişiklikleri localde
    çalıştığımız dosyaya çeker.

Answer to question 3:
    1- Uzak sunucuya erişimim olmayabilir. Bu durumda pull komutu geçersiz kalır.
    2- Takım arkadaşımın gönderdiği depo ile benim localimdeki deponun bağlantısında uyuşmazlık
    yaşanmış olabilir. Uzak depoları kontrol edebiliriz.
    3- Çakışma (Conflict) yaşanıyor olabilir. Takım arkadaşımın değiştirdiği kısım ile benim
    çalıştığım kısımdaki değişiklikler çakışıyorsa da pull işlemi başarısız olur. Çakışma durumunu
     çözmek gerekir.
    4- pull yapmadan önce değişikliklerden haberdar olmak için fetch komutunu kullanmamış olabilirim.
    5- Takım arkadaşım localinde yaptığı değişiklikleri commitlemiştir fakat yaptığı değişiklikleri
    uzaktaki sunucuya gönderme aşamasını atlamış olabilir. (git push kullanarak bu sorunu
    çözebiliriz)

Answer to question 4:
    origin : git deposunun varsayılan remote repository referansıdır. fetch origin komutuyla
    varsayılan uzak depodan değişiklikleri alırız.

Answer to question 5:
    Head: Üzerinde çalışılan branch'ın son commitlerini temsil eder. Çalışılan son sürüm.

Answer to question 6:
    Staging Area: Localde yaptığımız değişiklikleri commitleyerek staging area kısmına almış oluruz.
    Githuba eklemez fakat ara bölgeye ekler. Remote sunucuda gözükmez (push'layana kadar).

Answer to question 7:
    Untracked file:Localde bir dosya oluşturulduğunda git'e eklenmediği zaman bu dosya git
    tarafından takip eidlemez. Bu dosyaya untracked file denir. add komutu ile staging area'ya
    eklenirse takip edilebilir hale gelir.

Answer to question 8:
    git klasörü -> deponun tğm geçmişini, dallarını, ayarlarını içerir. Silersek geçmiş silinir,
    deponun yönetimi kaybedilir, depo artık git olmaz, değişiklikleri de geri alamayız.

Answer to question 9:
    ############# Bu sorunun cevabından çok emin olamadığım için biraz araştırıp deneyerek cevabımı
    güncelleyeceğim. #############

Answer to question 10:
    branch:dal, projenin paralelde farklı çalışma alanlarını temsil eden geliştirme çizgisidir.
    head ın kopyasını alarak, bu kopya üzerinde yeni değişiklikler yapılır. Her branch bağımsız bir
    geliştirme yolunu temsil eder.

Answer to question 11:
    yeni branch oluşturmak için ->>> git branch [branch-name] komutu kullanılır. Komut yerine
    projenin yardımcı toolları üzerinden de git başlığı altından yeni bir branch oluşturulabilir.

Answer to question 12:
    Var olan branch'e geçmek için ->>> git checkout [branch-name] komutu kullanılır. Komut yerine
    projenin yardımcı toollarını kullanabiliriz.

Answer to question 13:
    Belirli bir branch'i çekmek için ->>> git clone --branch [branch-name] komutu ile istenen
    branch'i locale clone alabiliriz.

Answer to question 14:
    Merge Conflict: birleştirme çakışması anlamına gelir. git'te birden fazla branch'in
    birleştirilmesi sırasında karşılaşılır. farklı branch'lerde yapılan değişikliklerin aynı
    satırlarda çakışması durumudur. git'in bu çakışma yüzünden branch'leri birleştiremesi sonucu oluşur.

Answer to question 15:
    log komutu ile; Commit geçmişlerinin benzersiz kimliklerini, yazan kişi bilgileri, tarih ve
    saat bilgisi ve commit mesajını görebiliriz.

Answer to question 16:
    1. Çalışma dosyası (yani henüz staging areaya eklenmemiş dosya) ile Staging area arasındaki
    farkları görebiliriz.
    2. Staging area'da bulunan dosya ile son commit arasındaki farkları görebiliriz.
    3. belirlenen iki farklı commit arasındaki farkları görebiliriz.

Answer to question 17: git reset ile;
    1.commit geçmişinde belirtilen commite geri dönebiliriz.
    2.staging area ve çalışma dosyasındaki değişiklikleri geri alabiliriz.
    3.commit referansı belirtmezsek, varsayılan olarak HEAD konumunu değiştirir. Yani head  konumunu
     bir önceki commit'e taşır ama staging area ve  çalışma dosyası değişmez.

Answer to question 18:
    commit: Localde çalıştığımız dosyayı git add ile git e ekledikten sonra commitlersek staging
    area ya geçmiş olur ve localde kalıcı olarak kaydedilir. fakat remote sunucu tarafında bir
    değişiklik gözlenmez.
    push: Localde çalıştığımız dosyayı commitledikten sonra diğer ekip üyeleri ile paylaşılması veya
    yedeklenmesi için push komutu kullanılır. Hem localde hem remote sunucuda değişiklikler güncellenir.

Answer to question 19:
    Atomic commit, yapılan değişikliklerin bir bütün olarak kaydetmeyi sağlar. tutarlı ve mantıklı
    bir birleşim yapmayı sağlar. Yapılan diğer değişikliklerle temas kurmadan bir commitin
    uygulanmasını veya geri alınmasını sağlar. Commitlenen grubun neyi temsil ettiğine göre anlamlı
    bir commit mesajı yazılmalıdır.

Answer to question 20:
    Repository genellikle projenin dosyalarının vs depolandığı, yönetildiği veritabanı veya yer anlamına
    gelir. version control system'i tarafından yönetilen proje veya kod deposunu temsil eder. git
    için bakılırsa projenin kod dosyaları, resimleri, belgeleri vb. ve projenin bilgilerini içeren depodur.

Answer to question 21:
    ->git tag komutu, belirli bir commiti işaretlemek için ve sabit bir isimle etiketlemek için
    kullanılır. Genel olarak sürüm noktalarını belirlemek için kullanılır.
    ->git branch komutu, paralel geliştirme noktalarını oluşturmak ve yönetmek için kullanılır. Farklı
    özelliklerin veya değişikliklerin geliştirilmesi için kullanılır.

Answer to question 22:
    Git i görselleştirmek için henüz bir araç veya uygulama kullanmadım. Biraz daha araştırıp
    22.sorunun cevabını güncelleyeceğim.

Answer to question 23:
    git: versiyon kontrol sistemi olan bir yazılımdır. local bir bilgisayarda, sunucuda veya repoda
    bulunan dosyaların değişikliklerinin izlenmesi, yönetilmesi ve paylaşılmasını sağlar.
    gitHub: Git tabanlı bir platformdur. Yazılım geliştirme projelerinin yönetilmesi ve iş birliği
    için kullanılır. github git depolarını barındırır ve depoların çevrimiçi olarak erişimi ve
    kontrolü sağlar.
    *** Github benzeri siteler: gitLab,Bitbucked..
    ( github kullanıcı adım: busramacak (diğer sitelere üyeliğim yok.))

