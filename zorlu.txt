1- Git Nedir?
İnsanların ortak olarak bir proje üzerinde çalışma yapmalarını sağlayan versiyon kontrol sistemi
2- "git pull" ile "git fetch" komutlarının farkı nedir?
Genel olarak, "git fetch" komutu, uzak depodaki değişiklikleri almak için kullanılırken, "git pull" komutu, bu değişiklikleri almak ve yerel çalışma kopyasını güncellemek için kullanılır.
3-Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?
-Arkadaşımız commitlerini pushlamamış olabilir.
    -Arkadaşımız kodlarını commitlememiş olabilir.(commitledemen de pushlayamayacağı için push atamamıştır)
    -Biz kodda değişiklik yapıp commitlemediğimiz için pull edemiyor olabilir.
4->"git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
origin uzak sunuculardan(birden fazla ise) temel olan repoyu,zaten bir tane uzak sunucu reposu var is o repoyu temsil eder.
5->"HEAD" kelimesi neyi temsil etmektedir?
    Bulunan brachdeki son commit'i ifade eder.
 6->"Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
 Son commit den sonra git'in takip ettiği dosyalar arasından değişiklik yapılan dosyaları bir ,sonraki
 commite kadar tutulduğu yerdir.
7->"Untracked file" ne demektir?
 Git tarafından takip edilmeyen dosya demektir.
8->".git" klasörünü silersek ne olur?
Daha önce indexlenmiş olan versiyonları kaybederiz, dosyaların en son hali elimizde kalır, fakat eski versiyonlarına erişemeyiz.
9->Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
Daha öncesinde bir templete oluşturmuş, git init i kullanırken template'i kullanarak init etmiş olmalıyız
10->Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
 Branch aynı temelin farklı dalları olarak düşünebiliriz.
    Aynı anda birden fazla kişinin projede çalışmasını kolaylaştırır.
 11->Sıfırdan bir "branch" nasıl oluşturabiliriz?
 "git branch branchAdı" ile yeni branch oluşturabiliriz.
 12->Var olan bir "branch"e nasıl geçebiliriz?
  "git checkout branchAdı" ile branchAdı adlı branche geçiş yapabiliriz.
13->"git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?
 "git clone -b branchAdı uzakRepoAdresi" ile repodan istenen branchi çekebiliriz.
 14->"Merge conflict" ne demektir?
     Merge conflict, branch birleşiminde, git pull, git push gibi komutlarda meydana gelecek zıtlaşma durumudur.
15->"git log" komutu ile hangi bilgileri görebiliriz?
    commit geçmişini, commit yazarını, commit yazarının email adresini ve commitin atıldığı zaman bilgisini görebiliriz.
