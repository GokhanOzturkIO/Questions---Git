Soru 1 -> Git Nedir?
Git yazılım geliştirme sürecimizde kullandığımız kodlarımızı takip ettiğimiz veya aynı projede çalışmak için arkadaşlarımızla iş birliği yaptığımız versiyon kontrol sistemidir.

Soru 2 -> "git pull" ile "git fetch" komutlarının farkı nedir?
"git pull", "git fetch" komutunu içerir ve ardından yerel çalışma dizinini günceller. "git fetch" ise sadece uzak depodan değişiklikleri alır, ancak yerel dosyaları güncellemez.

Soru 3 -> Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?
Arkadaşımız git push komutunu kullanmayı unutmuş olabilir.Eğer kullansaydı biz git pull ile kendi lokalimize çekebilirdik.

Soru 4 -> "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
"origin", Git'te bir uzak depoyu temsil eden bir isimdir. 

Soru 5 -> "HEAD" kelimesi neyi temsil etmektedir?
HEAD terimi aktif olarak çalıştığımız commit'i temsil etmektedir?

Soru 6 -> "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
Son attığımız committen bir diğer atacağımız commite kadar olan ara bölgedir.

Soru 7 -> "Untracked file" ne demektir?
Adından da anlıyacağımız üzere "İzlenemeyen Dosya" demektir. Biz dosyayı git'e eklemediysek untracked file yazar.

Soru 8 -> ".git" klasörünü silersek ne olur?
Kullandığımız klasörde git tanımlanmamış olur.

Soru 9 -> Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
İlk önce git template kullanraka template ediyoruz.Template ettiğimiz yere README.md dosyasını ekleyip kullanabiliriz.

Soru 10 -> Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
Branch bize projede farklı dallarında çalışma olanağı sağlayan bir özelliktir. Bu özellikle bir takım çalışması yaparsak projede ayrı ayrı geliştirme ve düzeltme yapabiliriz.

Soru 11 -> Sıfırdan bir "branch" nasıl oluşturabiliriz?
Bir branch oluşturmak için git branch (branch adı) yazarak oluşturabiliriz.

Soru 12 -> Var olan bir "branch"e nasıl geçebiliriz?
Bunun için git checkout (branch adı) yazarak geçebiliriz.

Soru 13 -> "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?
Clone'lamak istediğimiz github adresinin url'sini alıp git bash here'a git cloner (url) yazmamız yeterli.

Soru 14 -> "Merge conflict" ne demektir?
Adından da anlaşıldığı gibi birleştirme çatışması demektir. Git'te 2 farklı branchin birleştirilmeye çalışılıp Git'in otomatik birleştirme yapamamasıyla kaynaklanır. 

Soru 15 -> "git log" komutu ile hangi bilgileri görebiliriz?
Bu komutla daha önce hangi commitlerin ne zaman kim tarafından atıldığını görebiliriz.

Soru 16 -> "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?
Bu komutla 2 commit arasındaki farkları veya branch arasındaki farkları görebiliriz.

Soru 17 -> Git reset ile neyi geri alıyoruz?
Yazdığımız commiti veya staging areadaki değişiklik yapmak istediğimiz yeri geri alabiliyoruz.

Soru 18 -> "git commit" ile "git push" arasındaki fark nedir?
git commit yerel depoya değişiklikleri kaydeder, git push ise yereldeki değişiklikleri uzak depoya gönderir ve paylaşır.

Soru 19 -> Atomic commit ne demektir?
Atomic commit bizim commit mesajlarımızın kısa ve öz direk konuya hitap eden commit mesajıdır.

Soru 20 -> Repository ne demektir?
Repository kısaca bizim kodlarımızın bulunduğu depodur.

Soru 21 -> "git tag" nedir? "git branch"’ten farkı nedir?
git tag komutu, belirli bir commit'i etiketlemek veya adlandırmak için kullanılır. git tag, belirli bir commit'i etiketlemek için kullanılırken, git branch paralel çalışma dalları oluşturmak ve yönetmek için kullanılır.