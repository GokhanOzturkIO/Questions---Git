1) Git nedir : Git bir version kontrol sistemidir ve yazılım geliştirme süreçlerinde önemli bir role sahiptir.

2) "git pull" ile "git fetch" komutlarının farkı nedir? :  "git pull" komutu hem uzak değişiklikleri çeker hem de yerel dala birleştirirken, "git fetch" komutu sadece uzak değişiklikleri çeker ve yerel dala birleştirmez. Bu nedenle, "git fetch" komutu genellikle güncellemeleri kontrol etmek ve ardından yerel dala birleştirmek için kullanılırken, "git pull" komutu bu işlemi tek bir adımda gerçekleştirir.

3) Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir? : Çakışma (conflict) olabilir. Çünkü aynı dosya üzerinde çalışmışızdır ve
git hangi değişiklikleri uygulayacağını bilmiyor olabilir. Bu yüzden önce
bu çakışmaları çözüp sonra pull yapmalıyız.

4) "git fetch origin" komutundaki "origin" neye karşılık gelmektedir? : "origin", Git'te bir uzak depoyu işaret etmek için kullanılan bir takma addır. Genellikle, projenin orijinal veya merkezi depo adresini temsil eder. Bu takma ad, projenin uzak depoları arasında iletişim kurmak için kullanılır ve projenin uzak depoları arasında birincil kaynağı temsil eder.

5) "HEAD" kelimesi neyi temsil etmektedir? :"HEAD", Git'te mevcut çalışma durumunu veya konumunu temsil eden bir referansdır. Başka bir deyişle, "HEAD", şu anda aktif olan yerel dalın son durumunu gösterir. "HEAD", genellikle mevcut işlemin çalıştığı konumu işaret eder ve bu nedenle mevcut dalın en son taahhüt edilmiş sürümünü gösterir.

6) "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir? : Genellikle bir değişiklik yapıldığında, bu değişiklikler önce çalışma dizininde (working directory) yapılır. Daha sonra, "git add" komutuyla bu değişiklikler Staging Area'ya eklenir ve bir sonraki commit'e dahil edilmek üzere hazır hale getirilir. Son olarak, "git commit" komutuyla Staging Area'daki değişiklikler commit edilir ve kalıcı olarak kaydedilir.
Staging Area veya Index, Git'in esnek ve güçlü commit sürecinin bir parçasıdır ve değişikliklerin düzenli, tutarlı ve kontrol edilebilir bir şekilde kaydedilmesini sağlar.

7) "Untracked file" ne demektir? : "Untracked file" (İzlenmeyen dosya), Git'in proje dosyalarını izleme yeteneğiyle ilgili bir terimdir. Bir dosya "untracked" olarak işaretlendiğinde, Git bu dosyanın içeriğini izlemiyor ve bu dosyayı proje geçmişinde kaydetmiyor.

8) ".git" klasörünü silersek ne olur? : ".git" klasörü, bir Git deposunun temelini oluşturan ve Git'in tüm versiyon kontrolünü yönettiği yerdir. Bu klasör, projenin taahhüt geçmişini, dal bilgilerini, taahhüt objelerini ve diğer Git ile ilgili bilgileri içerir. ".git" klasörü olmadan, Git, proje üzerindeki versiyon kontrolünü uygulayamaz ve projeyi yönetemez.

9)Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız? : Git, yeni bir depo oluştururken kullanılan bir şablon mekanizması olan "git templates" sunar. Bu şablonları kullanarak, her yeni repo oluşturulduğunda belirli dosyaların otomatik olarak eklenmesini sağlayabilirsiniz. Bunun için aşağıdaki adımları izleyebilirsiniz:
Öncelikle, bir Git şablonları dizini oluşturun: mkdir -p ~/.git-templates/hooks
Daha sonra, bu dizinde "post-init" adında bir post-init hook dosyası oluşturun:
touch ~/.git-templates/hooks/post-init
Oluşturduğunuz bu post-init hook dosyasını açarak, her yeni repo oluşturulduğunda çalıştırılacak komutları ekleyin. Örneğin, "ReadMe.md" dosyasını otomatik olarak oluşturabilirsiniz:
echo "# My Project" > ReadMe.md
git add ReadMe.md
git commit -m "Initial commit with ReadMe.md"
Son olarak, bu dosyayı çalıştırılabilir hale getirin:chmod +x ~/.git-templates/hooks/post-init.

9) Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar? : "branch" yapısı, Git'in güçlü bir özelliği olan paralel geliştirmeyi sağlar ve projenin farklı özelliklerini ve sürümlerini yönetmek için esnek bir yöntem sunar. Bu, yazılım geliştirme sürecini daha organize, verimli ve yönetilebilir hale getirir.

10) Sıfırdan bir "branch" nasıl oluşturabiliriz? : git branch -Branch Adı- komutu kullanılarak yeni bir branch oluşturulabilir.

11) Var olan bir "branch"e nasıl geçebiliriz? : git checkout -Branch Adı- komutuyla branchler arası geçiş yapabiliriz.



 
