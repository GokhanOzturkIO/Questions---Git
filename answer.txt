1-Versiyon kontrol sistemidir.
2-iki komutda remote repo dan local repoya çeker fakat git fetch local repo yu değiştirmez.
3- *remote repoya pushlanmamıştır.
   *Çevrimdışı olabiliriz.
   *Conflict durumu olabilir
4- remote repoyu
5- En son yapılan commit i referans verir.
6- Geçici alandır. Proje commitlenmeden önce kontrolleri yapılan yerdir.
7- git' in takip edemediği dosyadır.
8- .git klasörü projenin kalbidir silersek projeye ait geçmiş, takipler herşey silinir.
9- bir template oluşturup bunu default olarak tanımlamalıyız sonrasında her git init komutunda kendi default olarak eklicektir Peki bunu nasıl yapmalıyız
 bir şablon klasörümüz olmalı:
 	mkdir templates
 klasör içine README.md oluşturulur:
	touch README.md
 bu şablonu Git imize tanımlamalıyız.
	git config --global init.templateDir ~/templates
bu kadar artık git init yaptığımızda default olarak gelicektir.
10- Bizim şuanda yaptığımız gibi proje de kendime ait çalışma alanı sağlıyor.
bunu yaptığımız geliştirmelerde farklı branchler oluşturarak ilgili projede dallandırma yaparak kolay anlaşılabilirlik sağlarız.
11- git branch yeni_branch (bu komut oluşturulan branche geçmez)
    git checkout -b yeni_branch (bu komut oluşturulan branche geçer)
    git switch -c yeni_branch (bu komut oluşturulan branche geçer)

12- git checkout branch_ismi
    git switch branch_ismi   
13-git clone -b branch_ismi URL