1-Versiyon kontrol sistemidir.
2-iki komutda remote repo dan local repoya çeker fakat git fetch local repo yu değiştirmez.
3- *remote repoya pushlanmamıştır.
   *Çevrimdışı olabiliriz.
   *Conflict durumu olabilir
4- remote repoyu
5- En son yapılan commit i referans verir.
6- Geçici alandır. Proje commitlenmeden önce kontrolleri yapılan yerdir.
7- git' in takip edemediği dosyadır.
8- .git klasörü projenin kalbidir silersek projeye ait geçmiş, takipler herşey silinir.
9- bir template oluşturup bunu default olarak tanımlamalıyız sonrasında her git init komutunda kendi default olarak eklicektir Peki bunu nasıl yapmalıyız
 bir şablon klasörümüz olmalı:
 	mkdir templates
 klasör içine README.md oluşturulur:
	touch README.md
 bu şablonu Git imize tanımlamalıyız.
	git config --global init.templateDir ~/templates
bu kadar artık git init yaptığımızda default olarak gelicektir.
10- Bizim şuanda yaptığımız gibi proje de kendime ait çalışma alanı sağlıyor.
bunu yaptığımız geliştirmelerde farklı branchler oluşturarak ilgili projede dallandırma yaparak kolay anlaşılabilirlik sağlarız.
11- git branch yeni_branch (bu komut oluşturulan branche geçmez)
    git checkout -b yeni_branch (bu komut oluşturulan branche geçer)
    git switch -c yeni_branch (bu komut oluşturulan branche geçer)

12- git checkout branch_ismi
    git switch branch_ismi   
13-git clone -b branch_ismi URL
14-Eğer iki veya daha fazla kişi ayn ısatırda farklı loglar değişiklikler yaparsa çakışma durumu ortaya çıkar çözümü ekip içinde olmalıdır.
15-     commit geçmişini, 
	commit yazarını, 
	commit yazarının email adresini 
	commitin atıldığı zaman bilgisini görebiliriz.
16-  Working directory'deki değişiklikleri ve son commit arasındaki farkları gösterir.
17- staging Area kısmına eklenmiş olan dosyaları geri Working directorye çekeriz.
18-git commit local repoya kaydetmeyi sağlar
   git push remote repoya kaydetmeyi sağlar.
19-Bir commit yazılırken gelişi güzel yazılamaz belli kriterleri vardır.
	-bir commit diğerlerini etkilememeli ve diğerler olmadan anlamlı olmalıdır BAĞIMSIZLIK
	-yarım kalmış, eksik ve hatalı olmamalıdır TAMAMLANMIŞLIK
	-projenin geçmişindeki gelişimi anlamak için bir iz bırakılmalıdır ANLAMLILIK
20-Projenin kod ve geçmişini kaydeder.
21-İkiside farklı kavram ama projenin gelişimini sağlar
	git tag belirli bir commit üzerine etiketleme yapar genelde bir sürüm bilgisi olur ve sabitdir değiştirilemez
	git branch projede bağımsız geliştirme dalları oluşturmamızı sağlar
22- Kullanılan ide içinde gelen git arayüzleri, Github Desktop, SourceTree, GitKraken, SmartGit, Magit, RepoZ, GitViewer, Glint
23-Github bir hostingdir uzak sunucu ve işbiriliği imkanı sağlar. Git ise projenin geçmiş takibini değişiklikleri takip eder.
GitLab,Github,Bitbucket vb
