1- Git Nedir ? :

Git, dağıtık bir versiyon kontrol sistemidir. Yazılım geliştirme süreçlerinde, bir ekip veya bireylerin kodlarını takip etmelerine, yönetmelerine ve işbirliği yapmalarına olanak tanır. Git, projenin herhangi bir noktasındaki dosyaların ve kod değişikliklerinin takibini sağlar.Açık kaynaklıdır.

2- "git pull" ile "git fetch" komutlarının farkı nedir? :

git fetch komutu, uzak depodaki değişiklikleri alır ve yerel depoyu güncellemeden önce onları yerelde saklar. git pull ise, aynı işlemi yapar, ancak ayrıca yerel depoyu güncellemek için de bir birleştirme işlemi gerçekleştirir.

3-Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir? :

Takım arkadaşımız commitleyip push etmemiş olabilir ya da farklı branche push edilmiş olabilir.

4-"git fetch origin" komutundaki "origin" neye karşılık gelmektedir? :

"origin", Git'te genellikle varsayılan olarak tanımlanan bir uzak depo adıdır. Bir Git deposunu klonladığınızda, genellikle bu depoya "origin" adı verilir. Bu, orijinal (origin) depoyu temsil eder ve genellikle projenin ana depo adresini ifade eder.

5-"HEAD" kelimesi neyi temsil etmektedir? :

"HEAD" en son yapılan commit'i işaret eder.Farklı branch e geçtiğimizde HEAD de güncellemiş olacaktır.

6-"Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir? : 

"Staging Area" veya "Index", Git'in temel kavramlarından biridir ve değişikliklerin kaydedilmeden önce geçici olarak saklandığı bir ara bölgedir. Bu bölge, dosyaların son durumunu bir sonraki commit için hazırlamamıza olanak tanır.

7- "Untracked file" ne demektir?

Untracked file" terimi, Git'in çalışma dizininde bulunan ve henüz Git'in takibine alınmamış dosyaları ifade eder. Yani, bu dosyalar, Git'in dikkate almadığı ve değişikliklerini izlemediği dosyalardır.

8-".git" klasörünü silersek ne olur? :

Eğer .git klasörünü silerseniz, Git deposunun kontrolü kaybolur ve projenin Git tarafından yönetilen tüm özellikleri kullanılamaz hale gelir.

9- Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız? :

İlk başta şablon dizini oluşturulur.
mkdir -p ~/.git-templates/init

sonrasında ReadMe.md dosyası oluşturulup.
echo "# My Project" > ~/.git-templates/init/ReadMe.md

 Git konfigürasyonunu güncelleriz.
git config --global init.templatedir '~/.git-templates'

10- Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?

branch yapısı dallanmayı yani projede ayrı bir alanda çalışmamızı sağlar.Bu şekilde aynı projede birden çok kişi ayrı şekilde çalışabilir.

11-Sıfırdan bir "branch" nasıl oluşturabiliriz?

git branch "branch_isminiz" komutuyla yeni branch oluşturulabilir


12-Var olan bir "branch"e nasıl geçebiliriz?

Eğer önceden oluşturulan bir branch'e geçmek istiyorsak git switch "branch_isminiz" komutunu kullanabiliriz.

13-"git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?

Sadece belirli bir branch'i çekmek istiyorsak 
 git clone --single-branch --branch branch_name repository_url komutunu kullanabiliriz.

 
14-"Merge conflict" ne demektir?

Aynı projenin aynı yerinde değişiklik yapılmışsa git bunu algılar ve kullanıcıya "Merge conflict" hatası verir.

15-"git log" komutu ile hangi bilgileri görebiliriz?

o repodaki atılan bütün commitleri ve o kişiye ait bilgileri görebiliriz.Tarih mesaj kısmınıda inceleyebiliriz.

16- "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?

-2 commit arasındaki değişikler
-Şu an ki durum ile son commit arasındaki değişiklikler
-Staging area ile son atılan commit arasındaki değişiklikler
-iki farklı branch arasındaki değişiklikler

17-Git reset ile neyi geri alıyoruz?

Staging area'ya gönderilen tüm değişiklikleri geri alıyoruz.


18-"git commit" ile "git push" arasındaki fark nedir?

git commit ile localimizdeki değişiklikleri kaydedip izleyebiliriz fakat sunucuya göndermiş olmayız.git push ile bu commitleri sunucuya göndeririz.Biri localde bulunur biri sunucuda.

19-Atomic commit ne demektir?

Tek bir değişikliği adım adım commitleme işlemidir.Bu şekilde çalışmanın daha anlaşılır olması sağlanır.

20- Repository ne demektir?

Bir projenin kaynak dosyalarının ve kodlarının bulunduğu depodur.

21-"git tag" nedir? "git branch"’ten farkı nedir?

git tag; Belirli bir commiti işaretlemek için kullanılır.
git branch; Paralel çalışma dallarını yönetmek ve izlemek için kullanılır.

22-Git'i görsel olarak kullanabilmek için hangi üçüncü taraf araçları ve uygulamaları kullanabiliriz?

SourceTree ,Gitkraken,Github Desktop gibi araçları kullanabiliriz.

23-"GitHub" ile "git" arasındaki fark nedir? GitHub benzeri diğer siteler nelerdir? GitHub veya diğer sitelerdeki kullanıcı adlarını yazar mısınız?

Git kontrol sistemidir,github ise bu kontrol sistemiyle çalışan depo aracıdır.

24-main ya da master branch'inin diğer branchlerden farkı nedir?

Bu branchler ana branchtir ve projenin aslını oluşturur.Diğer branclar ise projenin farklı kişiler tarafında ayrı olarak geliştirilmesini sağlar.

25-".gitignore" dosyası nedir ve ne amaçla kullanılır?

Git deposunda izlenmesini istemediğimiz dosyaları ve klasörleri belirlemek için kullanılır.
