Soru 1 Git Nedir ?
- Git bir versiyon kontrol sistemidir. Özellikle ekip çalışması gerektiren işlerde kullanılması önem arz etmektedir. Aynı zamanda git sayesinde geçmişe rahatlıkla erişebiliyoruz.

Soru 2 "git pull" ile "git fetch" komutlarının farkı nedir?
- Git Fetch ile değişikliklerin olduğu bilgisini alıyoruz fakat değişikliklere lokalimizde erişemiyoruz. Git pull işlemi ile lokalimizde erişebilir hâle geliyoruz.

Soru 3 Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?
- iki türlü yanlış yapılmış olabilir. Ya arkadaşımız commitlemiş fakat pushlamamıştır ya da biz fetch yapmadan pullamaya çalışıyoruzdur.

Soru 4 "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?
- Origin ifadesi uzak depoyu ifade eder ve genelde github için kullanırız.

Soru 5 "HEAD" kelimesi neyi temsil etmektedir?
- Head kelimesi işaretçi anlamına gelir. Son commit ya da branchi gösterir.

Soru 6 "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?
- Staging Area'ya araf olarak nitelendirebileceğimiz ara bir bölge. Lokalimiz ile uzak sunucu arasında bulunur. git add komutuyla staging area'ya alırız ve ardından commitleyip pushlayarak uzak sunucuya göndeririz.

Soru 7 "Untracked file" ne demektir?
- Untracked File takip edilmeyen dosya demektir ve gitin takip etmediğini ifade eder

Soru 8 ".git" klasörünü silersek ne olur?
- .git klasörünü silersek o dosya takip edilemez hâle gelir. .git sayesinde git takip ediyor.

Soru 9 Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?
- Bunun için "git init --template" komutunu kullanmamız gerekiyor. 
- "git init şablonDosyası konumu" komutuyla yapabiliriz.

Soru 10 Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?
- Branch dallanma olarak nitelendirebileceğimiz bir terimdir. Bize eş zamanda başka insanlarla çalışabilmemizi ve dallandırmayla beraber olası bir hatada o branch silinebilir.

Soru 11 Sıfırdan bir "branch" nasıl oluşturabiliriz?
- sıfırdan branch oluşturmak istersek eğer git branch branchadi diyerek oluşturabiliriz.

Soru 12 Var olan bir "branch"e nasıl geçebiliriz?
- git checkout branchadi komutu ile geçebiliriz

Soru 13 "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?
- "git clone -b branchadi" komutuyla sadece o branchi çekebiliriz.

Soru 14 "Merge conflict" ne demektir?
- Merge conflict ifadesi çakışan satırlar için kullanılır. Bir ekip arkadaşımızla proje yaptığımızı düşünelim ve ikimiz de aynı satırları farklı şekilde güncelledik. ikimiz de pushladığımız zaman conflict olur ve git bizden hangisini seçmemiz gerektiğini sorar.

Soru 15 "git log" komutu ile hangi bilgileri görebiliriz?
- commitlediğimiz mesajları ve onunla ilgili bilgileri görüyoruz. Commit id'si,tarih ve kişisel bilgilerimiz. Head ve branchimiz.

Soru 16 "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?
- git diff ile bir dosya içerisindeki değişiklikler, iki branch arasındaki farklar,staging areanın içerisinde bulunan değişikliklere (git diff --staged) erişebiliyoruz. 

Soru 17 Git reset ile neyi geri alıyoruz?
- git add komutuyla staging areaya aldığımız değişikliği geri alıyoruz. Fakat dikkat edilmesi gereken husus, dosyanın içerisindeki değişikliği geri almıyoruz.

Soru 18 Atomic commit ne demektir?
- Atomic commit belirli prensiplere bağlı kalarak yapılan bir commit çeşididir.

-> Yazılım geliştirmede atomik commit, bir sürüm kontrol sisteminde (örneğin Git) yapılan bir commit işleminin tek bir değişikliği temsil etmesi anlamına gelir. Yani bir commit'te birden fazla, birbirinden bağımsız değişiklik yapılmamalıdır.

Peki neden atomic commit kullanmalıyız ?

* Geçmiş sürümlere geri dönmeyi kolaylaştırır: Bir hata olduğunda veya eski bir sürüme geri dönmek istediğinizde, hangi commit'in sorumlu olduğunu kolayca belirleyebilirsiniz.
* Hata izlemeyi kolaylaştırır: Hataları hangi commit'in getirdiğini takip ederek sorunu daha hızlı çözebilirsiniz.
* Kod incelemesini kolaylaştırır: Her commit tek bir değişiklik temsil ettiğinden, kod incelemesi daha kolay ve daha net hale gelir.

Atomik Commit Nasıl Yapılır?

Atomik commit yapmak için, her bir değişiklik için ayrı bir commit oluşturmanız gerekir. Örneğin, bir web sitesinin tasarımında bir hata buldunuz ve düzelttiniz. Bu düzeltmeyi tek bir commit olarak kaydetmek yerine, aynı commit'e başka düzenlemeler de eklememelisiniz.

Bunu yapmanın birkaç yolu vardır:

* Her değişiklik için ayrı bir branch oluşturabilirsiniz.
* Her değişikliği ayrı bir commit olarak kaydedebilirsiniz.

Atomik Commit'e Dikkat Edilmesi Gereken Noktalar:

* Her commit'e anlamlı bir mesaj eklediğinizden emin olun.
* Commit mesajlarında hangi değişikliklerin yapıldığını açıkça belirtin.
* Büyük değişiklikleri birden fazla commit'e bölebilirsiniz.

Soru 19 Repository ne demektir?
- Bir diğer adıyla repo depo anlamına gelmektedir ve bir projenin depolama yeridir.

Soru 20 "git tag" nedir? "git branch"’ten farkı nedir?
- git tag commitleri yönetmemize kolaylık sağlar. Belirli commite dönmemize kolaylık sağlarken sürümleri daha kolay yönetmemizi sağlar.

Bazı kullanım şekilleri:

Belirli bir commit'e tag oluşturmak:
git tag <tag_ismi> <commit_hash>

Örneğin, "v1.0.0" adında bir tag oluşturmak için aşağıdaki komutu kullanabilirsiniz:
git tag v1.0.0 HEAD

Git branchden farkı ise git branch ayrı bir kol oluştururken git tag var olan commiti etiketlemek için kullanılır.

Soru 21 Git'i görsel olarak kullanabilmek için hangi üçüncü taraf araçları ve uygulamaları kullanabiliriz?
- Git kraken, Github Desktop,Git Fork,Sublime Merge 

Soru 22 "GitHub" ile "git" arasındaki fark nedir? GitHub benzeri diğer siteler nelerdir? GitHub veya diğer sitelerdeki kullanıcı adlarını yazar mısınız?
-Git bir versiyon kontrol sistemiyken GitHub git depolarını barındıran bir platformdur.
Gitlab, Bitbucket örnek olarak verilebilir.




